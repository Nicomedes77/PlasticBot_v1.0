
PlasticBOT_v01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cb4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08004dc0  08004dc0  00014dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051ac  080051ac  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080051ac  080051ac  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051ac  080051ac  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051ac  080051ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051b0  080051b0  000151b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080051b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000074  08005228  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08005228  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6c3  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002205  00000000  00000000  0002f760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00031968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  00032838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187ad  00000000  00000000  00033628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f5b  00000000  00000000  0004bdd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ec84  00000000  00000000  0005cd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eb9b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004284  00000000  00000000  000eba08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08004da8 	.word	0x08004da8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08004da8 	.word	0x08004da8

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b086      	sub	sp, #24
 800036c:	af02      	add	r7, sp, #8
 800036e:	4603      	mov	r3, r0
 8000370:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	f023 030f 	bic.w	r3, r3, #15
 8000378:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	011b      	lsls	r3, r3, #4
 800037e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000380:	7bfb      	ldrb	r3, [r7, #15]
 8000382:	f043 030c 	orr.w	r3, r3, #12
 8000386:	b2db      	uxtb	r3, r3
 8000388:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800038a:	7bfb      	ldrb	r3, [r7, #15]
 800038c:	f043 0308 	orr.w	r3, r3, #8
 8000390:	b2db      	uxtb	r3, r3
 8000392:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000394:	7bbb      	ldrb	r3, [r7, #14]
 8000396:	f043 030c 	orr.w	r3, r3, #12
 800039a:	b2db      	uxtb	r3, r3
 800039c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800039e:	7bbb      	ldrb	r3, [r7, #14]
 80003a0:	f043 0308 	orr.w	r3, r3, #8
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80003a8:	f107 0208 	add.w	r2, r7, #8
 80003ac:	2364      	movs	r3, #100	; 0x64
 80003ae:	9300      	str	r3, [sp, #0]
 80003b0:	2304      	movs	r3, #4
 80003b2:	214e      	movs	r1, #78	; 0x4e
 80003b4:	4803      	ldr	r0, [pc, #12]	; (80003c4 <lcd_send_cmd+0x5c>)
 80003b6:	f002 fcb7 	bl	8002d28 <HAL_I2C_Master_Transmit>
}
 80003ba:	bf00      	nop
 80003bc:	3710      	adds	r7, #16
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	2000010c 	.word	0x2000010c

080003c8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af02      	add	r7, sp, #8
 80003ce:	4603      	mov	r3, r0
 80003d0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	f023 030f 	bic.w	r3, r3, #15
 80003d8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	011b      	lsls	r3, r3, #4
 80003de:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80003e0:	7bfb      	ldrb	r3, [r7, #15]
 80003e2:	f043 030d 	orr.w	r3, r3, #13
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80003ea:	7bfb      	ldrb	r3, [r7, #15]
 80003ec:	f043 0309 	orr.w	r3, r3, #9
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80003f4:	7bbb      	ldrb	r3, [r7, #14]
 80003f6:	f043 030d 	orr.w	r3, r3, #13
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80003fe:	7bbb      	ldrb	r3, [r7, #14]
 8000400:	f043 0309 	orr.w	r3, r3, #9
 8000404:	b2db      	uxtb	r3, r3
 8000406:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000408:	f107 0208 	add.w	r2, r7, #8
 800040c:	2364      	movs	r3, #100	; 0x64
 800040e:	9300      	str	r3, [sp, #0]
 8000410:	2304      	movs	r3, #4
 8000412:	214e      	movs	r1, #78	; 0x4e
 8000414:	4803      	ldr	r0, [pc, #12]	; (8000424 <lcd_send_data+0x5c>)
 8000416:	f002 fc87 	bl	8002d28 <HAL_I2C_Master_Transmit>
}
 800041a:	bf00      	nop
 800041c:	3710      	adds	r7, #16
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	2000010c 	.word	0x2000010c

08000428 <lcd_init>:
		lcd_send_data (' ');
	}
}

void lcd_init (void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800042c:	2032      	movs	r0, #50	; 0x32
 800042e:	f001 fcb9 	bl	8001da4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000432:	2030      	movs	r0, #48	; 0x30
 8000434:	f7ff ff98 	bl	8000368 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000438:	2005      	movs	r0, #5
 800043a:	f001 fcb3 	bl	8001da4 <HAL_Delay>
	lcd_send_cmd (0x30);
 800043e:	2030      	movs	r0, #48	; 0x30
 8000440:	f7ff ff92 	bl	8000368 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000444:	2001      	movs	r0, #1
 8000446:	f001 fcad 	bl	8001da4 <HAL_Delay>
	lcd_send_cmd (0x30);
 800044a:	2030      	movs	r0, #48	; 0x30
 800044c:	f7ff ff8c 	bl	8000368 <lcd_send_cmd>
	HAL_Delay(10);
 8000450:	200a      	movs	r0, #10
 8000452:	f001 fca7 	bl	8001da4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000456:	2020      	movs	r0, #32
 8000458:	f7ff ff86 	bl	8000368 <lcd_send_cmd>
	HAL_Delay(10);
 800045c:	200a      	movs	r0, #10
 800045e:	f001 fca1 	bl	8001da4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000462:	2028      	movs	r0, #40	; 0x28
 8000464:	f7ff ff80 	bl	8000368 <lcd_send_cmd>
	HAL_Delay(1);
 8000468:	2001      	movs	r0, #1
 800046a:	f001 fc9b 	bl	8001da4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800046e:	2008      	movs	r0, #8
 8000470:	f7ff ff7a 	bl	8000368 <lcd_send_cmd>
	HAL_Delay(1);
 8000474:	2001      	movs	r0, #1
 8000476:	f001 fc95 	bl	8001da4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800047a:	2001      	movs	r0, #1
 800047c:	f7ff ff74 	bl	8000368 <lcd_send_cmd>
	HAL_Delay(1);
 8000480:	2001      	movs	r0, #1
 8000482:	f001 fc8f 	bl	8001da4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000486:	2006      	movs	r0, #6
 8000488:	f7ff ff6e 	bl	8000368 <lcd_send_cmd>
	HAL_Delay(1);
 800048c:	2001      	movs	r0, #1
 800048e:	f001 fc89 	bl	8001da4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000492:	200c      	movs	r0, #12
 8000494:	f7ff ff68 	bl	8000368 <lcd_send_cmd>
}
 8000498:	bf00      	nop
 800049a:	bd80      	pop	{r7, pc}

0800049c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80004a4:	e006      	b.n	80004b4 <lcd_send_string+0x18>
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	1c5a      	adds	r2, r3, #1
 80004aa:	607a      	str	r2, [r7, #4]
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff ff8a 	bl	80003c8 <lcd_send_data>
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d1f4      	bne.n	80004a6 <lcd_send_string+0xa>
}
 80004bc:	bf00      	nop
 80004be:	bf00      	nop
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
	...

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	static uint32_t previousTick = 0;
	uint32_t currentTick = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f001 fc05 	bl	8001ce0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f857 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f987 	bl	80007ec <MX_GPIO_Init>
  MX_DMA_Init();
 80004de:	f000 f967 	bl	80007b0 <MX_DMA_Init>
  MX_ADC1_Init();
 80004e2:	f000 f8ad 	bl	8000640 <MX_ADC1_Init>
  MX_I2C1_Init();
 80004e6:	f000 f8e9 	bl	80006bc <MX_I2C1_Init>
  MX_TIM2_Init();
 80004ea:	f000 f915 	bl	8000718 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80004ee:	f7ff ff9b 	bl	8000428 <lcd_init>
  PresentacionLCD();
 80004f2:	f000 fa19 	bl	8000928 <PresentacionLCD>
  PetConv_Init(&PETfilConv1);
 80004f6:	481c      	ldr	r0, [pc, #112]	; (8000568 <main+0xa0>)
 80004f8:	f000 fa34 	bl	8000964 <PetConv_Init>
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  HAL_TIM_Base_Start_IT(&htim2);
 80004fc:	481b      	ldr	r0, [pc, #108]	; (800056c <main+0xa4>)
 80004fe:	f003 fc25 	bl	8003d4c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(g_btnPressed != NoPressed)
 8000502:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <main+0xa8>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d014      	beq.n	8000534 <main+0x6c>
	  {
		  updateDataGUI(indexes,&g_btnPressed,&PETfilConv1,&currentScreen,&g_velocidad_Col1);
 800050a:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <main+0xac>)
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <main+0xb0>)
 8000510:	4a15      	ldr	r2, [pc, #84]	; (8000568 <main+0xa0>)
 8000512:	4917      	ldr	r1, [pc, #92]	; (8000570 <main+0xa8>)
 8000514:	4819      	ldr	r0, [pc, #100]	; (800057c <main+0xb4>)
 8000516:	f000 fb07 	bl	8000b28 <updateDataGUI>
		  updateLCD(&PETfilConv1,&currentScreen);
 800051a:	4917      	ldr	r1, [pc, #92]	; (8000578 <main+0xb0>)
 800051c:	4812      	ldr	r0, [pc, #72]	; (8000568 <main+0xa0>)
 800051e:	f000 fe17 	bl	8001150 <updateLCD>
		  updateCursor(indexes,&PETfilConv1,&currentScreen,&g_velocidad_Col1);
 8000522:	4b14      	ldr	r3, [pc, #80]	; (8000574 <main+0xac>)
 8000524:	4a14      	ldr	r2, [pc, #80]	; (8000578 <main+0xb0>)
 8000526:	4910      	ldr	r1, [pc, #64]	; (8000568 <main+0xa0>)
 8000528:	4814      	ldr	r0, [pc, #80]	; (800057c <main+0xb4>)
 800052a:	f000 ffd3 	bl	80014d4 <updateCursor>
		  g_btnPressed = NoPressed;
 800052e:	4b10      	ldr	r3, [pc, #64]	; (8000570 <main+0xa8>)
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
	  }

	  //Control_ON_OFF(&PETfilConv1);
	  ControlAlarms(&g_alarmFil,&PETfilConv1);
 8000534:	490c      	ldr	r1, [pc, #48]	; (8000568 <main+0xa0>)
 8000536:	4812      	ldr	r0, [pc, #72]	; (8000580 <main+0xb8>)
 8000538:	f000 faae 	bl	8000a98 <ControlAlarms>
	  currentTick = HAL_GetTick();
 800053c:	f001 fc28 	bl	8001d90 <HAL_GetTick>
 8000540:	6078      	str	r0, [r7, #4]
	  if((currentTick - previousTick > 1000) && (currentScreen == pantallaWorkingScreen))
 8000542:	4b10      	ldr	r3, [pc, #64]	; (8000584 <main+0xbc>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800054e:	d9d8      	bls.n	8000502 <main+0x3a>
 8000550:	4b09      	ldr	r3, [pc, #36]	; (8000578 <main+0xb0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d1d4      	bne.n	8000502 <main+0x3a>
	  {
		  printCurrentTemp(&PETfilConv1);
 8000558:	4803      	ldr	r0, [pc, #12]	; (8000568 <main+0xa0>)
 800055a:	f000 ff95 	bl	8001488 <printCurrentTemp>
		  previousTick = currentTick;
 800055e:	4a09      	ldr	r2, [pc, #36]	; (8000584 <main+0xbc>)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	6013      	str	r3, [r2, #0]
	  if(g_btnPressed != NoPressed)
 8000564:	e7cd      	b.n	8000502 <main+0x3a>
 8000566:	bf00      	nop
 8000568:	20000098 	.word	0x20000098
 800056c:	200001e4 	.word	0x200001e4
 8000570:	20000000 	.word	0x20000000
 8000574:	20000090 	.word	0x20000090
 8000578:	200000ec 	.word	0x200000ec
 800057c:	200000cc 	.word	0x200000cc
 8000580:	20000094 	.word	0x20000094
 8000584:	200000f0 	.word	0x200000f0

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000592:	2228      	movs	r2, #40	; 0x28
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f003 ffc4 	bl	8004524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c6:	2301      	movs	r3, #1
 80005c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 80005d4:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 80005d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 fea8 	bl	8003334 <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005ea:	f001 f9af 	bl	800194c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2302      	movs	r3, #2
 80005f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	2102      	movs	r1, #2
 800060a:	4618      	mov	r0, r3
 800060c:	f003 f912 	bl	8003834 <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000616:	f001 f999 	bl	800194c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800061a:	2302      	movs	r3, #2
 800061c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800061e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000622:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f003 fa8a 	bl	8003b40 <HAL_RCCEx_PeriphCLKConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000632:	f001 f98b 	bl	800194c <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3750      	adds	r7, #80	; 0x50
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_ADC1_Init+0x74>)
 8000652:	4a19      	ldr	r2, [pc, #100]	; (80006b8 <MX_ADC1_Init+0x78>)
 8000654:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000656:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <MX_ADC1_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800065c:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <MX_ADC1_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000662:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_ADC1_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_ADC1_Init+0x74>)
 800066a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800066e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000670:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_ADC1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000676:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_ADC1_Init+0x74>)
 8000678:	2201      	movs	r2, #1
 800067a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800067c:	480d      	ldr	r0, [pc, #52]	; (80006b4 <MX_ADC1_Init+0x74>)
 800067e:	f001 fbb5 	bl	8001dec <HAL_ADC_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000688:	f001 f960 	bl	800194c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800068c:	2301      	movs	r3, #1
 800068e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000690:	2301      	movs	r3, #1
 8000692:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	4619      	mov	r1, r3
 800069c:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_ADC1_Init+0x74>)
 800069e:	f001 fc7d 	bl	8001f9c <HAL_ADC_ConfigChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80006a8:	f001 f950 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000168 	.word	0x20000168
 80006b8:	40012400 	.word	0x40012400

080006bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_I2C1_Init+0x50>)
 80006c2:	4a13      	ldr	r2, [pc, #76]	; (8000710 <MX_I2C1_Init+0x54>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_I2C1_Init+0x50>)
 80006c8:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_I2C1_Init+0x58>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_I2C1_Init+0x50>)
 80006da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_I2C1_Init+0x50>)
 80006fa:	f002 f9d1 	bl	8002aa0 <HAL_I2C_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000704:	f001 f922 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	2000010c 	.word	0x2000010c
 8000710:	40005400 	.word	0x40005400
 8000714:	000186a0 	.word	0x000186a0

08000718 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072c:	463b      	mov	r3, r7
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000734:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <MX_TIM2_Init+0x94>)
 8000736:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800073a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 56000-1;
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <MX_TIM2_Init+0x94>)
 800073e:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 8000742:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <MX_TIM2_Init+0x94>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7-1;
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_TIM2_Init+0x94>)
 800074c:	2206      	movs	r2, #6
 800074e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000750:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_TIM2_Init+0x94>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <MX_TIM2_Init+0x94>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800075c:	4813      	ldr	r0, [pc, #76]	; (80007ac <MX_TIM2_Init+0x94>)
 800075e:	f003 faa5 	bl	8003cac <HAL_TIM_Base_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000768:	f001 f8f0 	bl	800194c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800076c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000770:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	4619      	mov	r1, r3
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <MX_TIM2_Init+0x94>)
 800077a:	f003 fc69 	bl	8004050 <HAL_TIM_ConfigClockSource>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000784:	f001 f8e2 	bl	800194c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000790:	463b      	mov	r3, r7
 8000792:	4619      	mov	r1, r3
 8000794:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_TIM2_Init+0x94>)
 8000796:	f003 fe31 	bl	80043fc <HAL_TIMEx_MasterConfigSynchronization>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007a0:	f001 f8d4 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200001e4 	.word	0x200001e4

080007b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_DMA_Init+0x38>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	4a0b      	ldr	r2, [pc, #44]	; (80007e8 <MX_DMA_Init+0x38>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6153      	str	r3, [r2, #20]
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_DMA_Init+0x38>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	200b      	movs	r0, #11
 80007d4:	f001 fdf3 	bl	80023be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007d8:	200b      	movs	r0, #11
 80007da:	f001 fe0c 	bl	80023f6 <HAL_NVIC_EnableIRQ>

}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0310 	add.w	r3, r7, #16
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000800:	4b43      	ldr	r3, [pc, #268]	; (8000910 <MX_GPIO_Init+0x124>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a42      	ldr	r2, [pc, #264]	; (8000910 <MX_GPIO_Init+0x124>)
 8000806:	f043 0310 	orr.w	r3, r3, #16
 800080a:	6193      	str	r3, [r2, #24]
 800080c:	4b40      	ldr	r3, [pc, #256]	; (8000910 <MX_GPIO_Init+0x124>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f003 0310 	and.w	r3, r3, #16
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000818:	4b3d      	ldr	r3, [pc, #244]	; (8000910 <MX_GPIO_Init+0x124>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a3c      	ldr	r2, [pc, #240]	; (8000910 <MX_GPIO_Init+0x124>)
 800081e:	f043 0320 	orr.w	r3, r3, #32
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b3a      	ldr	r3, [pc, #232]	; (8000910 <MX_GPIO_Init+0x124>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f003 0320 	and.w	r3, r3, #32
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000830:	4b37      	ldr	r3, [pc, #220]	; (8000910 <MX_GPIO_Init+0x124>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a36      	ldr	r2, [pc, #216]	; (8000910 <MX_GPIO_Init+0x124>)
 8000836:	f043 0304 	orr.w	r3, r3, #4
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b34      	ldr	r3, [pc, #208]	; (8000910 <MX_GPIO_Init+0x124>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0304 	and.w	r3, r3, #4
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000848:	4b31      	ldr	r3, [pc, #196]	; (8000910 <MX_GPIO_Init+0x124>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a30      	ldr	r2, [pc, #192]	; (8000910 <MX_GPIO_Init+0x124>)
 800084e:	f043 0308 	orr.w	r3, r3, #8
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b2e      	ldr	r3, [pc, #184]	; (8000910 <MX_GPIO_Init+0x124>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0308 	and.w	r3, r3, #8
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RESET_MOTOR1_Pin|PASOS_MOTOR1_Pin|Led_Pin, GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	f248 0105 	movw	r1, #32773	; 0x8005
 8000866:	482b      	ldr	r0, [pc, #172]	; (8000914 <MX_GPIO_Init+0x128>)
 8000868:	f002 f8d1 	bl	8002a0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|CALENTADOR1_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000872:	4829      	ldr	r0, [pc, #164]	; (8000918 <MX_GPIO_Init+0x12c>)
 8000874:	f002 f8cb 	bl	8002a0e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RotaryDT_Pin RotaryCLK_Pin Button_Pin */
  GPIO_InitStruct.Pin = RotaryDT_Pin|RotaryCLK_Pin|Button_Pin;
 8000878:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800087c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800087e:	4b27      	ldr	r3, [pc, #156]	; (800091c <MX_GPIO_Init+0x130>)
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000886:	f107 0310 	add.w	r3, r7, #16
 800088a:	4619      	mov	r1, r3
 800088c:	4824      	ldr	r0, [pc, #144]	; (8000920 <MX_GPIO_Init+0x134>)
 800088e:	f001 ff2d 	bl	80026ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_MOTOR1_Pin PASOS_MOTOR1_Pin Led_Pin */
  GPIO_InitStruct.Pin = RESET_MOTOR1_Pin|PASOS_MOTOR1_Pin|Led_Pin;
 8000892:	f248 0305 	movw	r3, #32773	; 0x8005
 8000896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	4619      	mov	r1, r3
 80008aa:	481a      	ldr	r0, [pc, #104]	; (8000914 <MX_GPIO_Init+0x128>)
 80008ac:	f001 ff1e 	bl	80026ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Pin CALENTADOR1_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|CALENTADOR1_Pin;
 80008b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2302      	movs	r3, #2
 80008c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c2:	f107 0310 	add.w	r3, r7, #16
 80008c6:	4619      	mov	r1, r3
 80008c8:	4813      	ldr	r0, [pc, #76]	; (8000918 <MX_GPIO_Init+0x12c>)
 80008ca:	f001 ff0f 	bl	80026ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Detector_fil_Pin */
  GPIO_InitStruct.Pin = Detector_fil_Pin;
 80008ce:	2308      	movs	r3, #8
 80008d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_GPIO_Init+0x138>)
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Detector_fil_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 0310 	add.w	r3, r7, #16
 80008de:	4619      	mov	r1, r3
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <MX_GPIO_Init+0x12c>)
 80008e2:	f001 ff03 	bl	80026ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	2009      	movs	r0, #9
 80008ec:	f001 fd67 	bl	80023be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80008f0:	2009      	movs	r0, #9
 80008f2:	f001 fd80 	bl	80023f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2101      	movs	r1, #1
 80008fa:	2028      	movs	r0, #40	; 0x28
 80008fc:	f001 fd5f 	bl	80023be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000900:	2028      	movs	r0, #40	; 0x28
 8000902:	f001 fd78 	bl	80023f6 <HAL_NVIC_EnableIRQ>

}
 8000906:	bf00      	nop
 8000908:	3720      	adds	r7, #32
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40021000 	.word	0x40021000
 8000914:	40010800 	.word	0x40010800
 8000918:	40010c00 	.word	0x40010c00
 800091c:	10110000 	.word	0x10110000
 8000920:	40011000 	.word	0x40011000
 8000924:	10310000 	.word	0x10310000

08000928 <PresentacionLCD>:

/* USER CODE BEGIN 4 */

void PresentacionLCD(void)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 char *screenStart[] = {
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <PresentacionLCD+0x38>)
 8000930:	463c      	mov	r4, r7
 8000932:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000934:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		"                    ",
		"   CFP nro 8 SMATA  "
	};


	clearScreen();
 8000938:	f000 ff7e 	bl	8001838 <clearScreen>
	HAL_Delay(100);
 800093c:	2064      	movs	r0, #100	; 0x64
 800093e:	f001 fa31 	bl	8001da4 <HAL_Delay>
	printScreen(screenStart);
 8000942:	463b      	mov	r3, r7
 8000944:	4618      	mov	r0, r3
 8000946:	f000 ff47 	bl	80017d8 <printScreen>
	HAL_Delay(4000);
 800094a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800094e:	f001 fa29 	bl	8001da4 <HAL_Delay>
	clearScreen();
 8000952:	f000 ff71 	bl	8001838 <clearScreen>
}
 8000956:	bf00      	nop
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	bd90      	pop	{r4, r7, pc}
 800095e:	bf00      	nop
 8000960:	0800504c 	.word	0x0800504c

08000964 <PetConv_Init>:

void PetConv_Init(PETfilConv *_petFilConv)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	//_petFilConv -> filDetector_state = false;	//false = detector de filamento DESHABILITADO | true = detector de filamento HABILITADO
	_petFilConv -> lightAlarm_state = false;	//false = alarma luminica DESHABILITADA | true = alarma luminica HABILITADA
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2200      	movs	r2, #0
 8000970:	705a      	strb	r2, [r3, #1]
	_petFilConv -> soundAlarm_state = false;	//false = alarma sonora DESHABILITADA | true = alarma sonora HABILITADA
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
	_petFilConv -> col_state = false;			//false = motor del colector DESHABILITADO | true = motor del colector HABILITADO
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2200      	movs	r2, #0
 800097c:	709a      	strb	r2, [r3, #2]
	//_petFilConv -> velocidad_Col = APAGADO;		// APAGADO = 0 mm/min | VELOCIDAD 1 = 300 mm/min | | VELOCIDAD 2 = 400 mm/min | VELOCIDAD 3 = 500 mm/min
	_petFilConv -> currentExtTemp = 0;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2200      	movs	r2, #0
 8000982:	605a      	str	r2, [r3, #4]
	_petFilConv -> previousSetExtTemp = 25;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2219      	movs	r2, #25
 8000988:	609a      	str	r2, [r3, #8]
	_petFilConv -> setExtTemp = 25;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2219      	movs	r2, #25
 800098e:	60da      	str	r2, [r3, #12]
	_petFilConv -> PID_d = 0;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f04f 0200 	mov.w	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
	_petFilConv -> PID_error = 0;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f04f 0200 	mov.w	r2, #0
 800099e:	61da      	str	r2, [r3, #28]
	_petFilConv -> PID_i = 0;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f04f 0200 	mov.w	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
	_petFilConv -> PID_p = 0;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f04f 0200 	mov.w	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
	_petFilConv -> elapsedTime = 0;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f04f 0200 	mov.w	r2, #0
 80009b6:	625a      	str	r2, [r3, #36]	; 0x24
	_petFilConv -> factor_cor = 20;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2214      	movs	r2, #20
 80009bc:	631a      	str	r2, [r3, #48]	; 0x30
	_petFilConv -> previous_error = 0;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f04f 0200 	mov.w	r2, #0
 80009c4:	621a      	str	r2, [r3, #32]
	_petFilConv -> time = HAL_GetTick();
 80009c6:	f001 f9e3 	bl	8001d90 <HAL_GetTick>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fc73 	bl	80002b8 <__aeabi_ui2f>
 80009d2:	4602      	mov	r2, r0
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	629a      	str	r2, [r3, #40]	; 0x28
	_petFilConv -> timePrev = 0;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f04f 0200 	mov.w	r2, #0
 80009de:	62da      	str	r2, [r3, #44]	; 0x2c

	//deshabilito MOTOR COL 1
	HAL_GPIO_WritePin(GPIOA, RESET_MOTOR1_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2101      	movs	r1, #1
 80009e4:	4806      	ldr	r0, [pc, #24]	; (8000a00 <PetConv_Init+0x9c>)
 80009e6:	f002 f812 	bl	8002a0e <HAL_GPIO_WritePin>
	//deshabilito CALENTADOR 1
	HAL_GPIO_WritePin(GPIOB, CALENTADOR1_Pin, GPIO_PIN_SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <PetConv_Init+0xa0>)
 80009f2:	f002 f80c 	bl	8002a0e <HAL_GPIO_WritePin>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40010800 	.word	0x40010800
 8000a04:	40010c00 	.word	0x40010c00

08000a08 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	80fb      	strh	r3, [r7, #6]
	static uint32_t previousTick;
	uint32_t currentTick = HAL_GetTick();
 8000a12:	f001 f9bd 	bl	8001d90 <HAL_GetTick>
 8000a16:	60f8      	str	r0, [r7, #12]
	//Rotate encoder CCKW or CKW
	if(currentTick - previousTick > 300)
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <HAL_GPIO_EXTI_Callback+0x80>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	68fa      	ldr	r2, [r7, #12]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000a24:	d92b      	bls.n	8000a7e <HAL_GPIO_EXTI_Callback+0x76>
	{
		if(GPIO_Pin == RotaryDT_Pin)			g_btnPressed = Left;
 8000a26:	88fb      	ldrh	r3, [r7, #6]
 8000a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a2c:	d103      	bne.n	8000a36 <HAL_GPIO_EXTI_Callback+0x2e>
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <HAL_GPIO_EXTI_Callback+0x84>)
 8000a30:	2202      	movs	r2, #2
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	e020      	b.n	8000a78 <HAL_GPIO_EXTI_Callback+0x70>
		else if(GPIO_Pin == RotaryCLK_Pin)		g_btnPressed = Right;
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a3c:	d103      	bne.n	8000a46 <HAL_GPIO_EXTI_Callback+0x3e>
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <HAL_GPIO_EXTI_Callback+0x84>)
 8000a40:	2203      	movs	r2, #3
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	e018      	b.n	8000a78 <HAL_GPIO_EXTI_Callback+0x70>
		else if(GPIO_Pin == Button_Pin)			g_btnPressed = Ok;
 8000a46:	88fb      	ldrh	r3, [r7, #6]
 8000a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a4c:	d103      	bne.n	8000a56 <HAL_GPIO_EXTI_Callback+0x4e>
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <HAL_GPIO_EXTI_Callback+0x84>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	e010      	b.n	8000a78 <HAL_GPIO_EXTI_Callback+0x70>
		else if(GPIO_Pin == Detector_fil_Pin)
 8000a56:	88fb      	ldrh	r3, [r7, #6]
 8000a58:	2b08      	cmp	r3, #8
 8000a5a:	d10d      	bne.n	8000a78 <HAL_GPIO_EXTI_Callback+0x70>
		{
			if(HAL_GPIO_ReadPin(GPIOB, Detector_fil_Pin))
 8000a5c:	2108      	movs	r1, #8
 8000a5e:	480c      	ldr	r0, [pc, #48]	; (8000a90 <HAL_GPIO_EXTI_Callback+0x88>)
 8000a60:	f001 ffbe 	bl	80029e0 <HAL_GPIO_ReadPin>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d003      	beq.n	8000a72 <HAL_GPIO_EXTI_Callback+0x6a>
			{
				g_alarmFil = false;
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
 8000a70:	e002      	b.n	8000a78 <HAL_GPIO_EXTI_Callback+0x70>
			}
			else
			{
				g_alarmFil = true;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	701a      	strb	r2, [r3, #0]
			}
		}

		previousTick = currentTick;
 8000a78:	4a03      	ldr	r2, [pc, #12]	; (8000a88 <HAL_GPIO_EXTI_Callback+0x80>)
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	6013      	str	r3, [r2, #0]
	}
}
 8000a7e:	bf00      	nop
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200000f4 	.word	0x200000f4
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	40010c00 	.word	0x40010c00
 8000a94:	20000094 	.word	0x20000094

08000a98 <ControlAlarms>:

void ControlAlarms(bool *_sensFil , PETfilConv *_petFilConv)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
	if(*_sensFil)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d00c      	beq.n	8000ac4 <ControlAlarms+0x2c>
	{
		if(_petFilConv -> lightAlarm_state)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	785b      	ldrb	r3, [r3, #1]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <ControlAlarms+0x1e>
		{
			ActivaAlarmaLuminica();
 8000ab2:	f000 f80d 	bl	8000ad0 <ActivaAlarmaLuminica>
		}

		if(_petFilConv -> soundAlarm_state)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d004      	beq.n	8000ac8 <ControlAlarms+0x30>
		{
			ActivaAlarmaSonora();
 8000abe:	f000 f813 	bl	8000ae8 <ActivaAlarmaSonora>

	else
	{
		DesactivaAlarmas();
	}
}
 8000ac2:	e001      	b.n	8000ac8 <ControlAlarms+0x30>
		DesactivaAlarmas();
 8000ac4:	f000 f81c 	bl	8000b00 <DesactivaAlarmas>
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <ActivaAlarmaLuminica>:

void ActivaAlarmaLuminica(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Led_Pin, GPIO_PIN_SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ada:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <ActivaAlarmaLuminica+0x14>)
 8000adc:	f001 ff97 	bl	8002a0e <HAL_GPIO_WritePin>
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40010800 	.word	0x40010800

08000ae8 <ActivaAlarmaSonora>:

void ActivaAlarmaSonora(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, Buzzer_Pin, GPIO_PIN_SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af2:	4802      	ldr	r0, [pc, #8]	; (8000afc <ActivaAlarmaSonora+0x14>)
 8000af4:	f001 ff8b 	bl	8002a0e <HAL_GPIO_WritePin>
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40010c00 	.word	0x40010c00

08000b00 <DesactivaAlarmas>:

void DesactivaAlarmas(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Led_Pin, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <DesactivaAlarmas+0x20>)
 8000b0c:	f001 ff7f 	bl	8002a0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Buzzer_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b16:	4803      	ldr	r0, [pc, #12]	; (8000b24 <DesactivaAlarmas+0x24>)
 8000b18:	f001 ff79 	bl	8002a0e <HAL_GPIO_WritePin>
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40010800 	.word	0x40010800
 8000b24:	40010c00 	.word	0x40010c00

08000b28 <updateDataGUI>:


void updateDataGUI(uint32_t *_indexes , uint32_t *_btn , PETfilConv *_petFilConv , uint32_t *currentScreen , uint32_t *_vel_col)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
 8000b34:	603b      	str	r3, [r7, #0]
	if(*_btn != NoPressed)
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	f000 82f1 	beq.w	8001122 <updateDataGUI+0x5fa>
	{
			if(*_btn == Ok)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	f040 814a 	bne.w	8000dde <updateDataGUI+0x2b6>
			{
				switch(*currentScreen)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b1f      	cmp	r3, #31
 8000b50:	f200 82e9 	bhi.w	8001126 <updateDataGUI+0x5fe>
 8000b54:	a201      	add	r2, pc, #4	; (adr r2, 8000b5c <updateDataGUI+0x34>)
 8000b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5a:	bf00      	nop
 8000b5c:	08000bdd 	.word	0x08000bdd
 8000b60:	08001127 	.word	0x08001127
 8000b64:	08000c5d 	.word	0x08000c5d
 8000b68:	08000c83 	.word	0x08000c83
 8000b6c:	08000ca9 	.word	0x08000ca9
 8000b70:	08000d0d 	.word	0x08000d0d
 8000b74:	08000dbf 	.word	0x08000dbf
 8000b78:	08000dc7 	.word	0x08000dc7
 8000b7c:	08000dcf 	.word	0x08000dcf
 8000b80:	08001127 	.word	0x08001127
 8000b84:	08001127 	.word	0x08001127
 8000b88:	08000bed 	.word	0x08000bed
 8000b8c:	08000c37 	.word	0x08000c37
 8000b90:	08001127 	.word	0x08001127
 8000b94:	08001127 	.word	0x08001127
 8000b98:	08001127 	.word	0x08001127
 8000b9c:	08001127 	.word	0x08001127
 8000ba0:	08001127 	.word	0x08001127
 8000ba4:	08001127 	.word	0x08001127
 8000ba8:	08001127 	.word	0x08001127
 8000bac:	08001127 	.word	0x08001127
 8000bb0:	08001127 	.word	0x08001127
 8000bb4:	08001127 	.word	0x08001127
 8000bb8:	08001127 	.word	0x08001127
 8000bbc:	08001127 	.word	0x08001127
 8000bc0:	08001127 	.word	0x08001127
 8000bc4:	08001127 	.word	0x08001127
 8000bc8:	08001127 	.word	0x08001127
 8000bcc:	08001127 	.word	0x08001127
 8000bd0:	08001127 	.word	0x08001127
 8000bd4:	08001127 	.word	0x08001127
 8000bd8:	08000d21 	.word	0x08000d21
				{
					case pantallaWorkingScreen:	//pantalla de trabajo
						*currentScreen = pantallaMainMenu_part1;
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	220b      	movs	r2, #11
 8000be0:	601a      	str	r2, [r3, #0]
						_indexes[cont_item_PrinMenu] = 0;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	3304      	adds	r3, #4
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
					break;
 8000bea:	e2ad      	b.n	8001148 <updateDataGUI+0x620>

					case pantallaMainMenu_part1: //menu principal (parte 1)
						if(_indexes[cont_item_PrinMenu] == 0) *currentScreen = pantallaWorkingScreen;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	3304      	adds	r3, #4
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d103      	bne.n	8000bfe <updateDataGUI+0xd6>
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
						else if(_indexes[cont_item_PrinMenu] == 1) *currentScreen = pantallaSubMenuExtrusores;
						else if(_indexes[cont_item_PrinMenu] == 2) *currentScreen = pantallaSubMenuColectoresFil;
						else if(_indexes[cont_item_PrinMenu] == 3) *currentScreen = pantallaSubMenuAlarmas;
					break;
 8000bfc:	e295      	b.n	800112a <updateDataGUI+0x602>
						else if(_indexes[cont_item_PrinMenu] == 1) *currentScreen = pantallaSubMenuExtrusores;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	3304      	adds	r3, #4
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d103      	bne.n	8000c10 <updateDataGUI+0xe8>
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	601a      	str	r2, [r3, #0]
					break;
 8000c0e:	e28c      	b.n	800112a <updateDataGUI+0x602>
						else if(_indexes[cont_item_PrinMenu] == 2) *currentScreen = pantallaSubMenuColectoresFil;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	3304      	adds	r3, #4
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d103      	bne.n	8000c22 <updateDataGUI+0xfa>
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	601a      	str	r2, [r3, #0]
					break;
 8000c20:	e283      	b.n	800112a <updateDataGUI+0x602>
						else if(_indexes[cont_item_PrinMenu] == 3) *currentScreen = pantallaSubMenuAlarmas;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	3304      	adds	r3, #4
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b03      	cmp	r3, #3
 8000c2a:	f040 827e 	bne.w	800112a <updateDataGUI+0x602>
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	2204      	movs	r2, #4
 8000c32:	601a      	str	r2, [r3, #0]
					break;
 8000c34:	e279      	b.n	800112a <updateDataGUI+0x602>

					case pantallaMainMenu_part2: //menu principal (parte 2)
						if(_indexes[cont_item_PrinMenu] == 4) *currentScreen = pantallaSubMenuHistorial;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	3304      	adds	r3, #4
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b04      	cmp	r3, #4
 8000c3e:	d103      	bne.n	8000c48 <updateDataGUI+0x120>
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	2205      	movs	r2, #5
 8000c44:	601a      	str	r2, [r3, #0]
						else if(_indexes[cont_item_PrinMenu] == 5) *currentScreen = pantallaSubMenuAcercaDe_part1;
					break;
 8000c46:	e272      	b.n	800112e <updateDataGUI+0x606>
						else if(_indexes[cont_item_PrinMenu] == 5) *currentScreen = pantallaSubMenuAcercaDe_part1;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	3304      	adds	r3, #4
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b05      	cmp	r3, #5
 8000c50:	f040 826d 	bne.w	800112e <updateDataGUI+0x606>
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	2206      	movs	r2, #6
 8000c58:	601a      	str	r2, [r3, #0]
					break;
 8000c5a:	e268      	b.n	800112e <updateDataGUI+0x606>

					case pantallaSubMenuExtrusores: //sub EXTRUSORES
						if(_indexes[cont_item_SubMenuExtrusores] == 0) *currentScreen = pantallaMainMenu_part1;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	3308      	adds	r3, #8
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d103      	bne.n	8000c6e <updateDataGUI+0x146>
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	220b      	movs	r2, #11
 8000c6a:	601a      	str	r2, [r3, #0]
						else if (_indexes[cont_item_SubMenuExtrusores] == 1) *currentScreen = pantallaSubmenuSetTempExt;
					break;
 8000c6c:	e261      	b.n	8001132 <updateDataGUI+0x60a>
						else if (_indexes[cont_item_SubMenuExtrusores] == 1) *currentScreen = pantallaSubmenuSetTempExt;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	3308      	adds	r3, #8
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	f040 825c 	bne.w	8001132 <updateDataGUI+0x60a>
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	2208      	movs	r2, #8
 8000c7e:	601a      	str	r2, [r3, #0]
					break;
 8000c80:	e257      	b.n	8001132 <updateDataGUI+0x60a>

					case pantallaSubMenuColectoresFil:	//sub COLECTORES fil.
						if(_indexes[cont_item_SubMenuColectores] == 0) *currentScreen = pantallaMainMenu_part1;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	330c      	adds	r3, #12
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d103      	bne.n	8000c94 <updateDataGUI+0x16c>
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	220b      	movs	r2, #11
 8000c90:	601a      	str	r2, [r3, #0]
						else if(_indexes[cont_item_SubMenuColectores] == 1)	*currentScreen = pantallaSubMenuSelVelocidadColFil;
					break;
 8000c92:	e250      	b.n	8001136 <updateDataGUI+0x60e>
						else if(_indexes[cont_item_SubMenuColectores] == 1)	*currentScreen = pantallaSubMenuSelVelocidadColFil;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	330c      	adds	r3, #12
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	f040 824b 	bne.w	8001136 <updateDataGUI+0x60e>
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	221f      	movs	r2, #31
 8000ca4:	601a      	str	r2, [r3, #0]
					break;
 8000ca6:	e246      	b.n	8001136 <updateDataGUI+0x60e>

					case pantallaSubMenuAlarmas:	//sub menu ALARMAS
						if(_indexes[cont_item_SubMenuAlarmas] == 0) *currentScreen = pantallaMainMenu_part1;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	3310      	adds	r3, #16
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d103      	bne.n	8000cba <updateDataGUI+0x192>
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	220b      	movs	r2, #11
 8000cb6:	601a      	str	r2, [r3, #0]
							//changeAlarms = true;
						}

						//if((_petFilConv -> soundAlarm_state == true)||(_petFilConv -> lightAlarm_state == true))	_petFilConv -> filDetector_state = true;
						//else _petFilConv -> filDetector_state = false;
					break;
 8000cb8:	e23f      	b.n	800113a <updateDataGUI+0x612>
						else if(_indexes[cont_item_SubMenuAlarmas] == 1)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	3310      	adds	r3, #16
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d10e      	bne.n	8000ce2 <updateDataGUI+0x1ba>
							if(_petFilConv -> lightAlarm_state == false)	_petFilConv -> lightAlarm_state = true;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	785b      	ldrb	r3, [r3, #1]
 8000cc8:	f083 0301 	eor.w	r3, r3, #1
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d003      	beq.n	8000cda <updateDataGUI+0x1b2>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	705a      	strb	r2, [r3, #1]
					break;
 8000cd8:	e22f      	b.n	800113a <updateDataGUI+0x612>
							else	_petFilConv -> lightAlarm_state = false;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	705a      	strb	r2, [r3, #1]
					break;
 8000ce0:	e22b      	b.n	800113a <updateDataGUI+0x612>
						else if(_indexes[cont_item_SubMenuAlarmas] == 2)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	3310      	adds	r3, #16
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	f040 8226 	bne.w	800113a <updateDataGUI+0x612>
							if(_petFilConv -> soundAlarm_state == false)	_petFilConv -> soundAlarm_state = true;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	f083 0301 	eor.w	r3, r3, #1
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d003      	beq.n	8000d04 <updateDataGUI+0x1dc>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
					break;
 8000d02:	e21a      	b.n	800113a <updateDataGUI+0x612>
							else	_petFilConv -> soundAlarm_state = false;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
					break;
 8000d0a:	e216      	b.n	800113a <updateDataGUI+0x612>

					case pantallaSubMenuHistorial:	//sub HISTORIAL
						if(_indexes[cont_item_SubMenuHistorial] == 0) *currentScreen = pantallaMainMenu_part2;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	3314      	adds	r3, #20
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8213 	bne.w	800113e <updateDataGUI+0x616>
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	601a      	str	r2, [r3, #0]
						else{} //borra el valor acumulador del extrusor
					break;
 8000d1e:	e20e      	b.n	800113e <updateDataGUI+0x616>

					case pantallaSubMenuSelVelocidadColFil:	//sub selector velocidad

						if(_indexes[cont_item_SubMenuSelVelCol] == 0)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	331c      	adds	r3, #28
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d10d      	bne.n	8000d46 <updateDataGUI+0x21e>
						{
							if(*_vel_col != APAGADO)
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d041      	beq.n	8000db6 <updateDataGUI+0x28e>
							{
								*_vel_col = APAGADO;
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
								_petFilConv -> col_state = false;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	709a      	strb	r2, [r3, #2]
								ControlMotor(_petFilConv);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f000 fd84 	bl	800184c <ControlMotor>
 8000d44:	e037      	b.n	8000db6 <updateDataGUI+0x28e>
							}
						}

						else if(_indexes[cont_item_SubMenuSelVelCol] == 1)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	331c      	adds	r3, #28
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d10d      	bne.n	8000d6c <updateDataGUI+0x244>
						{
							if(*_vel_col != VELOCIDAD_1)
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d02e      	beq.n	8000db6 <updateDataGUI+0x28e>
							{
								*_vel_col = VELOCIDAD_1;
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]
								_petFilConv -> col_state = true;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2201      	movs	r2, #1
 8000d62:	709a      	strb	r2, [r3, #2]
								ControlMotor(_petFilConv);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f000 fd71 	bl	800184c <ControlMotor>
 8000d6a:	e024      	b.n	8000db6 <updateDataGUI+0x28e>
							}
						}

						else if(_indexes[cont_item_SubMenuSelVelCol] == 2)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	331c      	adds	r3, #28
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d10d      	bne.n	8000d92 <updateDataGUI+0x26a>
						{
							if(*_vel_col != VELOCIDAD_2)
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d01b      	beq.n	8000db6 <updateDataGUI+0x28e>
							{
								*_vel_col = VELOCIDAD_2;
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	2202      	movs	r2, #2
 8000d82:	601a      	str	r2, [r3, #0]
								_petFilConv -> col_state = true;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2201      	movs	r2, #1
 8000d88:	709a      	strb	r2, [r3, #2]
								ControlMotor(_petFilConv);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 fd5e 	bl	800184c <ControlMotor>
 8000d90:	e011      	b.n	8000db6 <updateDataGUI+0x28e>
							}
						}
						else if(_indexes[cont_item_SubMenuSelVelCol] == 3)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	331c      	adds	r3, #28
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d10c      	bne.n	8000db6 <updateDataGUI+0x28e>
						{
							if(*_vel_col != VELOCIDAD_3)
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b03      	cmp	r3, #3
 8000da2:	d008      	beq.n	8000db6 <updateDataGUI+0x28e>
							{
								*_vel_col = VELOCIDAD_3;
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	2203      	movs	r2, #3
 8000da8:	601a      	str	r2, [r3, #0]
								_petFilConv -> col_state = true;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2201      	movs	r2, #1
 8000dae:	709a      	strb	r2, [r3, #2]
								ControlMotor(_petFilConv);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f000 fd4b 	bl	800184c <ControlMotor>
							}
						}

						*currentScreen = pantallaSubMenuColectoresFil;
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	2203      	movs	r2, #3
 8000dba:	601a      	str	r2, [r3, #0]
					break;
 8000dbc:	e1c4      	b.n	8001148 <updateDataGUI+0x620>

					case pantallaSubMenuAcercaDe_part1:	//sub menu ACERCA DE...
						*currentScreen = pantallaMainMenu_part2;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	220c      	movs	r2, #12
 8000dc2:	601a      	str	r2, [r3, #0]
					break;
 8000dc4:	e1c0      	b.n	8001148 <updateDataGUI+0x620>

					case pantallaSubMenuAcercaDe_part2:	//sub menu ACERCA DE...
						*currentScreen = pantallaMainMenu_part2;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	220c      	movs	r2, #12
 8000dca:	601a      	str	r2, [r3, #0]
					break;
 8000dcc:	e1bc      	b.n	8001148 <updateDataGUI+0x620>

					case pantallaSubmenuSetTempExt:	//menu seteo de temperatura COLECTORES
						_petFilConv -> setExtTemp = _petFilConv -> previousSetExtTemp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689a      	ldr	r2, [r3, #8]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	60da      	str	r2, [r3, #12]
						*currentScreen = pantallaSubMenuExtrusores;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	2202      	movs	r2, #2
 8000dda:	601a      	str	r2, [r3, #0]
					break;
 8000ddc:	e1b4      	b.n	8001148 <updateDataGUI+0x620>

					default: break;
				}
			}

			else if(*_btn == Left)
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	f040 80a6 	bne.w	8000f34 <updateDataGUI+0x40c>
			{
					switch(*currentScreen)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b1f      	cmp	r3, #31
 8000dee:	f200 8088 	bhi.w	8000f02 <updateDataGUI+0x3da>
 8000df2:	a201      	add	r2, pc, #4	; (adr r2, 8000df8 <updateDataGUI+0x2d0>)
 8000df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df8:	08001143 	.word	0x08001143
 8000dfc:	08000f03 	.word	0x08000f03
 8000e00:	08000f03 	.word	0x08000f03
 8000e04:	08000f03 	.word	0x08000f03
 8000e08:	08000f03 	.word	0x08000f03
 8000e0c:	08000f03 	.word	0x08000f03
 8000e10:	08000f03 	.word	0x08000f03
 8000e14:	08000edf 	.word	0x08000edf
 8000e18:	08000ee7 	.word	0x08000ee7
 8000e1c:	08000f03 	.word	0x08000f03
 8000e20:	08000f03 	.word	0x08000f03
 8000e24:	08000e79 	.word	0x08000e79
 8000e28:	08000e99 	.word	0x08000e99
 8000e2c:	08000f03 	.word	0x08000f03
 8000e30:	08000f03 	.word	0x08000f03
 8000e34:	08000f03 	.word	0x08000f03
 8000e38:	08000f03 	.word	0x08000f03
 8000e3c:	08000f03 	.word	0x08000f03
 8000e40:	08000f03 	.word	0x08000f03
 8000e44:	08000f03 	.word	0x08000f03
 8000e48:	08000f03 	.word	0x08000f03
 8000e4c:	08000f03 	.word	0x08000f03
 8000e50:	08000f03 	.word	0x08000f03
 8000e54:	08000f03 	.word	0x08000f03
 8000e58:	08000f03 	.word	0x08000f03
 8000e5c:	08000f03 	.word	0x08000f03
 8000e60:	08000f03 	.word	0x08000f03
 8000e64:	08000f03 	.word	0x08000f03
 8000e68:	08000f03 	.word	0x08000f03
 8000e6c:	08000f03 	.word	0x08000f03
 8000e70:	08000f03 	.word	0x08000f03
 8000e74:	08000ebf 	.word	0x08000ebf
						case pantallaWorkingScreen:	//pantalla de trabajo
							//NADA
						break;

						case pantallaMainMenu_part1:
							if(_indexes[cont_item_PrinMenu] == 0) _indexes[cont_item_PrinMenu] = 0;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d104      	bne.n	8000e8c <updateDataGUI+0x364>
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	3304      	adds	r3, #4
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
							else	_indexes[cont_item_PrinMenu]--;
						break;
 8000e8a:	e15d      	b.n	8001148 <updateDataGUI+0x620>
							else	_indexes[cont_item_PrinMenu]--;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	3304      	adds	r3, #4
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	3a01      	subs	r2, #1
 8000e94:	601a      	str	r2, [r3, #0]
						break;
 8000e96:	e157      	b.n	8001148 <updateDataGUI+0x620>

						case pantallaMainMenu_part2:
							if(_indexes[cont_item_PrinMenu] <= 4)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	3304      	adds	r3, #4
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	d807      	bhi.n	8000eb2 <updateDataGUI+0x38a>
							{
								*currentScreen = pantallaMainMenu_part1;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	220b      	movs	r2, #11
 8000ea6:	601a      	str	r2, [r3, #0]
								_indexes[cont_item_PrinMenu] = 3;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	3304      	adds	r3, #4
 8000eac:	2203      	movs	r2, #3
 8000eae:	601a      	str	r2, [r3, #0]
							}
							else	_indexes[cont_item_PrinMenu]--;
						break;
 8000eb0:	e14a      	b.n	8001148 <updateDataGUI+0x620>
							else	_indexes[cont_item_PrinMenu]--;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	3a01      	subs	r2, #1
 8000eba:	601a      	str	r2, [r3, #0]
						break;
 8000ebc:	e144      	b.n	8001148 <updateDataGUI+0x620>

						case pantallaSubMenuSelVelocidadColFil:
							if(_indexes[cont_item_SubMenuSelVelCol] == 0) _indexes[cont_item_SubMenuSelVelCol] = 0;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	331c      	adds	r3, #28
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d104      	bne.n	8000ed2 <updateDataGUI+0x3aa>
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	331c      	adds	r3, #28
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
							else	_indexes[cont_item_SubMenuSelVelCol]--;
						break;
 8000ed0:	e13a      	b.n	8001148 <updateDataGUI+0x620>
							else	_indexes[cont_item_SubMenuSelVelCol]--;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	331c      	adds	r3, #28
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	3a01      	subs	r2, #1
 8000eda:	601a      	str	r2, [r3, #0]
						break;
 8000edc:	e134      	b.n	8001148 <updateDataGUI+0x620>

						case pantallaSubMenuAcercaDe_part2:	*currentScreen = pantallaSubMenuAcercaDe_part1;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	2206      	movs	r2, #6
 8000ee2:	601a      	str	r2, [r3, #0]
						break;
 8000ee4:	e130      	b.n	8001148 <updateDataGUI+0x620>
						case pantallaSubmenuSetTempExt:


						//	if(_petFilConv -> setExtTemp == 0)	_petFilConv -> setExtTemp = 0;
						//	else _petFilConv -> setExtTemp--;
							if(_petFilConv -> previousSetExtTemp == 0) _petFilConv -> previousSetExtTemp = 0;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d103      	bne.n	8000ef6 <updateDataGUI+0x3ce>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
							else _petFilConv -> previousSetExtTemp--;
						break;
 8000ef4:	e128      	b.n	8001148 <updateDataGUI+0x620>
							else _petFilConv -> previousSetExtTemp--;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	1e5a      	subs	r2, r3, #1
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	609a      	str	r2, [r3, #8]
						break;
 8000f00:	e122      	b.n	8001148 <updateDataGUI+0x620>

						default:
							if(_indexes[*currentScreen] == 0) _indexes[*currentScreen] = 0;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	68fa      	ldr	r2, [r7, #12]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d107      	bne.n	8000f22 <updateDataGUI+0x3fa>
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]

						default: break;
					}
			}
	}
}
 8000f20:	e112      	b.n	8001148 <updateDataGUI+0x620>
							else _indexes[*currentScreen]--;
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	3a01      	subs	r2, #1
 8000f30:	601a      	str	r2, [r3, #0]
}
 8000f32:	e109      	b.n	8001148 <updateDataGUI+0x620>
			else if (*_btn == Right)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	f040 80f2 	bne.w	8001122 <updateDataGUI+0x5fa>
					switch(*currentScreen)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b1f      	cmp	r3, #31
 8000f44:	f200 80ff 	bhi.w	8001146 <updateDataGUI+0x61e>
 8000f48:	a201      	add	r2, pc, #4	; (adr r2, 8000f50 <updateDataGUI+0x428>)
 8000f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4e:	bf00      	nop
 8000f50:	08001147 	.word	0x08001147
 8000f54:	08001147 	.word	0x08001147
 8000f58:	08001017 	.word	0x08001017
 8000f5c:	08001049 	.word	0x08001049
 8000f60:	0800109b 	.word	0x0800109b
 8000f64:	080010cd 	.word	0x080010cd
 8000f68:	080010ff 	.word	0x080010ff
 8000f6c:	08001147 	.word	0x08001147
 8000f70:	08001107 	.word	0x08001107
 8000f74:	08001147 	.word	0x08001147
 8000f78:	08001147 	.word	0x08001147
 8000f7c:	08000fd1 	.word	0x08000fd1
 8000f80:	08000ff7 	.word	0x08000ff7
 8000f84:	08001147 	.word	0x08001147
 8000f88:	08001147 	.word	0x08001147
 8000f8c:	08001147 	.word	0x08001147
 8000f90:	08001147 	.word	0x08001147
 8000f94:	08001147 	.word	0x08001147
 8000f98:	08001147 	.word	0x08001147
 8000f9c:	08001147 	.word	0x08001147
 8000fa0:	08001147 	.word	0x08001147
 8000fa4:	08001147 	.word	0x08001147
 8000fa8:	08001147 	.word	0x08001147
 8000fac:	08001147 	.word	0x08001147
 8000fb0:	08001147 	.word	0x08001147
 8000fb4:	08001147 	.word	0x08001147
 8000fb8:	08001147 	.word	0x08001147
 8000fbc:	08001147 	.word	0x08001147
 8000fc0:	08001147 	.word	0x08001147
 8000fc4:	08001147 	.word	0x08001147
 8000fc8:	08001147 	.word	0x08001147
 8000fcc:	0800107b 	.word	0x0800107b
							if(_indexes[cont_item_PrinMenu] >= 3)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	3304      	adds	r3, #4
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d907      	bls.n	8000fea <updateDataGUI+0x4c2>
								*currentScreen = pantallaMainMenu_part2;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	220c      	movs	r2, #12
 8000fde:	601a      	str	r2, [r3, #0]
								_indexes[cont_item_PrinMenu] = 4;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	3304      	adds	r3, #4
 8000fe4:	2204      	movs	r2, #4
 8000fe6:	601a      	str	r2, [r3, #0]
						break;
 8000fe8:	e0ae      	b.n	8001148 <updateDataGUI+0x620>
							else	_indexes[cont_item_PrinMenu]++;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	3304      	adds	r3, #4
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	3201      	adds	r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]
						break;
 8000ff4:	e0a8      	b.n	8001148 <updateDataGUI+0x620>
							if(_indexes[cont_item_PrinMenu] >= 5) _indexes[cont_item_PrinMenu] = 5;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b04      	cmp	r3, #4
 8000ffe:	d904      	bls.n	800100a <updateDataGUI+0x4e2>
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	3304      	adds	r3, #4
 8001004:	2205      	movs	r2, #5
 8001006:	601a      	str	r2, [r3, #0]
						break;
 8001008:	e09e      	b.n	8001148 <updateDataGUI+0x620>
							else	_indexes[cont_item_PrinMenu]++;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	3304      	adds	r3, #4
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	3201      	adds	r2, #1
 8001012:	601a      	str	r2, [r3, #0]
						break;
 8001014:	e098      	b.n	8001148 <updateDataGUI+0x620>
							if(_indexes[*currentScreen] == (cantItemsSubMenuExtrusores - 1)) _indexes[*currentScreen] = cantItemsSubMenuExtrusores - 1;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d107      	bne.n	8001036 <updateDataGUI+0x50e>
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	4413      	add	r3, r2
 8001030:	2201      	movs	r2, #1
 8001032:	601a      	str	r2, [r3, #0]
						break;
 8001034:	e088      	b.n	8001148 <updateDataGUI+0x620>
							else _indexes[*currentScreen]++;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	3201      	adds	r2, #1
 8001044:	601a      	str	r2, [r3, #0]
						break;
 8001046:	e07f      	b.n	8001148 <updateDataGUI+0x620>
							if(_indexes[*currentScreen] == (cantItemsSubMenuColectores - 1)) _indexes[*currentScreen] = cantItemsSubMenuColectores - 1;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	4413      	add	r3, r2
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d107      	bne.n	8001068 <updateDataGUI+0x540>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	4413      	add	r3, r2
 8001062:	2201      	movs	r2, #1
 8001064:	601a      	str	r2, [r3, #0]
						break;
 8001066:	e06f      	b.n	8001148 <updateDataGUI+0x620>
							else _indexes[*currentScreen]++;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	3201      	adds	r2, #1
 8001076:	601a      	str	r2, [r3, #0]
						break;
 8001078:	e066      	b.n	8001148 <updateDataGUI+0x620>
							if(_indexes[cont_item_SubMenuSelVelCol] >= 3) _indexes[cont_item_PrinMenu] = 3;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	331c      	adds	r3, #28
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b02      	cmp	r3, #2
 8001082:	d904      	bls.n	800108e <updateDataGUI+0x566>
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3304      	adds	r3, #4
 8001088:	2203      	movs	r2, #3
 800108a:	601a      	str	r2, [r3, #0]
						break;
 800108c:	e05c      	b.n	8001148 <updateDataGUI+0x620>
							else	_indexes[cont_item_SubMenuSelVelCol]++;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	331c      	adds	r3, #28
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	3201      	adds	r2, #1
 8001096:	601a      	str	r2, [r3, #0]
						break;
 8001098:	e056      	b.n	8001148 <updateDataGUI+0x620>
							if(_indexes[*currentScreen] == (cantItemsSubMenuAlarmas - 1)) _indexes[*currentScreen] = cantItemsSubMenuAlarmas - 1;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d107      	bne.n	80010ba <updateDataGUI+0x592>
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	2202      	movs	r2, #2
 80010b6:	601a      	str	r2, [r3, #0]
						break;
 80010b8:	e046      	b.n	8001148 <updateDataGUI+0x620>
							else _indexes[*currentScreen]++;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	3201      	adds	r2, #1
 80010c8:	601a      	str	r2, [r3, #0]
						break;
 80010ca:	e03d      	b.n	8001148 <updateDataGUI+0x620>
							if(_indexes[*currentScreen] == (cantItemsSubMenuHistorial - 1)) _indexes[*currentScreen] = cantItemsSubMenuHistorial - 1;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	4413      	add	r3, r2
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d107      	bne.n	80010ec <updateDataGUI+0x5c4>
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	4413      	add	r3, r2
 80010e6:	2202      	movs	r2, #2
 80010e8:	601a      	str	r2, [r3, #0]
						break;
 80010ea:	e02d      	b.n	8001148 <updateDataGUI+0x620>
							else _indexes[*currentScreen]++;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4413      	add	r3, r2
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	3201      	adds	r2, #1
 80010fa:	601a      	str	r2, [r3, #0]
						break;
 80010fc:	e024      	b.n	8001148 <updateDataGUI+0x620>
						case pantallaSubMenuAcercaDe_part1: *currentScreen = pantallaSubMenuAcercaDe_part2;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	2207      	movs	r2, #7
 8001102:	601a      	str	r2, [r3, #0]
						break;
 8001104:	e020      	b.n	8001148 <updateDataGUI+0x620>
							if(_petFilConv -> previousSetExtTemp == 250) _petFilConv -> previousSetExtTemp = 250;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	2bfa      	cmp	r3, #250	; 0xfa
 800110c:	d103      	bne.n	8001116 <updateDataGUI+0x5ee>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	22fa      	movs	r2, #250	; 0xfa
 8001112:	609a      	str	r2, [r3, #8]
						break;
 8001114:	e018      	b.n	8001148 <updateDataGUI+0x620>
							else _petFilConv -> previousSetExtTemp++;	//Temp++
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	609a      	str	r2, [r3, #8]
						break;
 8001120:	e012      	b.n	8001148 <updateDataGUI+0x620>
			}
 8001122:	bf00      	nop
 8001124:	e010      	b.n	8001148 <updateDataGUI+0x620>
					default: break;
 8001126:	bf00      	nop
 8001128:	e00e      	b.n	8001148 <updateDataGUI+0x620>
					break;
 800112a:	bf00      	nop
 800112c:	e00c      	b.n	8001148 <updateDataGUI+0x620>
					break;
 800112e:	bf00      	nop
 8001130:	e00a      	b.n	8001148 <updateDataGUI+0x620>
					break;
 8001132:	bf00      	nop
 8001134:	e008      	b.n	8001148 <updateDataGUI+0x620>
					break;
 8001136:	bf00      	nop
 8001138:	e006      	b.n	8001148 <updateDataGUI+0x620>
					break;
 800113a:	bf00      	nop
 800113c:	e004      	b.n	8001148 <updateDataGUI+0x620>
					break;
 800113e:	bf00      	nop
 8001140:	e002      	b.n	8001148 <updateDataGUI+0x620>
						break;
 8001142:	bf00      	nop
 8001144:	e000      	b.n	8001148 <updateDataGUI+0x620>
						default: break;
 8001146:	bf00      	nop
}
 8001148:	bf00      	nop
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <updateLCD>:
	}
}
*/

void updateLCD(PETfilConv *_petFilConv , uint32_t *currentScreen)
{
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	b0a7      	sub	sp, #156	; 0x9c
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
	static uint32_t previousScreen;

	char *prinMenu1[] = {
 800115a:	4b6d      	ldr	r3, [pc, #436]	; (8001310 <updateLCD+0x1c0>)
 800115c:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8001160:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001162:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    "Extrusores         ",
	    "Colectores fil.    ",
	    "Alarmas            "
	};

	char *prinMenu2[] = {
 8001166:	4b6b      	ldr	r3, [pc, #428]	; (8001314 <updateLCD+0x1c4>)
 8001168:	f107 0478 	add.w	r4, r7, #120	; 0x78
 800116c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800116e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    "Acerca de...       ",
	    "                   ",
		"                   "
	};

	char *subMenuExtrusores[] = {
 8001172:	4b69      	ldr	r3, [pc, #420]	; (8001318 <updateLCD+0x1c8>)
 8001174:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8001178:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800117a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    "Extrusor 1         ",
		"                   ",
		"                   "
	};

	char *subMenuColectores[] = {
 800117e:	4b67      	ldr	r3, [pc, #412]	; (800131c <updateLCD+0x1cc>)
 8001180:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001184:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001186:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    "Colector fil 1     ",
		"                   ",
		"                   "
	};

	char *subMenuAlarmas[] = {
 800118a:	4b65      	ldr	r3, [pc, #404]	; (8001320 <updateLCD+0x1d0>)
 800118c:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001190:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001192:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    "Luminica           ",
	    "Sonora             ",
		"                   "
	};

	char *subMenuHistorial[] = {
 8001196:	4b63      	ldr	r3, [pc, #396]	; (8001324 <updateLCD+0x1d4>)
 8001198:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800119c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800119e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    "Extrusor 1         ",
	    "Borrar historial   ",
		"                   "
	};

	char *subMenuAcercaDe1[] = {
 80011a2:	4b61      	ldr	r3, [pc, #388]	; (8001328 <updateLCD+0x1d8>)
 80011a4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80011a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    "       Esp. en      ",
	    " Sistemas Embebidos ",
		"    LSE - FiUBA     "
	};

	char *subMenuAcercaDe2[] = {
 80011ae:	4b5f      	ldr	r3, [pc, #380]	; (800132c <updateLCD+0x1dc>)
 80011b0:	f107 0418 	add.w	r4, r7, #24
 80011b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    "    Vargas Alice    ",
		"                    ",
		"        2022        "
	};

	char *subMenuSelVelocidadColec[] = {
 80011ba:	4b5d      	ldr	r3, [pc, #372]	; (8001330 <updateLCD+0x1e0>)
 80011bc:	f107 0408 	add.w	r4, r7, #8
 80011c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    "300 mm/min         ",
		"400 mm/min         ",
		"500 mm/min         "
	};

	if(*currentScreen != previousScreen) //si la pantalla actual es distinto a la anterior o si la pantalla actual es la de seteo de temp de extrusor
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4b5a      	ldr	r3, [pc, #360]	; (8001334 <updateLCD+0x1e4>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	f000 808a 	beq.w	80012e8 <updateLCD+0x198>
	{
		previousScreen = *currentScreen;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a56      	ldr	r2, [pc, #344]	; (8001334 <updateLCD+0x1e4>)
 80011da:	6013      	str	r3, [r2, #0]

		switch(*currentScreen)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b1f      	cmp	r3, #31
 80011e2:	f200 8083 	bhi.w	80012ec <updateLCD+0x19c>
 80011e6:	a201      	add	r2, pc, #4	; (adr r2, 80011ec <updateLCD+0x9c>)
 80011e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ec:	0800126d 	.word	0x0800126d
 80011f0:	080012ed 	.word	0x080012ed
 80011f4:	0800128d 	.word	0x0800128d
 80011f8:	08001299 	.word	0x08001299
 80011fc:	080012a5 	.word	0x080012a5
 8001200:	080012b1 	.word	0x080012b1
 8001204:	080012bd 	.word	0x080012bd
 8001208:	080012c9 	.word	0x080012c9
 800120c:	080012d5 	.word	0x080012d5
 8001210:	080012ed 	.word	0x080012ed
 8001214:	080012ed 	.word	0x080012ed
 8001218:	08001275 	.word	0x08001275
 800121c:	08001281 	.word	0x08001281
 8001220:	080012ed 	.word	0x080012ed
 8001224:	080012ed 	.word	0x080012ed
 8001228:	080012ed 	.word	0x080012ed
 800122c:	080012ed 	.word	0x080012ed
 8001230:	080012ed 	.word	0x080012ed
 8001234:	080012ed 	.word	0x080012ed
 8001238:	080012ed 	.word	0x080012ed
 800123c:	080012ed 	.word	0x080012ed
 8001240:	080012ed 	.word	0x080012ed
 8001244:	080012ed 	.word	0x080012ed
 8001248:	080012ed 	.word	0x080012ed
 800124c:	080012ed 	.word	0x080012ed
 8001250:	080012ed 	.word	0x080012ed
 8001254:	080012ed 	.word	0x080012ed
 8001258:	080012ed 	.word	0x080012ed
 800125c:	080012ed 	.word	0x080012ed
 8001260:	080012ed 	.word	0x080012ed
 8001264:	080012ed 	.word	0x080012ed
 8001268:	080012dd 	.word	0x080012dd
		{
			case pantallaWorkingScreen: printscreenWorking(_petFilConv);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 f8bf 	bl	80013f0 <printscreenWorking>
			break;
 8001272:	e03c      	b.n	80012ee <updateLCD+0x19e>

			case pantallaMainMenu_part1: printScreen(prinMenu1);
 8001274:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001278:	4618      	mov	r0, r3
 800127a:	f000 faad 	bl	80017d8 <printScreen>
			break;
 800127e:	e036      	b.n	80012ee <updateLCD+0x19e>

			case pantallaMainMenu_part2: printScreen(prinMenu2);
 8001280:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001284:	4618      	mov	r0, r3
 8001286:	f000 faa7 	bl	80017d8 <printScreen>
			break;
 800128a:	e030      	b.n	80012ee <updateLCD+0x19e>

			case pantallaSubMenuExtrusores: printScreen(subMenuExtrusores);
 800128c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001290:	4618      	mov	r0, r3
 8001292:	f000 faa1 	bl	80017d8 <printScreen>
			break;
 8001296:	e02a      	b.n	80012ee <updateLCD+0x19e>

			case pantallaSubMenuColectoresFil: printScreen(subMenuColectores);
 8001298:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800129c:	4618      	mov	r0, r3
 800129e:	f000 fa9b 	bl	80017d8 <printScreen>
			break;
 80012a2:	e024      	b.n	80012ee <updateLCD+0x19e>

			case pantallaSubMenuAlarmas: printScreen(subMenuAlarmas);
 80012a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 fa95 	bl	80017d8 <printScreen>
			break;
 80012ae:	e01e      	b.n	80012ee <updateLCD+0x19e>

			case pantallaSubMenuHistorial: printScreen(subMenuHistorial);
 80012b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 fa8f 	bl	80017d8 <printScreen>
			break;
 80012ba:	e018      	b.n	80012ee <updateLCD+0x19e>

			case pantallaSubMenuAcercaDe_part1: printScreen(subMenuAcercaDe1);
 80012bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 fa89 	bl	80017d8 <printScreen>
			break;
 80012c6:	e012      	b.n	80012ee <updateLCD+0x19e>

			case pantallaSubMenuAcercaDe_part2: printScreen(subMenuAcercaDe2);
 80012c8:	f107 0318 	add.w	r3, r7, #24
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 fa83 	bl	80017d8 <printScreen>
			break;
 80012d2:	e00c      	b.n	80012ee <updateLCD+0x19e>

			case pantallaSubmenuSetTempExt: printScreenSettingTemp(_petFilConv);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 f82f 	bl	8001338 <printScreenSettingTemp>
			break;
 80012da:	e008      	b.n	80012ee <updateLCD+0x19e>

			case pantallaSubMenuSelVelocidadColFil: printScreen(subMenuSelVelocidadColec);
 80012dc:	f107 0308 	add.w	r3, r7, #8
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 fa79 	bl	80017d8 <printScreen>
			break;
 80012e6:	e002      	b.n	80012ee <updateLCD+0x19e>

			default: break;
		}
	}
 80012e8:	bf00      	nop
 80012ea:	e000      	b.n	80012ee <updateLCD+0x19e>
			default: break;
 80012ec:	bf00      	nop

	if((_petFilConv -> previousSetExtTemp != _petFilConv -> setExtTemp) && (*currentScreen == pantallaSubmenuSetTempExt))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d006      	beq.n	8001308 <updateLCD+0x1b8>
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b08      	cmp	r3, #8
 8001300:	d102      	bne.n	8001308 <updateLCD+0x1b8>
	{
		printSettingTemp(_petFilConv);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f850 	bl	80013a8 <printSettingTemp>
	}
}
 8001308:	bf00      	nop
 800130a:	379c      	adds	r7, #156	; 0x9c
 800130c:	46bd      	mov	sp, r7
 800130e:	bd90      	pop	{r4, r7, pc}
 8001310:	0800505c 	.word	0x0800505c
 8001314:	0800506c 	.word	0x0800506c
 8001318:	0800507c 	.word	0x0800507c
 800131c:	0800508c 	.word	0x0800508c
 8001320:	0800509c 	.word	0x0800509c
 8001324:	080050ac 	.word	0x080050ac
 8001328:	080050bc 	.word	0x080050bc
 800132c:	080050cc 	.word	0x080050cc
 8001330:	080050dc 	.word	0x080050dc
 8001334:	200000f8 	.word	0x200000f8

08001338 <printScreenSettingTemp>:
}

*/

void printScreenSettingTemp(PETfilConv *_petFilConv)
{
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b091      	sub	sp, #68	; 0x44
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	int reg_lines[LINES] = {
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <printScreenSettingTemp+0x64>)
 8001342:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001346:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001348:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					0x80|0x40,
					0x80|0x14,
					0x80|0x54
				};

	char *subMenuSelTemp[] = {
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <printScreenSettingTemp+0x68>)
 800134e:	f107 0420 	add.w	r4, r7, #32
 8001352:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001354:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		"                    "
	};

	char aux[20];

	clearScreen();
 8001358:	f000 fa6e 	bl	8001838 <clearScreen>
	lcd_send_cmd(reg_lines[0]);
 800135c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800135e:	b2db      	uxtb	r3, r3
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f801 	bl	8000368 <lcd_send_cmd>
	lcd_send_string(subMenuSelTemp[0]);
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f897 	bl	800049c <lcd_send_string>
	lcd_send_cmd(reg_lines[2]);
 800136e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f7fe fff8 	bl	8000368 <lcd_send_cmd>
	sprintf(aux,"%lu C / 250 C(Max.)",_petFilConv -> previousSetExtTemp);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	4908      	ldr	r1, [pc, #32]	; (80013a4 <printScreenSettingTemp+0x6c>)
 8001382:	4618      	mov	r0, r3
 8001384:	f003 f8d6 	bl	8004534 <siprintf>
	lcd_send_string(aux);
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f885 	bl	800049c <lcd_send_string>
}
 8001392:	bf00      	nop
 8001394:	3744      	adds	r7, #68	; 0x44
 8001396:	46bd      	mov	sp, r7
 8001398:	bd90      	pop	{r4, r7, pc}
 800139a:	bf00      	nop
 800139c:	08005100 	.word	0x08005100
 80013a0:	08005110 	.word	0x08005110
 80013a4:	080050ec 	.word	0x080050ec

080013a8 <printSettingTemp>:

void printSettingTemp(PETfilConv *_petFilConv)
{
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b089      	sub	sp, #36	; 0x24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	char aux[3];
	int reg_lines[LINES] = {
 80013b0:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <printSettingTemp+0x40>)
 80013b2:	f107 040c 	add.w	r4, r7, #12
 80013b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					0x80|0x40,
					0x80|0x14,
					0x80|0x54
				};

	lcd_send_cmd(reg_lines[2]);
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7fe ffd1 	bl	8000368 <lcd_send_cmd>
	sprintf(aux,"%lu C",_petFilConv -> previousSetExtTemp);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	4907      	ldr	r1, [pc, #28]	; (80013ec <printSettingTemp+0x44>)
 80013d0:	4618      	mov	r0, r3
 80013d2:	f003 f8af 	bl	8004534 <siprintf>
	lcd_send_string(aux);
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f85e 	bl	800049c <lcd_send_string>
}
 80013e0:	bf00      	nop
 80013e2:	3724      	adds	r7, #36	; 0x24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd90      	pop	{r4, r7, pc}
 80013e8:	08005100 	.word	0x08005100
 80013ec:	08005120 	.word	0x08005120

080013f0 <printscreenWorking>:

void printscreenWorking(PETfilConv *_petFilConv)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b091      	sub	sp, #68	; 0x44
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	int reg_lines[LINES] = {
 80013f8:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <printscreenWorking+0x88>)
 80013fa:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80013fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001400:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					0x80|0x00,
					0x80|0x40,
					0x80|0x14,
					0x80|0x54
				};
	int dir_Al = 0x80|0x20;
 8001404:	23a0      	movs	r3, #160	; 0xa0
 8001406:	63fb      	str	r3, [r7, #60]	; 0x3c
	lcd_send_cmd(reg_lines[2]);
	sprintf(aux," %lu C  / %lu C   ",_petFilConv -> currentExtTemp ,_petFilConv -> setExtTemp);
	lcd_send_string(aux);
*/
	char aux[20];
	char aux2[5] = "COL1:";
 8001408:	4a1c      	ldr	r2, [pc, #112]	; (800147c <printscreenWorking+0x8c>)
 800140a:	f107 0310 	add.w	r3, r7, #16
 800140e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001412:	6018      	str	r0, [r3, #0]
 8001414:	3304      	adds	r3, #4
 8001416:	7019      	strb	r1, [r3, #0]
	char aux3[4] = "AL:";
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <printscreenWorking+0x90>)
 800141a:	60fb      	str	r3, [r7, #12]

	clearScreen();
 800141c:	f000 fa0c 	bl	8001838 <clearScreen>
	lcd_send_cmd(reg_lines[0]);
 8001420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001422:	b2db      	uxtb	r3, r3
 8001424:	4618      	mov	r0, r3
 8001426:	f7fe ff9f 	bl	8000368 <lcd_send_cmd>
	sprintf(aux,"EXT1: %lu / %lu C  ",_petFilConv -> currentExtTemp ,_petFilConv -> setExtTemp);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	f107 0018 	add.w	r0, r7, #24
 8001436:	4913      	ldr	r1, [pc, #76]	; (8001484 <printscreenWorking+0x94>)
 8001438:	f003 f87c 	bl	8004534 <siprintf>
	lcd_send_string(aux);
 800143c:	f107 0318 	add.w	r3, r7, #24
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f82b 	bl	800049c <lcd_send_string>
	lcd_send_cmd(reg_lines[2]);
 8001446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001448:	b2db      	uxtb	r3, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f7fe ff8c 	bl	8000368 <lcd_send_cmd>
	lcd_send_string(aux2);
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f821 	bl	800049c <lcd_send_string>
	lcd_send_cmd(dir_Al);
 800145a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800145c:	b2db      	uxtb	r3, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f7fe ff82 	bl	8000368 <lcd_send_cmd>
	lcd_send_string(aux3);
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f817 	bl	800049c <lcd_send_string>
}
 800146e:	bf00      	nop
 8001470:	3744      	adds	r7, #68	; 0x44
 8001472:	46bd      	mov	sp, r7
 8001474:	bd90      	pop	{r4, r7, pc}
 8001476:	bf00      	nop
 8001478:	08005100 	.word	0x08005100
 800147c:	0800513c 	.word	0x0800513c
 8001480:	003a4c41 	.word	0x003a4c41
 8001484:	08005128 	.word	0x08005128

08001488 <printCurrentTemp>:

void printCurrentTemp(PETfilConv *_petFilConv)
{
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	b08d      	sub	sp, #52	; 0x34
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]


	int reg_lines[LINES] = {
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <printCurrentTemp+0x44>)
 8001492:	f107 0420 	add.w	r4, r7, #32
 8001496:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001498:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	lcd_send_cmd(reg_lines[2]);
	sprintf(aux," %lu C  / %lu C   ",_petFilConv -> currentExtTemp ,_petFilConv -> setExtTemp);
	lcd_send_string(aux);
*/
	char aux[20];
	lcd_send_cmd(reg_lines[0]);
 800149c:	6a3b      	ldr	r3, [r7, #32]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7fe ff61 	bl	8000368 <lcd_send_cmd>
	sprintf(aux,"EXT1: %lu / %lu C  ",_petFilConv -> currentExtTemp ,_petFilConv -> setExtTemp);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	f107 000c 	add.w	r0, r7, #12
 80014b2:	4907      	ldr	r1, [pc, #28]	; (80014d0 <printCurrentTemp+0x48>)
 80014b4:	f003 f83e 	bl	8004534 <siprintf>
	lcd_send_string(aux);
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe ffed 	bl	800049c <lcd_send_string>
}
 80014c2:	bf00      	nop
 80014c4:	3734      	adds	r7, #52	; 0x34
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd90      	pop	{r4, r7, pc}
 80014ca:	bf00      	nop
 80014cc:	08005100 	.word	0x08005100
 80014d0:	08005128 	.word	0x08005128

080014d4 <updateCursor>:

void updateCursor(uint32_t *_indexes , PETfilConv *_petFilConv , uint32_t *currentScreen , uint32_t *_vel_col)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	603b      	str	r3, [r7, #0]
	  clearAllCursor();
 80014e2:	f000 f951 	bl	8001788 <clearAllCursor>

	switch(*currentScreen)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	3b02      	subs	r3, #2
 80014ec:	2b1d      	cmp	r3, #29
 80014ee:	f200 80b8 	bhi.w	8001662 <updateCursor+0x18e>
 80014f2:	a201      	add	r2, pc, #4	; (adr r2, 80014f8 <updateCursor+0x24>)
 80014f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f8:	08001591 	.word	0x08001591
 80014fc:	080015a1 	.word	0x080015a1
 8001500:	080015b1 	.word	0x080015b1
 8001504:	08001605 	.word	0x08001605
 8001508:	08001663 	.word	0x08001663
 800150c:	08001663 	.word	0x08001663
 8001510:	08001663 	.word	0x08001663
 8001514:	08001663 	.word	0x08001663
 8001518:	08001663 	.word	0x08001663
 800151c:	08001571 	.word	0x08001571
 8001520:	08001581 	.word	0x08001581
 8001524:	08001663 	.word	0x08001663
 8001528:	08001663 	.word	0x08001663
 800152c:	08001663 	.word	0x08001663
 8001530:	08001663 	.word	0x08001663
 8001534:	08001663 	.word	0x08001663
 8001538:	08001663 	.word	0x08001663
 800153c:	08001663 	.word	0x08001663
 8001540:	08001663 	.word	0x08001663
 8001544:	08001663 	.word	0x08001663
 8001548:	08001663 	.word	0x08001663
 800154c:	08001663 	.word	0x08001663
 8001550:	08001663 	.word	0x08001663
 8001554:	08001663 	.word	0x08001663
 8001558:	08001663 	.word	0x08001663
 800155c:	08001663 	.word	0x08001663
 8001560:	08001663 	.word	0x08001663
 8001564:	08001663 	.word	0x08001663
 8001568:	08001663 	.word	0x08001663
 800156c:	08001615 	.word	0x08001615
	{
		case pantallaMainMenu_part1: printCursor(_indexes[cont_item_PrinMenu]);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	3304      	adds	r3, #4
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	4618      	mov	r0, r3
 800157a:	f000 f8c1 	bl	8001700 <printCursor>
		break;
 800157e:	e073      	b.n	8001668 <updateCursor+0x194>

		case pantallaMainMenu_part2: printCursor(_indexes[cont_item_PrinMenu]);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3304      	adds	r3, #4
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	b2db      	uxtb	r3, r3
 8001588:	4618      	mov	r0, r3
 800158a:	f000 f8b9 	bl	8001700 <printCursor>
		break;
 800158e:	e06b      	b.n	8001668 <updateCursor+0x194>

		case pantallaSubMenuExtrusores: printCursor(_indexes[cont_item_SubMenuExtrusores]);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	3308      	adds	r3, #8
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	4618      	mov	r0, r3
 800159a:	f000 f8b1 	bl	8001700 <printCursor>
		break;
 800159e:	e063      	b.n	8001668 <updateCursor+0x194>

		case pantallaSubMenuColectoresFil:	printCursor(_indexes[cont_item_SubMenuColectores]);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	330c      	adds	r3, #12
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 f8a9 	bl	8001700 <printCursor>
		break;
 80015ae:	e05b      	b.n	8001668 <updateCursor+0x194>

		case pantallaSubMenuAlarmas:
			printCursor(_indexes[cont_item_SubMenuAlarmas]);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	3310      	adds	r3, #16
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 f8a1 	bl	8001700 <printCursor>
			if(_petFilConv -> lightAlarm_state == true)
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	785b      	ldrb	r3, [r3, #1]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d006      	beq.n	80015d4 <updateCursor+0x100>
			{
				lcd_send_cmd(XC_LINE2_LCD);
 80015c6:	20d1      	movs	r0, #209	; 0xd1
 80015c8:	f7fe fece 	bl	8000368 <lcd_send_cmd>
				lcd_send_string("X");
 80015cc:	4828      	ldr	r0, [pc, #160]	; (8001670 <updateCursor+0x19c>)
 80015ce:	f7fe ff65 	bl	800049c <lcd_send_string>
 80015d2:	e005      	b.n	80015e0 <updateCursor+0x10c>
			}
			else
			{
				lcd_send_cmd(XC_LINE2_LCD);
 80015d4:	20d1      	movs	r0, #209	; 0xd1
 80015d6:	f7fe fec7 	bl	8000368 <lcd_send_cmd>
				lcd_send_string(" ");
 80015da:	4826      	ldr	r0, [pc, #152]	; (8001674 <updateCursor+0x1a0>)
 80015dc:	f7fe ff5e 	bl	800049c <lcd_send_string>
			}

			if(_petFilConv -> soundAlarm_state == true)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d006      	beq.n	80015f6 <updateCursor+0x122>
			{
				lcd_send_cmd(XC_LINE3_LCD);
 80015e8:	20a5      	movs	r0, #165	; 0xa5
 80015ea:	f7fe febd 	bl	8000368 <lcd_send_cmd>
				lcd_send_string("X");
 80015ee:	4820      	ldr	r0, [pc, #128]	; (8001670 <updateCursor+0x19c>)
 80015f0:	f7fe ff54 	bl	800049c <lcd_send_string>
			else
			{
				lcd_send_cmd(XC_LINE3_LCD);
				lcd_send_string(" ");
			}
		break;
 80015f4:	e038      	b.n	8001668 <updateCursor+0x194>
				lcd_send_cmd(XC_LINE3_LCD);
 80015f6:	20a5      	movs	r0, #165	; 0xa5
 80015f8:	f7fe feb6 	bl	8000368 <lcd_send_cmd>
				lcd_send_string(" ");
 80015fc:	481d      	ldr	r0, [pc, #116]	; (8001674 <updateCursor+0x1a0>)
 80015fe:	f7fe ff4d 	bl	800049c <lcd_send_string>
		break;
 8001602:	e031      	b.n	8001668 <updateCursor+0x194>

		case pantallaSubMenuHistorial: printCursor(_indexes[cont_item_SubMenuHistorial]);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	3314      	adds	r3, #20
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	4618      	mov	r0, r3
 800160e:	f000 f877 	bl	8001700 <printCursor>
		break;
 8001612:	e029      	b.n	8001668 <updateCursor+0x194>

		case pantallaSubMenuSelVelocidadColFil:
			printCursor(_indexes[cont_item_SubMenuSelVelCol]);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	331c      	adds	r3, #28
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	4618      	mov	r0, r3
 800161e:	f000 f86f 	bl	8001700 <printCursor>
			if(*_vel_col == APAGADO)	printX(1);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d103      	bne.n	8001632 <updateCursor+0x15e>
 800162a:	2001      	movs	r0, #1
 800162c:	f000 f824 	bl	8001678 <printX>
			else if(*_vel_col == VELOCIDAD_1)	printX(2);
			else if(*_vel_col == VELOCIDAD_2)	printX(3);
			else if(*_vel_col == VELOCIDAD_3)	printX(4);
		break;
 8001630:	e019      	b.n	8001666 <updateCursor+0x192>
			else if(*_vel_col == VELOCIDAD_1)	printX(2);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d103      	bne.n	8001642 <updateCursor+0x16e>
 800163a:	2002      	movs	r0, #2
 800163c:	f000 f81c 	bl	8001678 <printX>
		break;
 8001640:	e011      	b.n	8001666 <updateCursor+0x192>
			else if(*_vel_col == VELOCIDAD_2)	printX(3);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d103      	bne.n	8001652 <updateCursor+0x17e>
 800164a:	2003      	movs	r0, #3
 800164c:	f000 f814 	bl	8001678 <printX>
		break;
 8001650:	e009      	b.n	8001666 <updateCursor+0x192>
			else if(*_vel_col == VELOCIDAD_3)	printX(4);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b03      	cmp	r3, #3
 8001658:	d105      	bne.n	8001666 <updateCursor+0x192>
 800165a:	2004      	movs	r0, #4
 800165c:	f000 f80c 	bl	8001678 <printX>
		break;
 8001660:	e001      	b.n	8001666 <updateCursor+0x192>

		default: break;
 8001662:	bf00      	nop
 8001664:	e000      	b.n	8001668 <updateCursor+0x194>
		break;
 8001666:	bf00      	nop
	}
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	08005144 	.word	0x08005144
 8001674:	08005148 	.word	0x08005148

08001678 <printX>:
  }
}
*/

void printX(uint8_t i)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
	lcd_send_cmd(XC_LINE1_LCD);
 8001682:	2091      	movs	r0, #145	; 0x91
 8001684:	f7fe fe70 	bl	8000368 <lcd_send_cmd>
	lcd_send_string(" ");
 8001688:	481b      	ldr	r0, [pc, #108]	; (80016f8 <printX+0x80>)
 800168a:	f7fe ff07 	bl	800049c <lcd_send_string>
	lcd_send_cmd(XC_LINE2_LCD);
 800168e:	20d1      	movs	r0, #209	; 0xd1
 8001690:	f7fe fe6a 	bl	8000368 <lcd_send_cmd>
	lcd_send_string(" ");
 8001694:	4818      	ldr	r0, [pc, #96]	; (80016f8 <printX+0x80>)
 8001696:	f7fe ff01 	bl	800049c <lcd_send_string>
	lcd_send_cmd(XC_LINE3_LCD);
 800169a:	20a5      	movs	r0, #165	; 0xa5
 800169c:	f7fe fe64 	bl	8000368 <lcd_send_cmd>
	lcd_send_string(" ");
 80016a0:	4815      	ldr	r0, [pc, #84]	; (80016f8 <printX+0x80>)
 80016a2:	f7fe fefb 	bl	800049c <lcd_send_string>
	lcd_send_cmd(XC_LINE4_LCD);
 80016a6:	20e5      	movs	r0, #229	; 0xe5
 80016a8:	f7fe fe5e 	bl	8000368 <lcd_send_cmd>
	lcd_send_string(" ");
 80016ac:	4812      	ldr	r0, [pc, #72]	; (80016f8 <printX+0x80>)
 80016ae:	f7fe fef5 	bl	800049c <lcd_send_string>

	if(i == 1)	lcd_send_cmd(XC_LINE1_LCD);
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d103      	bne.n	80016c0 <printX+0x48>
 80016b8:	2091      	movs	r0, #145	; 0x91
 80016ba:	f7fe fe55 	bl	8000368 <lcd_send_cmd>
 80016be:	e013      	b.n	80016e8 <printX+0x70>
	else if(i == 2)	lcd_send_cmd(XC_LINE2_LCD);
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d103      	bne.n	80016ce <printX+0x56>
 80016c6:	20d1      	movs	r0, #209	; 0xd1
 80016c8:	f7fe fe4e 	bl	8000368 <lcd_send_cmd>
 80016cc:	e00c      	b.n	80016e8 <printX+0x70>
	else if(i == 3)	lcd_send_cmd(XC_LINE3_LCD);
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	d103      	bne.n	80016dc <printX+0x64>
 80016d4:	20a5      	movs	r0, #165	; 0xa5
 80016d6:	f7fe fe47 	bl	8000368 <lcd_send_cmd>
 80016da:	e005      	b.n	80016e8 <printX+0x70>
	else if(i == 4)	lcd_send_cmd(XC_LINE4_LCD);
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d102      	bne.n	80016e8 <printX+0x70>
 80016e2:	20e5      	movs	r0, #229	; 0xe5
 80016e4:	f7fe fe40 	bl	8000368 <lcd_send_cmd>
	lcd_send_string("X");
 80016e8:	4804      	ldr	r0, [pc, #16]	; (80016fc <printX+0x84>)
 80016ea:	f7fe fed7 	bl	800049c <lcd_send_string>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	08005148 	.word	0x08005148
 80016fc:	08005144 	.word	0x08005144

08001700 <printCursor>:

void printCursor(uint8_t index)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
	char *cursor[] = {">"};
 800170a:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <printCursor+0x84>)
 800170c:	60fb      	str	r3, [r7, #12]

	switch(index)
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	2b06      	cmp	r3, #6
 8001712:	d82d      	bhi.n	8001770 <printCursor+0x70>
 8001714:	a201      	add	r2, pc, #4	; (adr r2, 800171c <printCursor+0x1c>)
 8001716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171a:	bf00      	nop
 800171c:	08001739 	.word	0x08001739
 8001720:	08001741 	.word	0x08001741
 8001724:	08001749 	.word	0x08001749
 8001728:	08001751 	.word	0x08001751
 800172c:	08001759 	.word	0x08001759
 8001730:	08001761 	.word	0x08001761
 8001734:	08001769 	.word	0x08001769
	{
		case 0:	lcd_send_cmd(C_LINE1_LCD);	//primera linea
 8001738:	2093      	movs	r0, #147	; 0x93
 800173a:	f7fe fe15 	bl	8000368 <lcd_send_cmd>
		break;
 800173e:	e018      	b.n	8001772 <printCursor+0x72>

		case 1:	lcd_send_cmd(C_LINE2_LCD);	//segunda linea
 8001740:	20d3      	movs	r0, #211	; 0xd3
 8001742:	f7fe fe11 	bl	8000368 <lcd_send_cmd>
		break;
 8001746:	e014      	b.n	8001772 <printCursor+0x72>

		case 2:	lcd_send_cmd(C_LINE3_LCD);	//tercera linea
 8001748:	20a7      	movs	r0, #167	; 0xa7
 800174a:	f7fe fe0d 	bl	8000368 <lcd_send_cmd>
		break;
 800174e:	e010      	b.n	8001772 <printCursor+0x72>

		case 3:	lcd_send_cmd(C_LINE4_LCD);	//cuarta linea
 8001750:	20e7      	movs	r0, #231	; 0xe7
 8001752:	f7fe fe09 	bl	8000368 <lcd_send_cmd>
		break;
 8001756:	e00c      	b.n	8001772 <printCursor+0x72>

		case 4:	lcd_send_cmd(C_LINE1_LCD);	//primer linea
 8001758:	2093      	movs	r0, #147	; 0x93
 800175a:	f7fe fe05 	bl	8000368 <lcd_send_cmd>
			break;
 800175e:	e008      	b.n	8001772 <printCursor+0x72>

		case 5:	lcd_send_cmd(C_LINE2_LCD);	//segunda linea
 8001760:	20d3      	movs	r0, #211	; 0xd3
 8001762:	f7fe fe01 	bl	8000368 <lcd_send_cmd>
			break;
 8001766:	e004      	b.n	8001772 <printCursor+0x72>

		case 6:	lcd_send_cmd(C_LINE3_LCD);	//tercera linea
 8001768:	20a7      	movs	r0, #167	; 0xa7
 800176a:	f7fe fdfd 	bl	8000368 <lcd_send_cmd>
			break;
 800176e:	e000      	b.n	8001772 <printCursor+0x72>

		default: break;
 8001770:	bf00      	nop
	}

	lcd_send_string(cursor[0]);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fe91 	bl	800049c <lcd_send_string>
}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	0800514c 	.word	0x0800514c

08001788 <clearAllCursor>:

void clearAllCursor(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
	char *char_vacio[] = {" "};
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <clearAllCursor+0x4c>)
 8001790:	607b      	str	r3, [r7, #4]

	lcd_send_cmd(C_LINE1_LCD);	//primer linea
 8001792:	2093      	movs	r0, #147	; 0x93
 8001794:	f7fe fde8 	bl	8000368 <lcd_send_cmd>
	lcd_send_string(char_vacio[0]);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fe7e 	bl	800049c <lcd_send_string>
	lcd_send_cmd(C_LINE2_LCD);	//segunda linea
 80017a0:	20d3      	movs	r0, #211	; 0xd3
 80017a2:	f7fe fde1 	bl	8000368 <lcd_send_cmd>
	lcd_send_string(char_vacio[0]);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fe77 	bl	800049c <lcd_send_string>
	lcd_send_cmd(C_LINE3_LCD);	//tercera linea
 80017ae:	20a7      	movs	r0, #167	; 0xa7
 80017b0:	f7fe fdda 	bl	8000368 <lcd_send_cmd>
	lcd_send_string(char_vacio[0]);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fe70 	bl	800049c <lcd_send_string>
	lcd_send_cmd(C_LINE4_LCD);	//cuarta linea
 80017bc:	20e7      	movs	r0, #231	; 0xe7
 80017be:	f7fe fdd3 	bl	8000368 <lcd_send_cmd>
	lcd_send_string(char_vacio[0]);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fe69 	bl	800049c <lcd_send_string>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	08005148 	.word	0x08005148

080017d8 <printScreen>:

void printScreen(char *screen[])
{
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	int reg_lines[LINES] = {
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <printScreen+0x5c>)
 80017e2:	f107 040c 	add.w	r4, r7, #12
 80017e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					0x80|0x40,
					0x80|0x14,
					0x80|0x54
				};

	clearScreen();
 80017ec:	f000 f824 	bl	8001838 <clearScreen>
	  for(int i = 0 ; i < LINES ; i++)
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
 80017f4:	e015      	b.n	8001822 <printScreen+0x4a>
	  {
		  lcd_send_cmd(reg_lines[i]);
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	f107 0220 	add.w	r2, r7, #32
 80017fe:	4413      	add	r3, r2
 8001800:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe fdae 	bl	8000368 <lcd_send_cmd>
		  lcd_send_string(screen[i]);
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	4413      	add	r3, r2
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fe40 	bl	800049c <lcd_send_string>
	  for(int i = 0 ; i < LINES ; i++)
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	3301      	adds	r3, #1
 8001820:	61fb      	str	r3, [r7, #28]
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	2b03      	cmp	r3, #3
 8001826:	dde6      	ble.n	80017f6 <printScreen+0x1e>
	  }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd90      	pop	{r4, r7, pc}
 8001832:	bf00      	nop
 8001834:	08005100 	.word	0x08005100

08001838 <clearScreen>:

void clearScreen(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	  lcd_send_cmd (CLEAR_LCD);  // clear display
 800183c:	2001      	movs	r0, #1
 800183e:	f7fe fd93 	bl	8000368 <lcd_send_cmd>
	  HAL_Delay(100);
 8001842:	2064      	movs	r0, #100	; 0x64
 8001844:	f000 faae 	bl	8001da4 <HAL_Delay>
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}

0800184c <ControlMotor>:

// *********** funciones para manejo de MOTOR 1 *****************

void ControlMotor(PETfilConv *_petFilConv)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	if(_petFilConv -> col_state)	HAL_GPIO_WritePin(GPIOA, RESET_MOTOR1_Pin, GPIO_PIN_SET);	//si RESET_MOTOR == 1, el motor se habilita
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	789b      	ldrb	r3, [r3, #2]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <ControlMotor+0x1c>
 800185c:	2201      	movs	r2, #1
 800185e:	2101      	movs	r1, #1
 8001860:	4806      	ldr	r0, [pc, #24]	; (800187c <ControlMotor+0x30>)
 8001862:	f001 f8d4 	bl	8002a0e <HAL_GPIO_WritePin>
	else						HAL_GPIO_WritePin(GPIOA, RESET_MOTOR1_Pin, GPIO_PIN_RESET);	//si RESET_MOTOR == 0, el motor se deshabilita
}
 8001866:	e004      	b.n	8001872 <ControlMotor+0x26>
	else						HAL_GPIO_WritePin(GPIOA, RESET_MOTOR1_Pin, GPIO_PIN_RESET);	//si RESET_MOTOR == 0, el motor se deshabilita
 8001868:	2200      	movs	r2, #0
 800186a:	2101      	movs	r1, #1
 800186c:	4803      	ldr	r0, [pc, #12]	; (800187c <ControlMotor+0x30>)
 800186e:	f001 f8ce 	bl	8002a0e <HAL_GPIO_WritePin>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40010800 	.word	0x40010800

08001880 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

	//Fclk = 56MHz / prescaler = 56000-1 / autoreload = 5-1 (VELOCIDAD 3: 500 mm/min)
	//Fclk = 56MHz / prescaler = 56000-1 / autoreload = 6-1 (VELOCIDAD 2: 400 mm/min)
	//Fclk = 56MHz / prescaler = 56000-1 / autoreload = 7-1 (VELOCIDAD 1: 300 mm/min)

	if(htim->Instance == TIM2)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001890:	d151      	bne.n	8001936 <HAL_TIM_PeriodElapsedCallback+0xb6>
	{
		if(g_velocidad_Col1 != previousVel_Col1)
 8001892:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	4b2a      	ldr	r3, [pc, #168]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d046      	beq.n	800192e <HAL_TIM_PeriodElapsedCallback+0xae>
		{
			switch(g_velocidad_Col1)
 80018a0:	4b28      	ldr	r3, [pc, #160]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d02a      	beq.n	80018fe <HAL_TIM_PeriodElapsedCallback+0x7e>
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	d83a      	bhi.n	8001922 <HAL_TIM_PeriodElapsedCallback+0xa2>
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d002      	beq.n	80018b6 <HAL_TIM_PeriodElapsedCallback+0x36>
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d012      	beq.n	80018da <HAL_TIM_PeriodElapsedCallback+0x5a>
					__HAL_TIM_SET_COUNTER(htim, 0);
					__HAL_TIM_SET_AUTORELOAD(htim, 5-1);
					HAL_TIM_Base_Start_IT(htim);
					break;

				default: break;
 80018b4:	e035      	b.n	8001922 <HAL_TIM_PeriodElapsedCallback+0xa2>
					HAL_TIM_Base_Stop_IT(htim);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f002 fa94 	bl	8003de4 <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_SET_COUNTER(htim, 0);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2200      	movs	r2, #0
 80018c2:	625a      	str	r2, [r3, #36]	; 0x24
					__HAL_TIM_SET_AUTORELOAD(htim, 7-1);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2206      	movs	r2, #6
 80018ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2206      	movs	r2, #6
 80018d0:	60da      	str	r2, [r3, #12]
					HAL_TIM_Base_Start_IT(htim);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f002 fa3a 	bl	8003d4c <HAL_TIM_Base_Start_IT>
					break;
 80018d8:	e024      	b.n	8001924 <HAL_TIM_PeriodElapsedCallback+0xa4>
					HAL_TIM_Base_Stop_IT(htim);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f002 fa82 	bl	8003de4 <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_SET_COUNTER(htim, 0);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2200      	movs	r2, #0
 80018e6:	625a      	str	r2, [r3, #36]	; 0x24
					__HAL_TIM_SET_AUTORELOAD(htim, 6-1);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2205      	movs	r2, #5
 80018ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2205      	movs	r2, #5
 80018f4:	60da      	str	r2, [r3, #12]
					HAL_TIM_Base_Start_IT(htim);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f002 fa28 	bl	8003d4c <HAL_TIM_Base_Start_IT>
					break;
 80018fc:	e012      	b.n	8001924 <HAL_TIM_PeriodElapsedCallback+0xa4>
					HAL_TIM_Base_Stop_IT(htim);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f002 fa70 	bl	8003de4 <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_SET_COUNTER(htim, 0);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2200      	movs	r2, #0
 800190a:	625a      	str	r2, [r3, #36]	; 0x24
					__HAL_TIM_SET_AUTORELOAD(htim, 5-1);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2204      	movs	r2, #4
 8001912:	62da      	str	r2, [r3, #44]	; 0x2c
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2204      	movs	r2, #4
 8001918:	60da      	str	r2, [r3, #12]
					HAL_TIM_Base_Start_IT(htim);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f002 fa16 	bl	8003d4c <HAL_TIM_Base_Start_IT>
					break;
 8001920:	e000      	b.n	8001924 <HAL_TIM_PeriodElapsedCallback+0xa4>
				default: break;
 8001922:	bf00      	nop
			}

			previousVel_Col1 = g_velocidad_Col1;
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800192c:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_TogglePin(GPIOA, PASOS_MOTOR1_Pin);
 800192e:	2104      	movs	r1, #4
 8001930:	4805      	ldr	r0, [pc, #20]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001932:	f001 f884 	bl	8002a3e <HAL_GPIO_TogglePin>
	}
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200000fc 	.word	0x200000fc
 8001944:	20000090 	.word	0x20000090
 8001948:	40010800 	.word	0x40010800

0800194c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001950:	b672      	cpsid	i
}
 8001952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001954:	e7fe      	b.n	8001954 <Error_Handler+0x8>
	...

08001958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <HAL_MspInit+0x5c>)
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	4a14      	ldr	r2, [pc, #80]	; (80019b4 <HAL_MspInit+0x5c>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6193      	str	r3, [r2, #24]
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_MspInit+0x5c>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <HAL_MspInit+0x5c>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	4a0e      	ldr	r2, [pc, #56]	; (80019b4 <HAL_MspInit+0x5c>)
 800197c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001980:	61d3      	str	r3, [r2, #28]
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <HAL_MspInit+0x5c>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_MspInit+0x60>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <HAL_MspInit+0x60>)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019aa:	bf00      	nop
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40010000 	.word	0x40010000

080019bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 0310 	add.w	r3, r7, #16
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a28      	ldr	r2, [pc, #160]	; (8001a78 <HAL_ADC_MspInit+0xbc>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d149      	bne.n	8001a70 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019dc:	4b27      	ldr	r3, [pc, #156]	; (8001a7c <HAL_ADC_MspInit+0xc0>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	4a26      	ldr	r2, [pc, #152]	; (8001a7c <HAL_ADC_MspInit+0xc0>)
 80019e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e6:	6193      	str	r3, [r2, #24]
 80019e8:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <HAL_ADC_MspInit+0xc0>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f4:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <HAL_ADC_MspInit+0xc0>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	4a20      	ldr	r2, [pc, #128]	; (8001a7c <HAL_ADC_MspInit+0xc0>)
 80019fa:	f043 0304 	orr.w	r3, r3, #4
 80019fe:	6193      	str	r3, [r2, #24]
 8001a00:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <HAL_ADC_MspInit+0xc0>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a10:	2303      	movs	r3, #3
 8001a12:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4819      	ldr	r0, [pc, #100]	; (8001a80 <HAL_ADC_MspInit+0xc4>)
 8001a1c:	f000 fe66 	bl	80026ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a20:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <HAL_ADC_MspInit+0xc8>)
 8001a22:	4a19      	ldr	r2, [pc, #100]	; (8001a88 <HAL_ADC_MspInit+0xcc>)
 8001a24:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a26:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <HAL_ADC_MspInit+0xc8>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a2c:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <HAL_ADC_MspInit+0xc8>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <HAL_ADC_MspInit+0xc8>)
 8001a34:	2280      	movs	r2, #128	; 0x80
 8001a36:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_ADC_MspInit+0xc8>)
 8001a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a3e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a40:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <HAL_ADC_MspInit+0xc8>)
 8001a42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a46:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a48:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <HAL_ADC_MspInit+0xc8>)
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <HAL_ADC_MspInit+0xc8>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a54:	480b      	ldr	r0, [pc, #44]	; (8001a84 <HAL_ADC_MspInit+0xc8>)
 8001a56:	f000 fce9 	bl	800242c <HAL_DMA_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001a60:	f7ff ff74 	bl	800194c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <HAL_ADC_MspInit+0xc8>)
 8001a68:	621a      	str	r2, [r3, #32]
 8001a6a:	4a06      	ldr	r2, [pc, #24]	; (8001a84 <HAL_ADC_MspInit+0xc8>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a70:	bf00      	nop
 8001a72:	3720      	adds	r7, #32
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40012400 	.word	0x40012400
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40010800 	.word	0x40010800
 8001a84:	2000019c 	.word	0x2000019c
 8001a88:	40020008 	.word	0x40020008

08001a8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a1e      	ldr	r2, [pc, #120]	; (8001b20 <HAL_I2C_MspInit+0x94>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d134      	bne.n	8001b16 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aac:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <HAL_I2C_MspInit+0x98>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	4a1c      	ldr	r2, [pc, #112]	; (8001b24 <HAL_I2C_MspInit+0x98>)
 8001ab2:	f043 0308 	orr.w	r3, r3, #8
 8001ab6:	6193      	str	r3, [r2, #24]
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <HAL_I2C_MspInit+0x98>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ac4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aca:	2312      	movs	r3, #18
 8001acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	4812      	ldr	r0, [pc, #72]	; (8001b28 <HAL_I2C_MspInit+0x9c>)
 8001ade:	f000 fe05 	bl	80026ec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_I2C_MspInit+0xa0>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	f043 0302 	orr.w	r3, r3, #2
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
 8001af8:	4a0c      	ldr	r2, [pc, #48]	; (8001b2c <HAL_I2C_MspInit+0xa0>)
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_I2C_MspInit+0x98>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	4a08      	ldr	r2, [pc, #32]	; (8001b24 <HAL_I2C_MspInit+0x98>)
 8001b04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b08:	61d3      	str	r3, [r2, #28]
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_I2C_MspInit+0x98>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b16:	bf00      	nop
 8001b18:	3728      	adds	r7, #40	; 0x28
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40005400 	.word	0x40005400
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40010c00 	.word	0x40010c00
 8001b2c:	40010000 	.word	0x40010000

08001b30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b40:	d113      	bne.n	8001b6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b42:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <HAL_TIM_Base_MspInit+0x44>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <HAL_TIM_Base_MspInit+0x44>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	61d3      	str	r3, [r2, #28]
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <HAL_TIM_Base_MspInit+0x44>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	201c      	movs	r0, #28
 8001b60:	f000 fc2d 	bl	80023be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b64:	201c      	movs	r0, #28
 8001b66:	f000 fc46 	bl	80023f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b6a:	bf00      	nop
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40021000 	.word	0x40021000

08001b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <NMI_Handler+0x4>

08001b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <HardFault_Handler+0x4>

08001b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <MemManage_Handler+0x4>

08001b8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8e:	e7fe      	b.n	8001b8e <BusFault_Handler+0x4>

08001b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <UsageFault_Handler+0x4>

08001b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr

08001bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr

08001bba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bbe:	f000 f8d5 	bl	8001d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001bca:	2008      	movs	r0, #8
 8001bcc:	f000 ff50 	bl	8002a70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <DMA1_Channel1_IRQHandler+0x10>)
 8001bda:	f000 fc81 	bl	80024e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	2000019c 	.word	0x2000019c

08001be8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <TIM2_IRQHandler+0x10>)
 8001bee:	f002 f927 	bl	8003e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200001e4 	.word	0x200001e4

08001bfc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c04:	f000 ff34 	bl	8002a70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001c08:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c0c:	f000 ff30 	bl	8002a70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001c10:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001c14:	f000 ff2c 	bl	8002a70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c24:	4a14      	ldr	r2, [pc, #80]	; (8001c78 <_sbrk+0x5c>)
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <_sbrk+0x60>)
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <_sbrk+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d102      	bne.n	8001c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <_sbrk+0x64>)
 8001c3a:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <_sbrk+0x68>)
 8001c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <_sbrk+0x64>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d207      	bcs.n	8001c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c4c:	f002 fc40 	bl	80044d0 <__errno>
 8001c50:	4603      	mov	r3, r0
 8001c52:	220c      	movs	r2, #12
 8001c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5a:	e009      	b.n	8001c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <_sbrk+0x64>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c62:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <_sbrk+0x64>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	4a05      	ldr	r2, [pc, #20]	; (8001c80 <_sbrk+0x64>)
 8001c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20002800 	.word	0x20002800
 8001c7c:	00000400 	.word	0x00000400
 8001c80:	20000100 	.word	0x20000100
 8001c84:	20000248 	.word	0x20000248

08001c88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c94:	480c      	ldr	r0, [pc, #48]	; (8001cc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c96:	490d      	ldr	r1, [pc, #52]	; (8001ccc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c98:	4a0d      	ldr	r2, [pc, #52]	; (8001cd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c9c:	e002      	b.n	8001ca4 <LoopCopyDataInit>

08001c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ca2:	3304      	adds	r3, #4

08001ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca8:	d3f9      	bcc.n	8001c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cac:	4c0a      	ldr	r4, [pc, #40]	; (8001cd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb0:	e001      	b.n	8001cb6 <LoopFillZerobss>

08001cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb4:	3204      	adds	r2, #4

08001cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb8:	d3fb      	bcc.n	8001cb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cba:	f7ff ffe5 	bl	8001c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cbe:	f002 fc0d 	bl	80044dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cc2:	f7fe fc01 	bl	80004c8 <main>
  bx lr
 8001cc6:	4770      	bx	lr
  ldr r0, =_sdata
 8001cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ccc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001cd0:	080051b4 	.word	0x080051b4
  ldr r2, =_sbss
 8001cd4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001cd8:	20000248 	.word	0x20000248

08001cdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cdc:	e7fe      	b.n	8001cdc <ADC1_2_IRQHandler>
	...

08001ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_Init+0x28>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a07      	ldr	r2, [pc, #28]	; (8001d08 <HAL_Init+0x28>)
 8001cea:	f043 0310 	orr.w	r3, r3, #16
 8001cee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf0:	2003      	movs	r0, #3
 8001cf2:	f000 fb59 	bl	80023a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	f000 f808 	bl	8001d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cfc:	f7ff fe2c 	bl	8001958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40022000 	.word	0x40022000

08001d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d14:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_InitTick+0x54>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_InitTick+0x58>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 fb71 	bl	8002412 <HAL_SYSTICK_Config>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00e      	b.n	8001d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b0f      	cmp	r3, #15
 8001d3e:	d80a      	bhi.n	8001d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d40:	2200      	movs	r2, #0
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295
 8001d48:	f000 fb39 	bl	80023be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d4c:	4a06      	ldr	r2, [pc, #24]	; (8001d68 <HAL_InitTick+0x5c>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e000      	b.n	8001d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000004 	.word	0x20000004
 8001d64:	2000000c 	.word	0x2000000c
 8001d68:	20000008 	.word	0x20000008

08001d6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_IncTick+0x1c>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <HAL_IncTick+0x20>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	4a03      	ldr	r2, [pc, #12]	; (8001d8c <HAL_IncTick+0x20>)
 8001d7e:	6013      	str	r3, [r2, #0]
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	2000000c 	.word	0x2000000c
 8001d8c:	20000234 	.word	0x20000234

08001d90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return uwTick;
 8001d94:	4b02      	ldr	r3, [pc, #8]	; (8001da0 <HAL_GetTick+0x10>)
 8001d96:	681b      	ldr	r3, [r3, #0]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	20000234 	.word	0x20000234

08001da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dac:	f7ff fff0 	bl	8001d90 <HAL_GetTick>
 8001db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbc:	d005      	beq.n	8001dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <HAL_Delay+0x44>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dca:	bf00      	nop
 8001dcc:	f7ff ffe0 	bl	8001d90 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d8f7      	bhi.n	8001dcc <HAL_Delay+0x28>
  {
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	2000000c 	.word	0x2000000c

08001dec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df4:	2300      	movs	r3, #0
 8001df6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e0be      	b.n	8001f8c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d109      	bne.n	8001e30 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff fdc6 	bl	80019bc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f9ab 	bl	800218c <ADC_ConversionStop_Disable>
 8001e36:	4603      	mov	r3, r0
 8001e38:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f040 8099 	bne.w	8001f7a <HAL_ADC_Init+0x18e>
 8001e48:	7dfb      	ldrb	r3, [r7, #23]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f040 8095 	bne.w	8001f7a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e58:	f023 0302 	bic.w	r3, r3, #2
 8001e5c:	f043 0202 	orr.w	r2, r3, #2
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e6c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7b1b      	ldrb	r3, [r3, #12]
 8001e72:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e74:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e84:	d003      	beq.n	8001e8e <HAL_ADC_Init+0xa2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d102      	bne.n	8001e94 <HAL_ADC_Init+0xa8>
 8001e8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e92:	e000      	b.n	8001e96 <HAL_ADC_Init+0xaa>
 8001e94:	2300      	movs	r3, #0
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	7d1b      	ldrb	r3, [r3, #20]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d119      	bne.n	8001ed8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	7b1b      	ldrb	r3, [r3, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d109      	bne.n	8001ec0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	035a      	lsls	r2, r3, #13
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	e00b      	b.n	8001ed8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec4:	f043 0220 	orr.w	r2, r3, #32
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	f043 0201 	orr.w	r2, r3, #1
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	4b28      	ldr	r3, [pc, #160]	; (8001f94 <HAL_ADC_Init+0x1a8>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	68b9      	ldr	r1, [r7, #8]
 8001efc:	430b      	orrs	r3, r1
 8001efe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f08:	d003      	beq.n	8001f12 <HAL_ADC_Init+0x126>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d104      	bne.n	8001f1c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	051b      	lsls	r3, r3, #20
 8001f1a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f22:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <HAL_ADC_Init+0x1ac>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d10b      	bne.n	8001f58 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4a:	f023 0303 	bic.w	r3, r3, #3
 8001f4e:	f043 0201 	orr.w	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f56:	e018      	b.n	8001f8a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5c:	f023 0312 	bic.w	r3, r3, #18
 8001f60:	f043 0210 	orr.w	r2, r3, #16
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	f043 0201 	orr.w	r2, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f78:	e007      	b.n	8001f8a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7e:	f043 0210 	orr.w	r2, r3, #16
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	ffe1f7fd 	.word	0xffe1f7fd
 8001f98:	ff1f0efe 	.word	0xff1f0efe

08001f9c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x20>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e0dc      	b.n	8002176 <HAL_ADC_ConfigChannel+0x1da>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b06      	cmp	r3, #6
 8001fca:	d81c      	bhi.n	8002006 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	3b05      	subs	r3, #5
 8001fde:	221f      	movs	r2, #31
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	4019      	ands	r1, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3b05      	subs	r3, #5
 8001ff8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	635a      	str	r2, [r3, #52]	; 0x34
 8002004:	e03c      	b.n	8002080 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b0c      	cmp	r3, #12
 800200c:	d81c      	bhi.n	8002048 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	3b23      	subs	r3, #35	; 0x23
 8002020:	221f      	movs	r2, #31
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	4019      	ands	r1, r3
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	3b23      	subs	r3, #35	; 0x23
 800203a:	fa00 f203 	lsl.w	r2, r0, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	631a      	str	r2, [r3, #48]	; 0x30
 8002046:	e01b      	b.n	8002080 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	3b41      	subs	r3, #65	; 0x41
 800205a:	221f      	movs	r2, #31
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	4019      	ands	r1, r3
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	3b41      	subs	r3, #65	; 0x41
 8002074:	fa00 f203 	lsl.w	r2, r0, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b09      	cmp	r3, #9
 8002086:	d91c      	bls.n	80020c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68d9      	ldr	r1, [r3, #12]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	4613      	mov	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4413      	add	r3, r2
 8002098:	3b1e      	subs	r3, #30
 800209a:	2207      	movs	r2, #7
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	4019      	ands	r1, r3
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	6898      	ldr	r0, [r3, #8]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4613      	mov	r3, r2
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	4413      	add	r3, r2
 80020b2:	3b1e      	subs	r3, #30
 80020b4:	fa00 f203 	lsl.w	r2, r0, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	60da      	str	r2, [r3, #12]
 80020c0:	e019      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6919      	ldr	r1, [r3, #16]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	2207      	movs	r2, #7
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	4019      	ands	r1, r3
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	6898      	ldr	r0, [r3, #8]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4613      	mov	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4413      	add	r3, r2
 80020ea:	fa00 f203 	lsl.w	r2, r0, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b10      	cmp	r3, #16
 80020fc:	d003      	beq.n	8002106 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002102:	2b11      	cmp	r3, #17
 8002104:	d132      	bne.n	800216c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a1d      	ldr	r2, [pc, #116]	; (8002180 <HAL_ADC_ConfigChannel+0x1e4>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d125      	bne.n	800215c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d126      	bne.n	800216c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800212c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2b10      	cmp	r3, #16
 8002134:	d11a      	bne.n	800216c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002136:	4b13      	ldr	r3, [pc, #76]	; (8002184 <HAL_ADC_ConfigChannel+0x1e8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a13      	ldr	r2, [pc, #76]	; (8002188 <HAL_ADC_ConfigChannel+0x1ec>)
 800213c:	fba2 2303 	umull	r2, r3, r2, r3
 8002140:	0c9a      	lsrs	r2, r3, #18
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800214c:	e002      	b.n	8002154 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	3b01      	subs	r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f9      	bne.n	800214e <HAL_ADC_ConfigChannel+0x1b2>
 800215a:	e007      	b.n	800216c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002160:	f043 0220 	orr.w	r2, r3, #32
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002174:	7bfb      	ldrb	r3, [r7, #15]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	40012400 	.word	0x40012400
 8002184:	20000004 	.word	0x20000004
 8002188:	431bde83 	.word	0x431bde83

0800218c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d12e      	bne.n	8002204 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0201 	bic.w	r2, r2, #1
 80021b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021b6:	f7ff fdeb 	bl	8001d90 <HAL_GetTick>
 80021ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021bc:	e01b      	b.n	80021f6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021be:	f7ff fde7 	bl	8001d90 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d914      	bls.n	80021f6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d10d      	bne.n	80021f6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021de:	f043 0210 	orr.w	r2, r3, #16
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	f043 0201 	orr.w	r2, r3, #1
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e007      	b.n	8002206 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b01      	cmp	r3, #1
 8002202:	d0dc      	beq.n	80021be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <__NVIC_SetPriorityGrouping+0x44>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800222c:	4013      	ands	r3, r2
 800222e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800223c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002242:	4a04      	ldr	r2, [pc, #16]	; (8002254 <__NVIC_SetPriorityGrouping+0x44>)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	60d3      	str	r3, [r2, #12]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <__NVIC_GetPriorityGrouping+0x18>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	0a1b      	lsrs	r3, r3, #8
 8002262:	f003 0307 	and.w	r3, r3, #7
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	2b00      	cmp	r3, #0
 8002284:	db0b      	blt.n	800229e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	f003 021f 	and.w	r2, r3, #31
 800228c:	4906      	ldr	r1, [pc, #24]	; (80022a8 <__NVIC_EnableIRQ+0x34>)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	2001      	movs	r0, #1
 8002296:	fa00 f202 	lsl.w	r2, r0, r2
 800229a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	e000e100 	.word	0xe000e100

080022ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	6039      	str	r1, [r7, #0]
 80022b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	db0a      	blt.n	80022d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	490c      	ldr	r1, [pc, #48]	; (80022f8 <__NVIC_SetPriority+0x4c>)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	0112      	lsls	r2, r2, #4
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	440b      	add	r3, r1
 80022d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d4:	e00a      	b.n	80022ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	4908      	ldr	r1, [pc, #32]	; (80022fc <__NVIC_SetPriority+0x50>)
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	3b04      	subs	r3, #4
 80022e4:	0112      	lsls	r2, r2, #4
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	440b      	add	r3, r1
 80022ea:	761a      	strb	r2, [r3, #24]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000e100 	.word	0xe000e100
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002300:	b480      	push	{r7}
 8002302:	b089      	sub	sp, #36	; 0x24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f1c3 0307 	rsb	r3, r3, #7
 800231a:	2b04      	cmp	r3, #4
 800231c:	bf28      	it	cs
 800231e:	2304      	movcs	r3, #4
 8002320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3304      	adds	r3, #4
 8002326:	2b06      	cmp	r3, #6
 8002328:	d902      	bls.n	8002330 <NVIC_EncodePriority+0x30>
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3b03      	subs	r3, #3
 800232e:	e000      	b.n	8002332 <NVIC_EncodePriority+0x32>
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	f04f 32ff 	mov.w	r2, #4294967295
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43da      	mvns	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	401a      	ands	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002348:	f04f 31ff 	mov.w	r1, #4294967295
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	fa01 f303 	lsl.w	r3, r1, r3
 8002352:	43d9      	mvns	r1, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002358:	4313      	orrs	r3, r2
         );
}
 800235a:	4618      	mov	r0, r3
 800235c:	3724      	adds	r7, #36	; 0x24
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002374:	d301      	bcc.n	800237a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002376:	2301      	movs	r3, #1
 8002378:	e00f      	b.n	800239a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800237a:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <SysTick_Config+0x40>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3b01      	subs	r3, #1
 8002380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002382:	210f      	movs	r1, #15
 8002384:	f04f 30ff 	mov.w	r0, #4294967295
 8002388:	f7ff ff90 	bl	80022ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <SysTick_Config+0x40>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002392:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <SysTick_Config+0x40>)
 8002394:	2207      	movs	r2, #7
 8002396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	e000e010 	.word	0xe000e010

080023a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff ff2d 	bl	8002210 <__NVIC_SetPriorityGrouping>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023be:	b580      	push	{r7, lr}
 80023c0:	b086      	sub	sp, #24
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d0:	f7ff ff42 	bl	8002258 <__NVIC_GetPriorityGrouping>
 80023d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	6978      	ldr	r0, [r7, #20]
 80023dc:	f7ff ff90 	bl	8002300 <NVIC_EncodePriority>
 80023e0:	4602      	mov	r2, r0
 80023e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff5f 	bl	80022ac <__NVIC_SetPriority>
}
 80023ee:	bf00      	nop
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff35 	bl	8002274 <__NVIC_EnableIRQ>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff ffa2 	bl	8002364 <SysTick_Config>
 8002420:	4603      	mov	r3, r0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e043      	b.n	80024ca <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <HAL_DMA_Init+0xa8>)
 800244a:	4413      	add	r3, r2
 800244c:	4a22      	ldr	r2, [pc, #136]	; (80024d8 <HAL_DMA_Init+0xac>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	091b      	lsrs	r3, r3, #4
 8002454:	009a      	lsls	r2, r3, #2
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a1f      	ldr	r2, [pc, #124]	; (80024dc <HAL_DMA_Init+0xb0>)
 800245e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002476:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800247a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002484:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002490:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800249c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr
 80024d4:	bffdfff8 	.word	0xbffdfff8
 80024d8:	cccccccd 	.word	0xcccccccd
 80024dc:	40020000 	.word	0x40020000

080024e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	2204      	movs	r2, #4
 80024fe:	409a      	lsls	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4013      	ands	r3, r2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d04f      	beq.n	80025a8 <HAL_DMA_IRQHandler+0xc8>
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	2b00      	cmp	r3, #0
 8002510:	d04a      	beq.n	80025a8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0320 	and.w	r3, r3, #32
 800251c:	2b00      	cmp	r3, #0
 800251e:	d107      	bne.n	8002530 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0204 	bic.w	r2, r2, #4
 800252e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a66      	ldr	r2, [pc, #408]	; (80026d0 <HAL_DMA_IRQHandler+0x1f0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d029      	beq.n	800258e <HAL_DMA_IRQHandler+0xae>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a65      	ldr	r2, [pc, #404]	; (80026d4 <HAL_DMA_IRQHandler+0x1f4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d022      	beq.n	800258a <HAL_DMA_IRQHandler+0xaa>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a63      	ldr	r2, [pc, #396]	; (80026d8 <HAL_DMA_IRQHandler+0x1f8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d01a      	beq.n	8002584 <HAL_DMA_IRQHandler+0xa4>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a62      	ldr	r2, [pc, #392]	; (80026dc <HAL_DMA_IRQHandler+0x1fc>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d012      	beq.n	800257e <HAL_DMA_IRQHandler+0x9e>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a60      	ldr	r2, [pc, #384]	; (80026e0 <HAL_DMA_IRQHandler+0x200>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00a      	beq.n	8002578 <HAL_DMA_IRQHandler+0x98>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a5f      	ldr	r2, [pc, #380]	; (80026e4 <HAL_DMA_IRQHandler+0x204>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d102      	bne.n	8002572 <HAL_DMA_IRQHandler+0x92>
 800256c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002570:	e00e      	b.n	8002590 <HAL_DMA_IRQHandler+0xb0>
 8002572:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002576:	e00b      	b.n	8002590 <HAL_DMA_IRQHandler+0xb0>
 8002578:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800257c:	e008      	b.n	8002590 <HAL_DMA_IRQHandler+0xb0>
 800257e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002582:	e005      	b.n	8002590 <HAL_DMA_IRQHandler+0xb0>
 8002584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002588:	e002      	b.n	8002590 <HAL_DMA_IRQHandler+0xb0>
 800258a:	2340      	movs	r3, #64	; 0x40
 800258c:	e000      	b.n	8002590 <HAL_DMA_IRQHandler+0xb0>
 800258e:	2304      	movs	r3, #4
 8002590:	4a55      	ldr	r2, [pc, #340]	; (80026e8 <HAL_DMA_IRQHandler+0x208>)
 8002592:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 8094 	beq.w	80026c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80025a6:	e08e      	b.n	80026c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	2202      	movs	r2, #2
 80025ae:	409a      	lsls	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d056      	beq.n	8002666 <HAL_DMA_IRQHandler+0x186>
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d051      	beq.n	8002666 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10b      	bne.n	80025e8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 020a 	bic.w	r2, r2, #10
 80025de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a38      	ldr	r2, [pc, #224]	; (80026d0 <HAL_DMA_IRQHandler+0x1f0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d029      	beq.n	8002646 <HAL_DMA_IRQHandler+0x166>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a37      	ldr	r2, [pc, #220]	; (80026d4 <HAL_DMA_IRQHandler+0x1f4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d022      	beq.n	8002642 <HAL_DMA_IRQHandler+0x162>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a35      	ldr	r2, [pc, #212]	; (80026d8 <HAL_DMA_IRQHandler+0x1f8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d01a      	beq.n	800263c <HAL_DMA_IRQHandler+0x15c>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a34      	ldr	r2, [pc, #208]	; (80026dc <HAL_DMA_IRQHandler+0x1fc>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d012      	beq.n	8002636 <HAL_DMA_IRQHandler+0x156>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a32      	ldr	r2, [pc, #200]	; (80026e0 <HAL_DMA_IRQHandler+0x200>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00a      	beq.n	8002630 <HAL_DMA_IRQHandler+0x150>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a31      	ldr	r2, [pc, #196]	; (80026e4 <HAL_DMA_IRQHandler+0x204>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d102      	bne.n	800262a <HAL_DMA_IRQHandler+0x14a>
 8002624:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002628:	e00e      	b.n	8002648 <HAL_DMA_IRQHandler+0x168>
 800262a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800262e:	e00b      	b.n	8002648 <HAL_DMA_IRQHandler+0x168>
 8002630:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002634:	e008      	b.n	8002648 <HAL_DMA_IRQHandler+0x168>
 8002636:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800263a:	e005      	b.n	8002648 <HAL_DMA_IRQHandler+0x168>
 800263c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002640:	e002      	b.n	8002648 <HAL_DMA_IRQHandler+0x168>
 8002642:	2320      	movs	r3, #32
 8002644:	e000      	b.n	8002648 <HAL_DMA_IRQHandler+0x168>
 8002646:	2302      	movs	r3, #2
 8002648:	4a27      	ldr	r2, [pc, #156]	; (80026e8 <HAL_DMA_IRQHandler+0x208>)
 800264a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	2b00      	cmp	r3, #0
 800265a:	d034      	beq.n	80026c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002664:	e02f      	b.n	80026c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	2208      	movs	r2, #8
 800266c:	409a      	lsls	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4013      	ands	r3, r2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d028      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x1e8>
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d023      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 020e 	bic.w	r2, r2, #14
 800268e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002698:	2101      	movs	r1, #1
 800269a:	fa01 f202 	lsl.w	r2, r1, r2
 800269e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d004      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	4798      	blx	r3
    }
  }
  return;
 80026c6:	bf00      	nop
 80026c8:	bf00      	nop
}
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40020008 	.word	0x40020008
 80026d4:	4002001c 	.word	0x4002001c
 80026d8:	40020030 	.word	0x40020030
 80026dc:	40020044 	.word	0x40020044
 80026e0:	40020058 	.word	0x40020058
 80026e4:	4002006c 	.word	0x4002006c
 80026e8:	40020000 	.word	0x40020000

080026ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b08b      	sub	sp, #44	; 0x2c
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026f6:	2300      	movs	r3, #0
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026fa:	2300      	movs	r3, #0
 80026fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026fe:	e148      	b.n	8002992 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002700:	2201      	movs	r2, #1
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	69fa      	ldr	r2, [r7, #28]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	429a      	cmp	r2, r3
 800271a:	f040 8137 	bne.w	800298c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4aa3      	ldr	r2, [pc, #652]	; (80029b0 <HAL_GPIO_Init+0x2c4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d05e      	beq.n	80027e6 <HAL_GPIO_Init+0xfa>
 8002728:	4aa1      	ldr	r2, [pc, #644]	; (80029b0 <HAL_GPIO_Init+0x2c4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d875      	bhi.n	800281a <HAL_GPIO_Init+0x12e>
 800272e:	4aa1      	ldr	r2, [pc, #644]	; (80029b4 <HAL_GPIO_Init+0x2c8>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d058      	beq.n	80027e6 <HAL_GPIO_Init+0xfa>
 8002734:	4a9f      	ldr	r2, [pc, #636]	; (80029b4 <HAL_GPIO_Init+0x2c8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d86f      	bhi.n	800281a <HAL_GPIO_Init+0x12e>
 800273a:	4a9f      	ldr	r2, [pc, #636]	; (80029b8 <HAL_GPIO_Init+0x2cc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d052      	beq.n	80027e6 <HAL_GPIO_Init+0xfa>
 8002740:	4a9d      	ldr	r2, [pc, #628]	; (80029b8 <HAL_GPIO_Init+0x2cc>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d869      	bhi.n	800281a <HAL_GPIO_Init+0x12e>
 8002746:	4a9d      	ldr	r2, [pc, #628]	; (80029bc <HAL_GPIO_Init+0x2d0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d04c      	beq.n	80027e6 <HAL_GPIO_Init+0xfa>
 800274c:	4a9b      	ldr	r2, [pc, #620]	; (80029bc <HAL_GPIO_Init+0x2d0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d863      	bhi.n	800281a <HAL_GPIO_Init+0x12e>
 8002752:	4a9b      	ldr	r2, [pc, #620]	; (80029c0 <HAL_GPIO_Init+0x2d4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d046      	beq.n	80027e6 <HAL_GPIO_Init+0xfa>
 8002758:	4a99      	ldr	r2, [pc, #612]	; (80029c0 <HAL_GPIO_Init+0x2d4>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d85d      	bhi.n	800281a <HAL_GPIO_Init+0x12e>
 800275e:	2b12      	cmp	r3, #18
 8002760:	d82a      	bhi.n	80027b8 <HAL_GPIO_Init+0xcc>
 8002762:	2b12      	cmp	r3, #18
 8002764:	d859      	bhi.n	800281a <HAL_GPIO_Init+0x12e>
 8002766:	a201      	add	r2, pc, #4	; (adr r2, 800276c <HAL_GPIO_Init+0x80>)
 8002768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276c:	080027e7 	.word	0x080027e7
 8002770:	080027c1 	.word	0x080027c1
 8002774:	080027d3 	.word	0x080027d3
 8002778:	08002815 	.word	0x08002815
 800277c:	0800281b 	.word	0x0800281b
 8002780:	0800281b 	.word	0x0800281b
 8002784:	0800281b 	.word	0x0800281b
 8002788:	0800281b 	.word	0x0800281b
 800278c:	0800281b 	.word	0x0800281b
 8002790:	0800281b 	.word	0x0800281b
 8002794:	0800281b 	.word	0x0800281b
 8002798:	0800281b 	.word	0x0800281b
 800279c:	0800281b 	.word	0x0800281b
 80027a0:	0800281b 	.word	0x0800281b
 80027a4:	0800281b 	.word	0x0800281b
 80027a8:	0800281b 	.word	0x0800281b
 80027ac:	0800281b 	.word	0x0800281b
 80027b0:	080027c9 	.word	0x080027c9
 80027b4:	080027dd 	.word	0x080027dd
 80027b8:	4a82      	ldr	r2, [pc, #520]	; (80029c4 <HAL_GPIO_Init+0x2d8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d013      	beq.n	80027e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027be:	e02c      	b.n	800281a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	623b      	str	r3, [r7, #32]
          break;
 80027c6:	e029      	b.n	800281c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	3304      	adds	r3, #4
 80027ce:	623b      	str	r3, [r7, #32]
          break;
 80027d0:	e024      	b.n	800281c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	3308      	adds	r3, #8
 80027d8:	623b      	str	r3, [r7, #32]
          break;
 80027da:	e01f      	b.n	800281c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	330c      	adds	r3, #12
 80027e2:	623b      	str	r3, [r7, #32]
          break;
 80027e4:	e01a      	b.n	800281c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d102      	bne.n	80027f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027ee:	2304      	movs	r3, #4
 80027f0:	623b      	str	r3, [r7, #32]
          break;
 80027f2:	e013      	b.n	800281c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d105      	bne.n	8002808 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027fc:	2308      	movs	r3, #8
 80027fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69fa      	ldr	r2, [r7, #28]
 8002804:	611a      	str	r2, [r3, #16]
          break;
 8002806:	e009      	b.n	800281c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002808:	2308      	movs	r3, #8
 800280a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	615a      	str	r2, [r3, #20]
          break;
 8002812:	e003      	b.n	800281c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002814:	2300      	movs	r3, #0
 8002816:	623b      	str	r3, [r7, #32]
          break;
 8002818:	e000      	b.n	800281c <HAL_GPIO_Init+0x130>
          break;
 800281a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	2bff      	cmp	r3, #255	; 0xff
 8002820:	d801      	bhi.n	8002826 <HAL_GPIO_Init+0x13a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	e001      	b.n	800282a <HAL_GPIO_Init+0x13e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3304      	adds	r3, #4
 800282a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	2bff      	cmp	r3, #255	; 0xff
 8002830:	d802      	bhi.n	8002838 <HAL_GPIO_Init+0x14c>
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	e002      	b.n	800283e <HAL_GPIO_Init+0x152>
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	3b08      	subs	r3, #8
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	210f      	movs	r1, #15
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	fa01 f303 	lsl.w	r3, r1, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	401a      	ands	r2, r3
 8002850:	6a39      	ldr	r1, [r7, #32]
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	fa01 f303 	lsl.w	r3, r1, r3
 8002858:	431a      	orrs	r2, r3
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 8090 	beq.w	800298c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800286c:	4b56      	ldr	r3, [pc, #344]	; (80029c8 <HAL_GPIO_Init+0x2dc>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	4a55      	ldr	r2, [pc, #340]	; (80029c8 <HAL_GPIO_Init+0x2dc>)
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	6193      	str	r3, [r2, #24]
 8002878:	4b53      	ldr	r3, [pc, #332]	; (80029c8 <HAL_GPIO_Init+0x2dc>)
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002884:	4a51      	ldr	r2, [pc, #324]	; (80029cc <HAL_GPIO_Init+0x2e0>)
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	089b      	lsrs	r3, r3, #2
 800288a:	3302      	adds	r3, #2
 800288c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002890:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	220f      	movs	r2, #15
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4013      	ands	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a49      	ldr	r2, [pc, #292]	; (80029d0 <HAL_GPIO_Init+0x2e4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d00d      	beq.n	80028cc <HAL_GPIO_Init+0x1e0>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a48      	ldr	r2, [pc, #288]	; (80029d4 <HAL_GPIO_Init+0x2e8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d007      	beq.n	80028c8 <HAL_GPIO_Init+0x1dc>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a47      	ldr	r2, [pc, #284]	; (80029d8 <HAL_GPIO_Init+0x2ec>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d101      	bne.n	80028c4 <HAL_GPIO_Init+0x1d8>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e004      	b.n	80028ce <HAL_GPIO_Init+0x1e2>
 80028c4:	2303      	movs	r3, #3
 80028c6:	e002      	b.n	80028ce <HAL_GPIO_Init+0x1e2>
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <HAL_GPIO_Init+0x1e2>
 80028cc:	2300      	movs	r3, #0
 80028ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d0:	f002 0203 	and.w	r2, r2, #3
 80028d4:	0092      	lsls	r2, r2, #2
 80028d6:	4093      	lsls	r3, r2
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028de:	493b      	ldr	r1, [pc, #236]	; (80029cc <HAL_GPIO_Init+0x2e0>)
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	089b      	lsrs	r3, r3, #2
 80028e4:	3302      	adds	r3, #2
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d006      	beq.n	8002906 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028f8:	4b38      	ldr	r3, [pc, #224]	; (80029dc <HAL_GPIO_Init+0x2f0>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4937      	ldr	r1, [pc, #220]	; (80029dc <HAL_GPIO_Init+0x2f0>)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	600b      	str	r3, [r1, #0]
 8002904:	e006      	b.n	8002914 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002906:	4b35      	ldr	r3, [pc, #212]	; (80029dc <HAL_GPIO_Init+0x2f0>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	43db      	mvns	r3, r3
 800290e:	4933      	ldr	r1, [pc, #204]	; (80029dc <HAL_GPIO_Init+0x2f0>)
 8002910:	4013      	ands	r3, r2
 8002912:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d006      	beq.n	800292e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002920:	4b2e      	ldr	r3, [pc, #184]	; (80029dc <HAL_GPIO_Init+0x2f0>)
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	492d      	ldr	r1, [pc, #180]	; (80029dc <HAL_GPIO_Init+0x2f0>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	4313      	orrs	r3, r2
 800292a:	604b      	str	r3, [r1, #4]
 800292c:	e006      	b.n	800293c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800292e:	4b2b      	ldr	r3, [pc, #172]	; (80029dc <HAL_GPIO_Init+0x2f0>)
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	43db      	mvns	r3, r3
 8002936:	4929      	ldr	r1, [pc, #164]	; (80029dc <HAL_GPIO_Init+0x2f0>)
 8002938:	4013      	ands	r3, r2
 800293a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d006      	beq.n	8002956 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002948:	4b24      	ldr	r3, [pc, #144]	; (80029dc <HAL_GPIO_Init+0x2f0>)
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	4923      	ldr	r1, [pc, #140]	; (80029dc <HAL_GPIO_Init+0x2f0>)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	4313      	orrs	r3, r2
 8002952:	608b      	str	r3, [r1, #8]
 8002954:	e006      	b.n	8002964 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002956:	4b21      	ldr	r3, [pc, #132]	; (80029dc <HAL_GPIO_Init+0x2f0>)
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	43db      	mvns	r3, r3
 800295e:	491f      	ldr	r1, [pc, #124]	; (80029dc <HAL_GPIO_Init+0x2f0>)
 8002960:	4013      	ands	r3, r2
 8002962:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d006      	beq.n	800297e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002970:	4b1a      	ldr	r3, [pc, #104]	; (80029dc <HAL_GPIO_Init+0x2f0>)
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	4919      	ldr	r1, [pc, #100]	; (80029dc <HAL_GPIO_Init+0x2f0>)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	60cb      	str	r3, [r1, #12]
 800297c:	e006      	b.n	800298c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800297e:	4b17      	ldr	r3, [pc, #92]	; (80029dc <HAL_GPIO_Init+0x2f0>)
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	43db      	mvns	r3, r3
 8002986:	4915      	ldr	r1, [pc, #84]	; (80029dc <HAL_GPIO_Init+0x2f0>)
 8002988:	4013      	ands	r3, r2
 800298a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	3301      	adds	r3, #1
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	fa22 f303 	lsr.w	r3, r2, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	f47f aeaf 	bne.w	8002700 <HAL_GPIO_Init+0x14>
  }
}
 80029a2:	bf00      	nop
 80029a4:	bf00      	nop
 80029a6:	372c      	adds	r7, #44	; 0x2c
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	10320000 	.word	0x10320000
 80029b4:	10310000 	.word	0x10310000
 80029b8:	10220000 	.word	0x10220000
 80029bc:	10210000 	.word	0x10210000
 80029c0:	10120000 	.word	0x10120000
 80029c4:	10110000 	.word	0x10110000
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40010000 	.word	0x40010000
 80029d0:	40010800 	.word	0x40010800
 80029d4:	40010c00 	.word	0x40010c00
 80029d8:	40011000 	.word	0x40011000
 80029dc:	40010400 	.word	0x40010400

080029e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	887b      	ldrh	r3, [r7, #2]
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
 80029fc:	e001      	b.n	8002a02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029fe:	2300      	movs	r3, #0
 8002a00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	460b      	mov	r3, r1
 8002a18:	807b      	strh	r3, [r7, #2]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a1e:	787b      	ldrb	r3, [r7, #1]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a24:	887a      	ldrh	r2, [r7, #2]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a2a:	e003      	b.n	8002a34 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a2c:	887b      	ldrh	r3, [r7, #2]
 8002a2e:	041a      	lsls	r2, r3, #16
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	611a      	str	r2, [r3, #16]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr

08002a3e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b085      	sub	sp, #20
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	460b      	mov	r3, r1
 8002a48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a50:	887a      	ldrh	r2, [r7, #2]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	4013      	ands	r3, r2
 8002a56:	041a      	lsls	r2, r3, #16
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	43d9      	mvns	r1, r3
 8002a5c:	887b      	ldrh	r3, [r7, #2]
 8002a5e:	400b      	ands	r3, r1
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	611a      	str	r2, [r3, #16]
}
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a7a:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d006      	beq.n	8002a94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a86:	4a05      	ldr	r2, [pc, #20]	; (8002a9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a8c:	88fb      	ldrh	r3, [r7, #6]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fd ffba 	bl	8000a08 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40010400 	.word	0x40010400

08002aa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e12b      	b.n	8002d0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7fe ffe0 	bl	8001a8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2224      	movs	r2, #36	; 0x24
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0201 	bic.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002af2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b04:	f000 ffea 	bl	8003adc <HAL_RCC_GetPCLK1Freq>
 8002b08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	4a81      	ldr	r2, [pc, #516]	; (8002d14 <HAL_I2C_Init+0x274>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d807      	bhi.n	8002b24 <HAL_I2C_Init+0x84>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4a80      	ldr	r2, [pc, #512]	; (8002d18 <HAL_I2C_Init+0x278>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	bf94      	ite	ls
 8002b1c:	2301      	movls	r3, #1
 8002b1e:	2300      	movhi	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	e006      	b.n	8002b32 <HAL_I2C_Init+0x92>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4a7d      	ldr	r2, [pc, #500]	; (8002d1c <HAL_I2C_Init+0x27c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	bf94      	ite	ls
 8002b2c:	2301      	movls	r3, #1
 8002b2e:	2300      	movhi	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e0e7      	b.n	8002d0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4a78      	ldr	r2, [pc, #480]	; (8002d20 <HAL_I2C_Init+0x280>)
 8002b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b42:	0c9b      	lsrs	r3, r3, #18
 8002b44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	4a6a      	ldr	r2, [pc, #424]	; (8002d14 <HAL_I2C_Init+0x274>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d802      	bhi.n	8002b74 <HAL_I2C_Init+0xd4>
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	3301      	adds	r3, #1
 8002b72:	e009      	b.n	8002b88 <HAL_I2C_Init+0xe8>
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b7a:	fb02 f303 	mul.w	r3, r2, r3
 8002b7e:	4a69      	ldr	r2, [pc, #420]	; (8002d24 <HAL_I2C_Init+0x284>)
 8002b80:	fba2 2303 	umull	r2, r3, r2, r3
 8002b84:	099b      	lsrs	r3, r3, #6
 8002b86:	3301      	adds	r3, #1
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	430b      	orrs	r3, r1
 8002b8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	495c      	ldr	r1, [pc, #368]	; (8002d14 <HAL_I2C_Init+0x274>)
 8002ba4:	428b      	cmp	r3, r1
 8002ba6:	d819      	bhi.n	8002bdc <HAL_I2C_Init+0x13c>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	1e59      	subs	r1, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bb6:	1c59      	adds	r1, r3, #1
 8002bb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bbc:	400b      	ands	r3, r1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <HAL_I2C_Init+0x138>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1e59      	subs	r1, r3, #1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd6:	e051      	b.n	8002c7c <HAL_I2C_Init+0x1dc>
 8002bd8:	2304      	movs	r3, #4
 8002bda:	e04f      	b.n	8002c7c <HAL_I2C_Init+0x1dc>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d111      	bne.n	8002c08 <HAL_I2C_Init+0x168>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	1e58      	subs	r0, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6859      	ldr	r1, [r3, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	440b      	add	r3, r1
 8002bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bf0c      	ite	eq
 8002c00:	2301      	moveq	r3, #1
 8002c02:	2300      	movne	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	e012      	b.n	8002c2e <HAL_I2C_Init+0x18e>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	1e58      	subs	r0, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6859      	ldr	r1, [r3, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	0099      	lsls	r1, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c1e:	3301      	adds	r3, #1
 8002c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf0c      	ite	eq
 8002c28:	2301      	moveq	r3, #1
 8002c2a:	2300      	movne	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_I2C_Init+0x196>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e022      	b.n	8002c7c <HAL_I2C_Init+0x1dc>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10e      	bne.n	8002c5c <HAL_I2C_Init+0x1bc>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	1e58      	subs	r0, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6859      	ldr	r1, [r3, #4]
 8002c46:	460b      	mov	r3, r1
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	440b      	add	r3, r1
 8002c4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c50:	3301      	adds	r3, #1
 8002c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c5a:	e00f      	b.n	8002c7c <HAL_I2C_Init+0x1dc>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	1e58      	subs	r0, r3, #1
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6859      	ldr	r1, [r3, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	0099      	lsls	r1, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c72:	3301      	adds	r3, #1
 8002c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	6809      	ldr	r1, [r1, #0]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69da      	ldr	r2, [r3, #28]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002caa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6911      	ldr	r1, [r2, #16]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	68d2      	ldr	r2, [r2, #12]
 8002cb6:	4311      	orrs	r1, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695a      	ldr	r2, [r3, #20]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0201 	orr.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	000186a0 	.word	0x000186a0
 8002d18:	001e847f 	.word	0x001e847f
 8002d1c:	003d08ff 	.word	0x003d08ff
 8002d20:	431bde83 	.word	0x431bde83
 8002d24:	10624dd3 	.word	0x10624dd3

08002d28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	461a      	mov	r2, r3
 8002d34:	460b      	mov	r3, r1
 8002d36:	817b      	strh	r3, [r7, #10]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d3c:	f7ff f828 	bl	8001d90 <HAL_GetTick>
 8002d40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b20      	cmp	r3, #32
 8002d4c:	f040 80e0 	bne.w	8002f10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	2319      	movs	r3, #25
 8002d56:	2201      	movs	r2, #1
 8002d58:	4970      	ldr	r1, [pc, #448]	; (8002f1c <HAL_I2C_Master_Transmit+0x1f4>)
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 f964 	bl	8003028 <I2C_WaitOnFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d66:	2302      	movs	r3, #2
 8002d68:	e0d3      	b.n	8002f12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_I2C_Master_Transmit+0x50>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e0cc      	b.n	8002f12 <HAL_I2C_Master_Transmit+0x1ea>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d007      	beq.n	8002d9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f042 0201 	orr.w	r2, r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2221      	movs	r2, #33	; 0x21
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2210      	movs	r2, #16
 8002dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	893a      	ldrh	r2, [r7, #8]
 8002dce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4a50      	ldr	r2, [pc, #320]	; (8002f20 <HAL_I2C_Master_Transmit+0x1f8>)
 8002dde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002de0:	8979      	ldrh	r1, [r7, #10]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	6a3a      	ldr	r2, [r7, #32]
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f89c 	bl	8002f24 <I2C_MasterRequestWrite>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e08d      	b.n	8002f12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e0c:	e066      	b.n	8002edc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	6a39      	ldr	r1, [r7, #32]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f9de 	bl	80031d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00d      	beq.n	8002e3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d107      	bne.n	8002e36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e06b      	b.n	8002f12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	781a      	ldrb	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d11b      	bne.n	8002eb0 <HAL_I2C_Master_Transmit+0x188>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d017      	beq.n	8002eb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	781a      	ldrb	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	6a39      	ldr	r1, [r7, #32]
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 f9ce 	bl	8003256 <I2C_WaitOnBTFFlagUntilTimeout>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00d      	beq.n	8002edc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d107      	bne.n	8002ed8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e01a      	b.n	8002f12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d194      	bne.n	8002e0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e000      	b.n	8002f12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f10:	2302      	movs	r3, #2
  }
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	00100002 	.word	0x00100002
 8002f20:	ffff0000 	.word	0xffff0000

08002f24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b088      	sub	sp, #32
 8002f28:	af02      	add	r7, sp, #8
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	607a      	str	r2, [r7, #4]
 8002f2e:	603b      	str	r3, [r7, #0]
 8002f30:	460b      	mov	r3, r1
 8002f32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d006      	beq.n	8002f4e <I2C_MasterRequestWrite+0x2a>
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d003      	beq.n	8002f4e <I2C_MasterRequestWrite+0x2a>
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f4c:	d108      	bne.n	8002f60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	e00b      	b.n	8002f78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f64:	2b12      	cmp	r3, #18
 8002f66:	d107      	bne.n	8002f78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 f84f 	bl	8003028 <I2C_WaitOnFlagUntilTimeout>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00d      	beq.n	8002fac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f9e:	d103      	bne.n	8002fa8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fa6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e035      	b.n	8003018 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fb4:	d108      	bne.n	8002fc8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fb6:	897b      	ldrh	r3, [r7, #10]
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fc4:	611a      	str	r2, [r3, #16]
 8002fc6:	e01b      	b.n	8003000 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fc8:	897b      	ldrh	r3, [r7, #10]
 8002fca:	11db      	asrs	r3, r3, #7
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	f003 0306 	and.w	r3, r3, #6
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	f063 030f 	orn	r3, r3, #15
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	490e      	ldr	r1, [pc, #56]	; (8003020 <I2C_MasterRequestWrite+0xfc>)
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 f875 	bl	80030d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e010      	b.n	8003018 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ff6:	897b      	ldrh	r3, [r7, #10]
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	4907      	ldr	r1, [pc, #28]	; (8003024 <I2C_MasterRequestWrite+0x100>)
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f865 	bl	80030d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	00010008 	.word	0x00010008
 8003024:	00010002 	.word	0x00010002

08003028 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	4613      	mov	r3, r2
 8003036:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003038:	e025      	b.n	8003086 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d021      	beq.n	8003086 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003042:	f7fe fea5 	bl	8001d90 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d302      	bcc.n	8003058 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d116      	bne.n	8003086 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f043 0220 	orr.w	r2, r3, #32
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e023      	b.n	80030ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	0c1b      	lsrs	r3, r3, #16
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d10d      	bne.n	80030ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	43da      	mvns	r2, r3
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	4013      	ands	r3, r2
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	bf0c      	ite	eq
 80030a2:	2301      	moveq	r3, #1
 80030a4:	2300      	movne	r3, #0
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	461a      	mov	r2, r3
 80030aa:	e00c      	b.n	80030c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	43da      	mvns	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	4013      	ands	r3, r2
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	bf0c      	ite	eq
 80030be:	2301      	moveq	r3, #1
 80030c0:	2300      	movne	r3, #0
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	461a      	mov	r2, r3
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d0b6      	beq.n	800303a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
 80030e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030e4:	e051      	b.n	800318a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f4:	d123      	bne.n	800313e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003104:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800310e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f043 0204 	orr.w	r2, r3, #4
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e046      	b.n	80031cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003144:	d021      	beq.n	800318a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003146:	f7fe fe23 	bl	8001d90 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	429a      	cmp	r2, r3
 8003154:	d302      	bcc.n	800315c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d116      	bne.n	800318a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f043 0220 	orr.w	r2, r3, #32
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e020      	b.n	80031cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	0c1b      	lsrs	r3, r3, #16
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b01      	cmp	r3, #1
 8003192:	d10c      	bne.n	80031ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	43da      	mvns	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4013      	ands	r3, r2
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	bf14      	ite	ne
 80031a6:	2301      	movne	r3, #1
 80031a8:	2300      	moveq	r3, #0
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	e00b      	b.n	80031c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	43da      	mvns	r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	4013      	ands	r3, r2
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bf14      	ite	ne
 80031c0:	2301      	movne	r3, #1
 80031c2:	2300      	moveq	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d18d      	bne.n	80030e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031e0:	e02d      	b.n	800323e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f878 	bl	80032d8 <I2C_IsAcknowledgeFailed>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e02d      	b.n	800324e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f8:	d021      	beq.n	800323e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031fa:	f7fe fdc9 	bl	8001d90 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	429a      	cmp	r2, r3
 8003208:	d302      	bcc.n	8003210 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d116      	bne.n	800323e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f043 0220 	orr.w	r2, r3, #32
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e007      	b.n	800324e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003248:	2b80      	cmp	r3, #128	; 0x80
 800324a:	d1ca      	bne.n	80031e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b084      	sub	sp, #16
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003262:	e02d      	b.n	80032c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 f837 	bl	80032d8 <I2C_IsAcknowledgeFailed>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e02d      	b.n	80032d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327a:	d021      	beq.n	80032c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800327c:	f7fe fd88 	bl	8001d90 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	429a      	cmp	r2, r3
 800328a:	d302      	bcc.n	8003292 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d116      	bne.n	80032c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	f043 0220 	orr.w	r2, r3, #32
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e007      	b.n	80032d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d1ca      	bne.n	8003264 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ee:	d11b      	bne.n	8003328 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	f043 0204 	orr.w	r2, r3, #4
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e26c      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 8087 	beq.w	8003462 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003354:	4b92      	ldr	r3, [pc, #584]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 030c 	and.w	r3, r3, #12
 800335c:	2b04      	cmp	r3, #4
 800335e:	d00c      	beq.n	800337a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003360:	4b8f      	ldr	r3, [pc, #572]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 030c 	and.w	r3, r3, #12
 8003368:	2b08      	cmp	r3, #8
 800336a:	d112      	bne.n	8003392 <HAL_RCC_OscConfig+0x5e>
 800336c:	4b8c      	ldr	r3, [pc, #560]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003378:	d10b      	bne.n	8003392 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800337a:	4b89      	ldr	r3, [pc, #548]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d06c      	beq.n	8003460 <HAL_RCC_OscConfig+0x12c>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d168      	bne.n	8003460 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e246      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800339a:	d106      	bne.n	80033aa <HAL_RCC_OscConfig+0x76>
 800339c:	4b80      	ldr	r3, [pc, #512]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a7f      	ldr	r2, [pc, #508]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	e02e      	b.n	8003408 <HAL_RCC_OscConfig+0xd4>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10c      	bne.n	80033cc <HAL_RCC_OscConfig+0x98>
 80033b2:	4b7b      	ldr	r3, [pc, #492]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a7a      	ldr	r2, [pc, #488]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	4b78      	ldr	r3, [pc, #480]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a77      	ldr	r2, [pc, #476]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	e01d      	b.n	8003408 <HAL_RCC_OscConfig+0xd4>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033d4:	d10c      	bne.n	80033f0 <HAL_RCC_OscConfig+0xbc>
 80033d6:	4b72      	ldr	r3, [pc, #456]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a71      	ldr	r2, [pc, #452]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	4b6f      	ldr	r3, [pc, #444]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a6e      	ldr	r2, [pc, #440]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	e00b      	b.n	8003408 <HAL_RCC_OscConfig+0xd4>
 80033f0:	4b6b      	ldr	r3, [pc, #428]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a6a      	ldr	r2, [pc, #424]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033fa:	6013      	str	r3, [r2, #0]
 80033fc:	4b68      	ldr	r3, [pc, #416]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a67      	ldr	r2, [pc, #412]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003406:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d013      	beq.n	8003438 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003410:	f7fe fcbe 	bl	8001d90 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003418:	f7fe fcba 	bl	8001d90 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b64      	cmp	r3, #100	; 0x64
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e1fa      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342a:	4b5d      	ldr	r3, [pc, #372]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0f0      	beq.n	8003418 <HAL_RCC_OscConfig+0xe4>
 8003436:	e014      	b.n	8003462 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003438:	f7fe fcaa 	bl	8001d90 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003440:	f7fe fca6 	bl	8001d90 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	; 0x64
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e1e6      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003452:	4b53      	ldr	r3, [pc, #332]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x10c>
 800345e:	e000      	b.n	8003462 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d063      	beq.n	8003536 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800346e:	4b4c      	ldr	r3, [pc, #304]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f003 030c 	and.w	r3, r3, #12
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00b      	beq.n	8003492 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800347a:	4b49      	ldr	r3, [pc, #292]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f003 030c 	and.w	r3, r3, #12
 8003482:	2b08      	cmp	r3, #8
 8003484:	d11c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x18c>
 8003486:	4b46      	ldr	r3, [pc, #280]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d116      	bne.n	80034c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003492:	4b43      	ldr	r3, [pc, #268]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d005      	beq.n	80034aa <HAL_RCC_OscConfig+0x176>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d001      	beq.n	80034aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e1ba      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034aa:	4b3d      	ldr	r3, [pc, #244]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	4939      	ldr	r1, [pc, #228]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034be:	e03a      	b.n	8003536 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d020      	beq.n	800350a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c8:	4b36      	ldr	r3, [pc, #216]	; (80035a4 <HAL_RCC_OscConfig+0x270>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ce:	f7fe fc5f 	bl	8001d90 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d6:	f7fe fc5b 	bl	8001d90 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e19b      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e8:	4b2d      	ldr	r3, [pc, #180]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0f0      	beq.n	80034d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f4:	4b2a      	ldr	r3, [pc, #168]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	4927      	ldr	r1, [pc, #156]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003504:	4313      	orrs	r3, r2
 8003506:	600b      	str	r3, [r1, #0]
 8003508:	e015      	b.n	8003536 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800350a:	4b26      	ldr	r3, [pc, #152]	; (80035a4 <HAL_RCC_OscConfig+0x270>)
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003510:	f7fe fc3e 	bl	8001d90 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003518:	f7fe fc3a 	bl	8001d90 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e17a      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800352a:	4b1d      	ldr	r3, [pc, #116]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b00      	cmp	r3, #0
 8003540:	d03a      	beq.n	80035b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d019      	beq.n	800357e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800354a:	4b17      	ldr	r3, [pc, #92]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 800354c:	2201      	movs	r2, #1
 800354e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003550:	f7fe fc1e 	bl	8001d90 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003558:	f7fe fc1a 	bl	8001d90 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e15a      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356a:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f0      	beq.n	8003558 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003576:	2001      	movs	r0, #1
 8003578:	f000 fac4 	bl	8003b04 <RCC_Delay>
 800357c:	e01c      	b.n	80035b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800357e:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <HAL_RCC_OscConfig+0x274>)
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003584:	f7fe fc04 	bl	8001d90 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800358a:	e00f      	b.n	80035ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800358c:	f7fe fc00 	bl	8001d90 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d908      	bls.n	80035ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e140      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
 800359e:	bf00      	nop
 80035a0:	40021000 	.word	0x40021000
 80035a4:	42420000 	.word	0x42420000
 80035a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ac:	4b9e      	ldr	r3, [pc, #632]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1e9      	bne.n	800358c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 80a6 	beq.w	8003712 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c6:	2300      	movs	r3, #0
 80035c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ca:	4b97      	ldr	r3, [pc, #604]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10d      	bne.n	80035f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d6:	4b94      	ldr	r3, [pc, #592]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	4a93      	ldr	r2, [pc, #588]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 80035dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e0:	61d3      	str	r3, [r2, #28]
 80035e2:	4b91      	ldr	r3, [pc, #580]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ea:	60bb      	str	r3, [r7, #8]
 80035ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ee:	2301      	movs	r3, #1
 80035f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f2:	4b8e      	ldr	r3, [pc, #568]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d118      	bne.n	8003630 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035fe:	4b8b      	ldr	r3, [pc, #556]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a8a      	ldr	r2, [pc, #552]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 8003604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800360a:	f7fe fbc1 	bl	8001d90 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003612:	f7fe fbbd 	bl	8001d90 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b64      	cmp	r3, #100	; 0x64
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e0fd      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003624:	4b81      	ldr	r3, [pc, #516]	; (800382c <HAL_RCC_OscConfig+0x4f8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0f0      	beq.n	8003612 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d106      	bne.n	8003646 <HAL_RCC_OscConfig+0x312>
 8003638:	4b7b      	ldr	r3, [pc, #492]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	4a7a      	ldr	r2, [pc, #488]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	6213      	str	r3, [r2, #32]
 8003644:	e02d      	b.n	80036a2 <HAL_RCC_OscConfig+0x36e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10c      	bne.n	8003668 <HAL_RCC_OscConfig+0x334>
 800364e:	4b76      	ldr	r3, [pc, #472]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	4a75      	ldr	r2, [pc, #468]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 8003654:	f023 0301 	bic.w	r3, r3, #1
 8003658:	6213      	str	r3, [r2, #32]
 800365a:	4b73      	ldr	r3, [pc, #460]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	4a72      	ldr	r2, [pc, #456]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 8003660:	f023 0304 	bic.w	r3, r3, #4
 8003664:	6213      	str	r3, [r2, #32]
 8003666:	e01c      	b.n	80036a2 <HAL_RCC_OscConfig+0x36e>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	2b05      	cmp	r3, #5
 800366e:	d10c      	bne.n	800368a <HAL_RCC_OscConfig+0x356>
 8003670:	4b6d      	ldr	r3, [pc, #436]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	4a6c      	ldr	r2, [pc, #432]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 8003676:	f043 0304 	orr.w	r3, r3, #4
 800367a:	6213      	str	r3, [r2, #32]
 800367c:	4b6a      	ldr	r3, [pc, #424]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	4a69      	ldr	r2, [pc, #420]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	6213      	str	r3, [r2, #32]
 8003688:	e00b      	b.n	80036a2 <HAL_RCC_OscConfig+0x36e>
 800368a:	4b67      	ldr	r3, [pc, #412]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	4a66      	ldr	r2, [pc, #408]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 8003690:	f023 0301 	bic.w	r3, r3, #1
 8003694:	6213      	str	r3, [r2, #32]
 8003696:	4b64      	ldr	r3, [pc, #400]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	4a63      	ldr	r2, [pc, #396]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 800369c:	f023 0304 	bic.w	r3, r3, #4
 80036a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d015      	beq.n	80036d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036aa:	f7fe fb71 	bl	8001d90 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b0:	e00a      	b.n	80036c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7fe fb6d 	bl	8001d90 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e0ab      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c8:	4b57      	ldr	r3, [pc, #348]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0ee      	beq.n	80036b2 <HAL_RCC_OscConfig+0x37e>
 80036d4:	e014      	b.n	8003700 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d6:	f7fe fb5b 	bl	8001d90 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036dc:	e00a      	b.n	80036f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036de:	f7fe fb57 	bl	8001d90 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e095      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f4:	4b4c      	ldr	r3, [pc, #304]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1ee      	bne.n	80036de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003700:	7dfb      	ldrb	r3, [r7, #23]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d105      	bne.n	8003712 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003706:	4b48      	ldr	r3, [pc, #288]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	4a47      	ldr	r2, [pc, #284]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 800370c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003710:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 8081 	beq.w	800381e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800371c:	4b42      	ldr	r3, [pc, #264]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 030c 	and.w	r3, r3, #12
 8003724:	2b08      	cmp	r3, #8
 8003726:	d061      	beq.n	80037ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d146      	bne.n	80037be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003730:	4b3f      	ldr	r3, [pc, #252]	; (8003830 <HAL_RCC_OscConfig+0x4fc>)
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003736:	f7fe fb2b 	bl	8001d90 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373e:	f7fe fb27 	bl	8001d90 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e067      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003750:	4b35      	ldr	r3, [pc, #212]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1f0      	bne.n	800373e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003764:	d108      	bne.n	8003778 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003766:	4b30      	ldr	r3, [pc, #192]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	492d      	ldr	r1, [pc, #180]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 8003774:	4313      	orrs	r3, r2
 8003776:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003778:	4b2b      	ldr	r3, [pc, #172]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a19      	ldr	r1, [r3, #32]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	430b      	orrs	r3, r1
 800378a:	4927      	ldr	r1, [pc, #156]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 800378c:	4313      	orrs	r3, r2
 800378e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003790:	4b27      	ldr	r3, [pc, #156]	; (8003830 <HAL_RCC_OscConfig+0x4fc>)
 8003792:	2201      	movs	r2, #1
 8003794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003796:	f7fe fafb 	bl	8001d90 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800379e:	f7fe faf7 	bl	8001d90 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e037      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037b0:	4b1d      	ldr	r3, [pc, #116]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0f0      	beq.n	800379e <HAL_RCC_OscConfig+0x46a>
 80037bc:	e02f      	b.n	800381e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037be:	4b1c      	ldr	r3, [pc, #112]	; (8003830 <HAL_RCC_OscConfig+0x4fc>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c4:	f7fe fae4 	bl	8001d90 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037cc:	f7fe fae0 	bl	8001d90 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e020      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037de:	4b12      	ldr	r3, [pc, #72]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0x498>
 80037ea:	e018      	b.n	800381e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e013      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037f8:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <HAL_RCC_OscConfig+0x4f4>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	429a      	cmp	r2, r3
 800380a:	d106      	bne.n	800381a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003816:	429a      	cmp	r2, r3
 8003818:	d001      	beq.n	800381e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40021000 	.word	0x40021000
 800382c:	40007000 	.word	0x40007000
 8003830:	42420060 	.word	0x42420060

08003834 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0d0      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003848:	4b6a      	ldr	r3, [pc, #424]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d910      	bls.n	8003878 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003856:	4b67      	ldr	r3, [pc, #412]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 0207 	bic.w	r2, r3, #7
 800385e:	4965      	ldr	r1, [pc, #404]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003866:	4b63      	ldr	r3, [pc, #396]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d001      	beq.n	8003878 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e0b8      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d020      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003890:	4b59      	ldr	r3, [pc, #356]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4a58      	ldr	r2, [pc, #352]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003896:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800389a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038a8:	4b53      	ldr	r3, [pc, #332]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	4a52      	ldr	r2, [pc, #328]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b4:	4b50      	ldr	r3, [pc, #320]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	494d      	ldr	r1, [pc, #308]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d040      	beq.n	8003954 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d107      	bne.n	80038ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038da:	4b47      	ldr	r3, [pc, #284]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d115      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e07f      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d107      	bne.n	8003902 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f2:	4b41      	ldr	r3, [pc, #260]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d109      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e073      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003902:	4b3d      	ldr	r3, [pc, #244]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e06b      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003912:	4b39      	ldr	r3, [pc, #228]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f023 0203 	bic.w	r2, r3, #3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4936      	ldr	r1, [pc, #216]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	4313      	orrs	r3, r2
 8003922:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003924:	f7fe fa34 	bl	8001d90 <HAL_GetTick>
 8003928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392a:	e00a      	b.n	8003942 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800392c:	f7fe fa30 	bl	8001d90 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f241 3288 	movw	r2, #5000	; 0x1388
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e053      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003942:	4b2d      	ldr	r3, [pc, #180]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f003 020c 	and.w	r2, r3, #12
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	429a      	cmp	r2, r3
 8003952:	d1eb      	bne.n	800392c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003954:	4b27      	ldr	r3, [pc, #156]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d210      	bcs.n	8003984 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003962:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 0207 	bic.w	r2, r3, #7
 800396a:	4922      	ldr	r1, [pc, #136]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003972:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d001      	beq.n	8003984 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e032      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d008      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003990:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	4916      	ldr	r1, [pc, #88]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d009      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039ae:	4b12      	ldr	r3, [pc, #72]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	490e      	ldr	r1, [pc, #56]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039c2:	f000 f821 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 80039c6:	4602      	mov	r2, r0
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	091b      	lsrs	r3, r3, #4
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	490a      	ldr	r1, [pc, #40]	; (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80039d4:	5ccb      	ldrb	r3, [r1, r3]
 80039d6:	fa22 f303 	lsr.w	r3, r2, r3
 80039da:	4a09      	ldr	r2, [pc, #36]	; (8003a00 <HAL_RCC_ClockConfig+0x1cc>)
 80039dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039de:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <HAL_RCC_ClockConfig+0x1d0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fe f992 	bl	8001d0c <HAL_InitTick>

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40022000 	.word	0x40022000
 80039f8:	40021000 	.word	0x40021000
 80039fc:	08005160 	.word	0x08005160
 8003a00:	20000004 	.word	0x20000004
 8003a04:	20000008 	.word	0x20000008

08003a08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a08:	b490      	push	{r4, r7}
 8003a0a:	b08a      	sub	sp, #40	; 0x28
 8003a0c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a0e:	4b2a      	ldr	r3, [pc, #168]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a10:	1d3c      	adds	r4, r7, #4
 8003a12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a18:	f240 2301 	movw	r3, #513	; 0x201
 8003a1c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
 8003a22:	2300      	movs	r3, #0
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	2300      	movs	r3, #0
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a32:	4b22      	ldr	r3, [pc, #136]	; (8003abc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d002      	beq.n	8003a48 <HAL_RCC_GetSysClockFreq+0x40>
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d003      	beq.n	8003a4e <HAL_RCC_GetSysClockFreq+0x46>
 8003a46:	e02d      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a48:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a4a:	623b      	str	r3, [r7, #32]
      break;
 8003a4c:	e02d      	b.n	8003aaa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	0c9b      	lsrs	r3, r3, #18
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a60:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d013      	beq.n	8003a94 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a6c:	4b13      	ldr	r3, [pc, #76]	; (8003abc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	0c5b      	lsrs	r3, r3, #17
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a80:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	4a0e      	ldr	r2, [pc, #56]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a86:	fb02 f203 	mul.w	r2, r2, r3
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
 8003a92:	e004      	b.n	8003a9e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	4a0b      	ldr	r2, [pc, #44]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a98:	fb02 f303 	mul.w	r3, r2, r3
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	623b      	str	r3, [r7, #32]
      break;
 8003aa2:	e002      	b.n	8003aaa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aa6:	623b      	str	r3, [r7, #32]
      break;
 8003aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3728      	adds	r7, #40	; 0x28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc90      	pop	{r4, r7}
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	08005150 	.word	0x08005150
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	007a1200 	.word	0x007a1200
 8003ac4:	003d0900 	.word	0x003d0900

08003ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003acc:	4b02      	ldr	r3, [pc, #8]	; (8003ad8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ace:	681b      	ldr	r3, [r3, #0]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr
 8003ad8:	20000004 	.word	0x20000004

08003adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ae0:	f7ff fff2 	bl	8003ac8 <HAL_RCC_GetHCLKFreq>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	4b05      	ldr	r3, [pc, #20]	; (8003afc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	0a1b      	lsrs	r3, r3, #8
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	4903      	ldr	r1, [pc, #12]	; (8003b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003af2:	5ccb      	ldrb	r3, [r1, r3]
 8003af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40021000 	.word	0x40021000
 8003b00:	08005170 	.word	0x08005170

08003b04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <RCC_Delay+0x34>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a0a      	ldr	r2, [pc, #40]	; (8003b3c <RCC_Delay+0x38>)
 8003b12:	fba2 2303 	umull	r2, r3, r2, r3
 8003b16:	0a5b      	lsrs	r3, r3, #9
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	fb02 f303 	mul.w	r3, r2, r3
 8003b1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b20:	bf00      	nop
  }
  while (Delay --);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	1e5a      	subs	r2, r3, #1
 8003b26:	60fa      	str	r2, [r7, #12]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1f9      	bne.n	8003b20 <RCC_Delay+0x1c>
}
 8003b2c:	bf00      	nop
 8003b2e:	bf00      	nop
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr
 8003b38:	20000004 	.word	0x20000004
 8003b3c:	10624dd3 	.word	0x10624dd3

08003b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d07d      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b60:	4b4f      	ldr	r3, [pc, #316]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10d      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b6c:	4b4c      	ldr	r3, [pc, #304]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	4a4b      	ldr	r2, [pc, #300]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b76:	61d3      	str	r3, [r2, #28]
 8003b78:	4b49      	ldr	r3, [pc, #292]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b84:	2301      	movs	r3, #1
 8003b86:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b88:	4b46      	ldr	r3, [pc, #280]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d118      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b94:	4b43      	ldr	r3, [pc, #268]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a42      	ldr	r2, [pc, #264]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ba0:	f7fe f8f6 	bl	8001d90 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba6:	e008      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba8:	f7fe f8f2 	bl	8001d90 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b64      	cmp	r3, #100	; 0x64
 8003bb4:	d901      	bls.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e06d      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bba:	4b3a      	ldr	r3, [pc, #232]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0f0      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bc6:	4b36      	ldr	r3, [pc, #216]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d02e      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d027      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003be4:	4b2e      	ldr	r3, [pc, #184]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bee:	4b2e      	ldr	r3, [pc, #184]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bf4:	4b2c      	ldr	r3, [pc, #176]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bfa:	4a29      	ldr	r2, [pc, #164]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d014      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0a:	f7fe f8c1 	bl	8001d90 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c10:	e00a      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c12:	f7fe f8bd 	bl	8001d90 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e036      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c28:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0ee      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c34:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	4917      	ldr	r1, [pc, #92]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c46:	7dfb      	ldrb	r3, [r7, #23]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d105      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c4c:	4b14      	ldr	r3, [pc, #80]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	4a13      	ldr	r2, [pc, #76]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d008      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c64:	4b0e      	ldr	r3, [pc, #56]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	490b      	ldr	r1, [pc, #44]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0310 	and.w	r3, r3, #16
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d008      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c82:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	4904      	ldr	r1, [pc, #16]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	40007000 	.word	0x40007000
 8003ca8:	42420440 	.word	0x42420440

08003cac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e041      	b.n	8003d42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d106      	bne.n	8003cd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7fd ff2c 	bl	8001b30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4610      	mov	r0, r2
 8003cec:	f000 fa98 	bl	8004220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d001      	beq.n	8003d64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e035      	b.n	8003dd0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0201 	orr.w	r2, r2, #1
 8003d7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a16      	ldr	r2, [pc, #88]	; (8003ddc <HAL_TIM_Base_Start_IT+0x90>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d009      	beq.n	8003d9a <HAL_TIM_Base_Start_IT+0x4e>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8e:	d004      	beq.n	8003d9a <HAL_TIM_Base_Start_IT+0x4e>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a12      	ldr	r2, [pc, #72]	; (8003de0 <HAL_TIM_Base_Start_IT+0x94>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d111      	bne.n	8003dbe <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2b06      	cmp	r3, #6
 8003daa:	d010      	beq.n	8003dce <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dbc:	e007      	b.n	8003dce <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0201 	orr.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bc80      	pop	{r7}
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40012c00 	.word	0x40012c00
 8003de0:	40000400 	.word	0x40000400

08003de4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0201 	bic.w	r2, r2, #1
 8003dfa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6a1a      	ldr	r2, [r3, #32]
 8003e02:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10f      	bne.n	8003e2c <HAL_TIM_Base_Stop_IT+0x48>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6a1a      	ldr	r2, [r3, #32]
 8003e12:	f240 4344 	movw	r3, #1092	; 0x444
 8003e16:	4013      	ands	r3, r2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d107      	bne.n	8003e2c <HAL_TIM_Base_Stop_IT+0x48>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0201 	bic.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr

08003e40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d122      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d11b      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0202 	mvn.w	r2, #2
 8003e6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f9b1 	bl	80041ea <HAL_TIM_IC_CaptureCallback>
 8003e88:	e005      	b.n	8003e96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f9a4 	bl	80041d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f9b3 	bl	80041fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d122      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d11b      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f06f 0204 	mvn.w	r2, #4
 8003ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f987 	bl	80041ea <HAL_TIM_IC_CaptureCallback>
 8003edc:	e005      	b.n	8003eea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f97a 	bl	80041d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f989 	bl	80041fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d122      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d11b      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f06f 0208 	mvn.w	r2, #8
 8003f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2204      	movs	r2, #4
 8003f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f95d 	bl	80041ea <HAL_TIM_IC_CaptureCallback>
 8003f30:	e005      	b.n	8003f3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f950 	bl	80041d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f95f 	bl	80041fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b10      	cmp	r3, #16
 8003f50:	d122      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f003 0310 	and.w	r3, r3, #16
 8003f5c:	2b10      	cmp	r3, #16
 8003f5e:	d11b      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0210 	mvn.w	r2, #16
 8003f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2208      	movs	r2, #8
 8003f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f933 	bl	80041ea <HAL_TIM_IC_CaptureCallback>
 8003f84:	e005      	b.n	8003f92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f926 	bl	80041d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f935 	bl	80041fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d10e      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d107      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f06f 0201 	mvn.w	r2, #1
 8003fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fd fc5e 	bl	8001880 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fce:	2b80      	cmp	r3, #128	; 0x80
 8003fd0:	d10e      	bne.n	8003ff0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fdc:	2b80      	cmp	r3, #128	; 0x80
 8003fde:	d107      	bne.n	8003ff0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fa67 	bl	80044be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffa:	2b40      	cmp	r3, #64	; 0x40
 8003ffc:	d10e      	bne.n	800401c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004008:	2b40      	cmp	r3, #64	; 0x40
 800400a:	d107      	bne.n	800401c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f8f9 	bl	800420e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f003 0320 	and.w	r3, r3, #32
 8004026:	2b20      	cmp	r3, #32
 8004028:	d10e      	bne.n	8004048 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b20      	cmp	r3, #32
 8004036:	d107      	bne.n	8004048 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f06f 0220 	mvn.w	r2, #32
 8004040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fa32 	bl	80044ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004048:	bf00      	nop
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_TIM_ConfigClockSource+0x18>
 8004064:	2302      	movs	r3, #2
 8004066:	e0b3      	b.n	80041d0 <HAL_TIM_ConfigClockSource+0x180>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004086:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800408e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a0:	d03e      	beq.n	8004120 <HAL_TIM_ConfigClockSource+0xd0>
 80040a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a6:	f200 8087 	bhi.w	80041b8 <HAL_TIM_ConfigClockSource+0x168>
 80040aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ae:	f000 8085 	beq.w	80041bc <HAL_TIM_ConfigClockSource+0x16c>
 80040b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b6:	d87f      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x168>
 80040b8:	2b70      	cmp	r3, #112	; 0x70
 80040ba:	d01a      	beq.n	80040f2 <HAL_TIM_ConfigClockSource+0xa2>
 80040bc:	2b70      	cmp	r3, #112	; 0x70
 80040be:	d87b      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x168>
 80040c0:	2b60      	cmp	r3, #96	; 0x60
 80040c2:	d050      	beq.n	8004166 <HAL_TIM_ConfigClockSource+0x116>
 80040c4:	2b60      	cmp	r3, #96	; 0x60
 80040c6:	d877      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x168>
 80040c8:	2b50      	cmp	r3, #80	; 0x50
 80040ca:	d03c      	beq.n	8004146 <HAL_TIM_ConfigClockSource+0xf6>
 80040cc:	2b50      	cmp	r3, #80	; 0x50
 80040ce:	d873      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x168>
 80040d0:	2b40      	cmp	r3, #64	; 0x40
 80040d2:	d058      	beq.n	8004186 <HAL_TIM_ConfigClockSource+0x136>
 80040d4:	2b40      	cmp	r3, #64	; 0x40
 80040d6:	d86f      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x168>
 80040d8:	2b30      	cmp	r3, #48	; 0x30
 80040da:	d064      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0x156>
 80040dc:	2b30      	cmp	r3, #48	; 0x30
 80040de:	d86b      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x168>
 80040e0:	2b20      	cmp	r3, #32
 80040e2:	d060      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0x156>
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	d867      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x168>
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d05c      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0x156>
 80040ec:	2b10      	cmp	r3, #16
 80040ee:	d05a      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80040f0:	e062      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6818      	ldr	r0, [r3, #0]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	6899      	ldr	r1, [r3, #8]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f000 f95c 	bl	80043be <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004114:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	609a      	str	r2, [r3, #8]
      break;
 800411e:	e04e      	b.n	80041be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	6899      	ldr	r1, [r3, #8]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f000 f945 	bl	80043be <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004142:	609a      	str	r2, [r3, #8]
      break;
 8004144:	e03b      	b.n	80041be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6818      	ldr	r0, [r3, #0]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	6859      	ldr	r1, [r3, #4]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	461a      	mov	r2, r3
 8004154:	f000 f8bc 	bl	80042d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2150      	movs	r1, #80	; 0x50
 800415e:	4618      	mov	r0, r3
 8004160:	f000 f913 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 8004164:	e02b      	b.n	80041be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	6859      	ldr	r1, [r3, #4]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	461a      	mov	r2, r3
 8004174:	f000 f8da 	bl	800432c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2160      	movs	r1, #96	; 0x60
 800417e:	4618      	mov	r0, r3
 8004180:	f000 f903 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 8004184:	e01b      	b.n	80041be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	6859      	ldr	r1, [r3, #4]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	461a      	mov	r2, r3
 8004194:	f000 f89c 	bl	80042d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2140      	movs	r1, #64	; 0x40
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 f8f3 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 80041a4:	e00b      	b.n	80041be <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4619      	mov	r1, r3
 80041b0:	4610      	mov	r0, r2
 80041b2:	f000 f8ea 	bl	800438a <TIM_ITRx_SetConfig>
        break;
 80041b6:	e002      	b.n	80041be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80041b8:	bf00      	nop
 80041ba:	e000      	b.n	80041be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80041bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bc80      	pop	{r7}
 80041e8:	4770      	bx	lr

080041ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bc80      	pop	{r7}
 80041fa:	4770      	bx	lr

080041fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	bc80      	pop	{r7}
 800420c:	4770      	bx	lr

0800420e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr

08004220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a25      	ldr	r2, [pc, #148]	; (80042c8 <TIM_Base_SetConfig+0xa8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d007      	beq.n	8004248 <TIM_Base_SetConfig+0x28>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423e:	d003      	beq.n	8004248 <TIM_Base_SetConfig+0x28>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a22      	ldr	r2, [pc, #136]	; (80042cc <TIM_Base_SetConfig+0xac>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d108      	bne.n	800425a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a1a      	ldr	r2, [pc, #104]	; (80042c8 <TIM_Base_SetConfig+0xa8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d007      	beq.n	8004272 <TIM_Base_SetConfig+0x52>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004268:	d003      	beq.n	8004272 <TIM_Base_SetConfig+0x52>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a17      	ldr	r2, [pc, #92]	; (80042cc <TIM_Base_SetConfig+0xac>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d108      	bne.n	8004284 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	4313      	orrs	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a07      	ldr	r2, [pc, #28]	; (80042c8 <TIM_Base_SetConfig+0xa8>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d103      	bne.n	80042b8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	615a      	str	r2, [r3, #20]
}
 80042be:	bf00      	nop
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr
 80042c8:	40012c00 	.word	0x40012c00
 80042cc:	40000400 	.word	0x40000400

080042d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b087      	sub	sp, #28
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	f023 0201 	bic.w	r2, r3, #1
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f023 030a 	bic.w	r3, r3, #10
 800430c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4313      	orrs	r3, r2
 8004314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	621a      	str	r2, [r3, #32]
}
 8004322:	bf00      	nop
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr

0800432c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	f023 0210 	bic.w	r2, r3, #16
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004356:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	031b      	lsls	r3, r3, #12
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004368:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	621a      	str	r2, [r3, #32]
}
 8004380:	bf00      	nop
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr

0800438a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800438a:	b480      	push	{r7}
 800438c:	b085      	sub	sp, #20
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f043 0307 	orr.w	r3, r3, #7
 80043ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	609a      	str	r2, [r3, #8]
}
 80043b4:	bf00      	nop
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr

080043be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043be:	b480      	push	{r7}
 80043c0:	b087      	sub	sp, #28
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
 80043ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	021a      	lsls	r2, r3, #8
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	431a      	orrs	r2, r3
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	609a      	str	r2, [r3, #8]
}
 80043f2:	bf00      	nop
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bc80      	pop	{r7}
 80043fa:	4770      	bx	lr

080043fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800440c:	2b01      	cmp	r3, #1
 800440e:	d101      	bne.n	8004414 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004410:	2302      	movs	r3, #2
 8004412:	e041      	b.n	8004498 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a14      	ldr	r2, [pc, #80]	; (80044a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d009      	beq.n	800446c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004460:	d004      	beq.n	800446c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a10      	ldr	r2, [pc, #64]	; (80044a8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d10c      	bne.n	8004486 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004472:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	4313      	orrs	r3, r2
 800447c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	40012c00 	.word	0x40012c00
 80044a8:	40000400 	.word	0x40000400

080044ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bc80      	pop	{r7}
 80044bc:	4770      	bx	lr

080044be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr

080044d0 <__errno>:
 80044d0:	4b01      	ldr	r3, [pc, #4]	; (80044d8 <__errno+0x8>)
 80044d2:	6818      	ldr	r0, [r3, #0]
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	20000010 	.word	0x20000010

080044dc <__libc_init_array>:
 80044dc:	b570      	push	{r4, r5, r6, lr}
 80044de:	2600      	movs	r6, #0
 80044e0:	4d0c      	ldr	r5, [pc, #48]	; (8004514 <__libc_init_array+0x38>)
 80044e2:	4c0d      	ldr	r4, [pc, #52]	; (8004518 <__libc_init_array+0x3c>)
 80044e4:	1b64      	subs	r4, r4, r5
 80044e6:	10a4      	asrs	r4, r4, #2
 80044e8:	42a6      	cmp	r6, r4
 80044ea:	d109      	bne.n	8004500 <__libc_init_array+0x24>
 80044ec:	f000 fc5c 	bl	8004da8 <_init>
 80044f0:	2600      	movs	r6, #0
 80044f2:	4d0a      	ldr	r5, [pc, #40]	; (800451c <__libc_init_array+0x40>)
 80044f4:	4c0a      	ldr	r4, [pc, #40]	; (8004520 <__libc_init_array+0x44>)
 80044f6:	1b64      	subs	r4, r4, r5
 80044f8:	10a4      	asrs	r4, r4, #2
 80044fa:	42a6      	cmp	r6, r4
 80044fc:	d105      	bne.n	800450a <__libc_init_array+0x2e>
 80044fe:	bd70      	pop	{r4, r5, r6, pc}
 8004500:	f855 3b04 	ldr.w	r3, [r5], #4
 8004504:	4798      	blx	r3
 8004506:	3601      	adds	r6, #1
 8004508:	e7ee      	b.n	80044e8 <__libc_init_array+0xc>
 800450a:	f855 3b04 	ldr.w	r3, [r5], #4
 800450e:	4798      	blx	r3
 8004510:	3601      	adds	r6, #1
 8004512:	e7f2      	b.n	80044fa <__libc_init_array+0x1e>
 8004514:	080051ac 	.word	0x080051ac
 8004518:	080051ac 	.word	0x080051ac
 800451c:	080051ac 	.word	0x080051ac
 8004520:	080051b0 	.word	0x080051b0

08004524 <memset>:
 8004524:	4603      	mov	r3, r0
 8004526:	4402      	add	r2, r0
 8004528:	4293      	cmp	r3, r2
 800452a:	d100      	bne.n	800452e <memset+0xa>
 800452c:	4770      	bx	lr
 800452e:	f803 1b01 	strb.w	r1, [r3], #1
 8004532:	e7f9      	b.n	8004528 <memset+0x4>

08004534 <siprintf>:
 8004534:	b40e      	push	{r1, r2, r3}
 8004536:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800453a:	b500      	push	{lr}
 800453c:	b09c      	sub	sp, #112	; 0x70
 800453e:	ab1d      	add	r3, sp, #116	; 0x74
 8004540:	9002      	str	r0, [sp, #8]
 8004542:	9006      	str	r0, [sp, #24]
 8004544:	9107      	str	r1, [sp, #28]
 8004546:	9104      	str	r1, [sp, #16]
 8004548:	4808      	ldr	r0, [pc, #32]	; (800456c <siprintf+0x38>)
 800454a:	4909      	ldr	r1, [pc, #36]	; (8004570 <siprintf+0x3c>)
 800454c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004550:	9105      	str	r1, [sp, #20]
 8004552:	6800      	ldr	r0, [r0, #0]
 8004554:	a902      	add	r1, sp, #8
 8004556:	9301      	str	r3, [sp, #4]
 8004558:	f000 f868 	bl	800462c <_svfiprintf_r>
 800455c:	2200      	movs	r2, #0
 800455e:	9b02      	ldr	r3, [sp, #8]
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	b01c      	add	sp, #112	; 0x70
 8004564:	f85d eb04 	ldr.w	lr, [sp], #4
 8004568:	b003      	add	sp, #12
 800456a:	4770      	bx	lr
 800456c:	20000010 	.word	0x20000010
 8004570:	ffff0208 	.word	0xffff0208

08004574 <__ssputs_r>:
 8004574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004578:	688e      	ldr	r6, [r1, #8]
 800457a:	4682      	mov	sl, r0
 800457c:	429e      	cmp	r6, r3
 800457e:	460c      	mov	r4, r1
 8004580:	4690      	mov	r8, r2
 8004582:	461f      	mov	r7, r3
 8004584:	d838      	bhi.n	80045f8 <__ssputs_r+0x84>
 8004586:	898a      	ldrh	r2, [r1, #12]
 8004588:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800458c:	d032      	beq.n	80045f4 <__ssputs_r+0x80>
 800458e:	6825      	ldr	r5, [r4, #0]
 8004590:	6909      	ldr	r1, [r1, #16]
 8004592:	3301      	adds	r3, #1
 8004594:	eba5 0901 	sub.w	r9, r5, r1
 8004598:	6965      	ldr	r5, [r4, #20]
 800459a:	444b      	add	r3, r9
 800459c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045a4:	106d      	asrs	r5, r5, #1
 80045a6:	429d      	cmp	r5, r3
 80045a8:	bf38      	it	cc
 80045aa:	461d      	movcc	r5, r3
 80045ac:	0553      	lsls	r3, r2, #21
 80045ae:	d531      	bpl.n	8004614 <__ssputs_r+0xa0>
 80045b0:	4629      	mov	r1, r5
 80045b2:	f000 fb53 	bl	8004c5c <_malloc_r>
 80045b6:	4606      	mov	r6, r0
 80045b8:	b950      	cbnz	r0, 80045d0 <__ssputs_r+0x5c>
 80045ba:	230c      	movs	r3, #12
 80045bc:	f04f 30ff 	mov.w	r0, #4294967295
 80045c0:	f8ca 3000 	str.w	r3, [sl]
 80045c4:	89a3      	ldrh	r3, [r4, #12]
 80045c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045ca:	81a3      	strh	r3, [r4, #12]
 80045cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045d0:	464a      	mov	r2, r9
 80045d2:	6921      	ldr	r1, [r4, #16]
 80045d4:	f000 face 	bl	8004b74 <memcpy>
 80045d8:	89a3      	ldrh	r3, [r4, #12]
 80045da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e2:	81a3      	strh	r3, [r4, #12]
 80045e4:	6126      	str	r6, [r4, #16]
 80045e6:	444e      	add	r6, r9
 80045e8:	6026      	str	r6, [r4, #0]
 80045ea:	463e      	mov	r6, r7
 80045ec:	6165      	str	r5, [r4, #20]
 80045ee:	eba5 0509 	sub.w	r5, r5, r9
 80045f2:	60a5      	str	r5, [r4, #8]
 80045f4:	42be      	cmp	r6, r7
 80045f6:	d900      	bls.n	80045fa <__ssputs_r+0x86>
 80045f8:	463e      	mov	r6, r7
 80045fa:	4632      	mov	r2, r6
 80045fc:	4641      	mov	r1, r8
 80045fe:	6820      	ldr	r0, [r4, #0]
 8004600:	f000 fac6 	bl	8004b90 <memmove>
 8004604:	68a3      	ldr	r3, [r4, #8]
 8004606:	6822      	ldr	r2, [r4, #0]
 8004608:	1b9b      	subs	r3, r3, r6
 800460a:	4432      	add	r2, r6
 800460c:	2000      	movs	r0, #0
 800460e:	60a3      	str	r3, [r4, #8]
 8004610:	6022      	str	r2, [r4, #0]
 8004612:	e7db      	b.n	80045cc <__ssputs_r+0x58>
 8004614:	462a      	mov	r2, r5
 8004616:	f000 fb7b 	bl	8004d10 <_realloc_r>
 800461a:	4606      	mov	r6, r0
 800461c:	2800      	cmp	r0, #0
 800461e:	d1e1      	bne.n	80045e4 <__ssputs_r+0x70>
 8004620:	4650      	mov	r0, sl
 8004622:	6921      	ldr	r1, [r4, #16]
 8004624:	f000 face 	bl	8004bc4 <_free_r>
 8004628:	e7c7      	b.n	80045ba <__ssputs_r+0x46>
	...

0800462c <_svfiprintf_r>:
 800462c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004630:	4698      	mov	r8, r3
 8004632:	898b      	ldrh	r3, [r1, #12]
 8004634:	4607      	mov	r7, r0
 8004636:	061b      	lsls	r3, r3, #24
 8004638:	460d      	mov	r5, r1
 800463a:	4614      	mov	r4, r2
 800463c:	b09d      	sub	sp, #116	; 0x74
 800463e:	d50e      	bpl.n	800465e <_svfiprintf_r+0x32>
 8004640:	690b      	ldr	r3, [r1, #16]
 8004642:	b963      	cbnz	r3, 800465e <_svfiprintf_r+0x32>
 8004644:	2140      	movs	r1, #64	; 0x40
 8004646:	f000 fb09 	bl	8004c5c <_malloc_r>
 800464a:	6028      	str	r0, [r5, #0]
 800464c:	6128      	str	r0, [r5, #16]
 800464e:	b920      	cbnz	r0, 800465a <_svfiprintf_r+0x2e>
 8004650:	230c      	movs	r3, #12
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	f04f 30ff 	mov.w	r0, #4294967295
 8004658:	e0d1      	b.n	80047fe <_svfiprintf_r+0x1d2>
 800465a:	2340      	movs	r3, #64	; 0x40
 800465c:	616b      	str	r3, [r5, #20]
 800465e:	2300      	movs	r3, #0
 8004660:	9309      	str	r3, [sp, #36]	; 0x24
 8004662:	2320      	movs	r3, #32
 8004664:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004668:	2330      	movs	r3, #48	; 0x30
 800466a:	f04f 0901 	mov.w	r9, #1
 800466e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004672:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004818 <_svfiprintf_r+0x1ec>
 8004676:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800467a:	4623      	mov	r3, r4
 800467c:	469a      	mov	sl, r3
 800467e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004682:	b10a      	cbz	r2, 8004688 <_svfiprintf_r+0x5c>
 8004684:	2a25      	cmp	r2, #37	; 0x25
 8004686:	d1f9      	bne.n	800467c <_svfiprintf_r+0x50>
 8004688:	ebba 0b04 	subs.w	fp, sl, r4
 800468c:	d00b      	beq.n	80046a6 <_svfiprintf_r+0x7a>
 800468e:	465b      	mov	r3, fp
 8004690:	4622      	mov	r2, r4
 8004692:	4629      	mov	r1, r5
 8004694:	4638      	mov	r0, r7
 8004696:	f7ff ff6d 	bl	8004574 <__ssputs_r>
 800469a:	3001      	adds	r0, #1
 800469c:	f000 80aa 	beq.w	80047f4 <_svfiprintf_r+0x1c8>
 80046a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046a2:	445a      	add	r2, fp
 80046a4:	9209      	str	r2, [sp, #36]	; 0x24
 80046a6:	f89a 3000 	ldrb.w	r3, [sl]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 80a2 	beq.w	80047f4 <_svfiprintf_r+0x1c8>
 80046b0:	2300      	movs	r3, #0
 80046b2:	f04f 32ff 	mov.w	r2, #4294967295
 80046b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046ba:	f10a 0a01 	add.w	sl, sl, #1
 80046be:	9304      	str	r3, [sp, #16]
 80046c0:	9307      	str	r3, [sp, #28]
 80046c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046c6:	931a      	str	r3, [sp, #104]	; 0x68
 80046c8:	4654      	mov	r4, sl
 80046ca:	2205      	movs	r2, #5
 80046cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046d0:	4851      	ldr	r0, [pc, #324]	; (8004818 <_svfiprintf_r+0x1ec>)
 80046d2:	f000 fa41 	bl	8004b58 <memchr>
 80046d6:	9a04      	ldr	r2, [sp, #16]
 80046d8:	b9d8      	cbnz	r0, 8004712 <_svfiprintf_r+0xe6>
 80046da:	06d0      	lsls	r0, r2, #27
 80046dc:	bf44      	itt	mi
 80046de:	2320      	movmi	r3, #32
 80046e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046e4:	0711      	lsls	r1, r2, #28
 80046e6:	bf44      	itt	mi
 80046e8:	232b      	movmi	r3, #43	; 0x2b
 80046ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046ee:	f89a 3000 	ldrb.w	r3, [sl]
 80046f2:	2b2a      	cmp	r3, #42	; 0x2a
 80046f4:	d015      	beq.n	8004722 <_svfiprintf_r+0xf6>
 80046f6:	4654      	mov	r4, sl
 80046f8:	2000      	movs	r0, #0
 80046fa:	f04f 0c0a 	mov.w	ip, #10
 80046fe:	9a07      	ldr	r2, [sp, #28]
 8004700:	4621      	mov	r1, r4
 8004702:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004706:	3b30      	subs	r3, #48	; 0x30
 8004708:	2b09      	cmp	r3, #9
 800470a:	d94e      	bls.n	80047aa <_svfiprintf_r+0x17e>
 800470c:	b1b0      	cbz	r0, 800473c <_svfiprintf_r+0x110>
 800470e:	9207      	str	r2, [sp, #28]
 8004710:	e014      	b.n	800473c <_svfiprintf_r+0x110>
 8004712:	eba0 0308 	sub.w	r3, r0, r8
 8004716:	fa09 f303 	lsl.w	r3, r9, r3
 800471a:	4313      	orrs	r3, r2
 800471c:	46a2      	mov	sl, r4
 800471e:	9304      	str	r3, [sp, #16]
 8004720:	e7d2      	b.n	80046c8 <_svfiprintf_r+0x9c>
 8004722:	9b03      	ldr	r3, [sp, #12]
 8004724:	1d19      	adds	r1, r3, #4
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	9103      	str	r1, [sp, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	bfbb      	ittet	lt
 800472e:	425b      	neglt	r3, r3
 8004730:	f042 0202 	orrlt.w	r2, r2, #2
 8004734:	9307      	strge	r3, [sp, #28]
 8004736:	9307      	strlt	r3, [sp, #28]
 8004738:	bfb8      	it	lt
 800473a:	9204      	strlt	r2, [sp, #16]
 800473c:	7823      	ldrb	r3, [r4, #0]
 800473e:	2b2e      	cmp	r3, #46	; 0x2e
 8004740:	d10c      	bne.n	800475c <_svfiprintf_r+0x130>
 8004742:	7863      	ldrb	r3, [r4, #1]
 8004744:	2b2a      	cmp	r3, #42	; 0x2a
 8004746:	d135      	bne.n	80047b4 <_svfiprintf_r+0x188>
 8004748:	9b03      	ldr	r3, [sp, #12]
 800474a:	3402      	adds	r4, #2
 800474c:	1d1a      	adds	r2, r3, #4
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	9203      	str	r2, [sp, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	bfb8      	it	lt
 8004756:	f04f 33ff 	movlt.w	r3, #4294967295
 800475a:	9305      	str	r3, [sp, #20]
 800475c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004828 <_svfiprintf_r+0x1fc>
 8004760:	2203      	movs	r2, #3
 8004762:	4650      	mov	r0, sl
 8004764:	7821      	ldrb	r1, [r4, #0]
 8004766:	f000 f9f7 	bl	8004b58 <memchr>
 800476a:	b140      	cbz	r0, 800477e <_svfiprintf_r+0x152>
 800476c:	2340      	movs	r3, #64	; 0x40
 800476e:	eba0 000a 	sub.w	r0, r0, sl
 8004772:	fa03 f000 	lsl.w	r0, r3, r0
 8004776:	9b04      	ldr	r3, [sp, #16]
 8004778:	3401      	adds	r4, #1
 800477a:	4303      	orrs	r3, r0
 800477c:	9304      	str	r3, [sp, #16]
 800477e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004782:	2206      	movs	r2, #6
 8004784:	4825      	ldr	r0, [pc, #148]	; (800481c <_svfiprintf_r+0x1f0>)
 8004786:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800478a:	f000 f9e5 	bl	8004b58 <memchr>
 800478e:	2800      	cmp	r0, #0
 8004790:	d038      	beq.n	8004804 <_svfiprintf_r+0x1d8>
 8004792:	4b23      	ldr	r3, [pc, #140]	; (8004820 <_svfiprintf_r+0x1f4>)
 8004794:	bb1b      	cbnz	r3, 80047de <_svfiprintf_r+0x1b2>
 8004796:	9b03      	ldr	r3, [sp, #12]
 8004798:	3307      	adds	r3, #7
 800479a:	f023 0307 	bic.w	r3, r3, #7
 800479e:	3308      	adds	r3, #8
 80047a0:	9303      	str	r3, [sp, #12]
 80047a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047a4:	4433      	add	r3, r6
 80047a6:	9309      	str	r3, [sp, #36]	; 0x24
 80047a8:	e767      	b.n	800467a <_svfiprintf_r+0x4e>
 80047aa:	460c      	mov	r4, r1
 80047ac:	2001      	movs	r0, #1
 80047ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80047b2:	e7a5      	b.n	8004700 <_svfiprintf_r+0xd4>
 80047b4:	2300      	movs	r3, #0
 80047b6:	f04f 0c0a 	mov.w	ip, #10
 80047ba:	4619      	mov	r1, r3
 80047bc:	3401      	adds	r4, #1
 80047be:	9305      	str	r3, [sp, #20]
 80047c0:	4620      	mov	r0, r4
 80047c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047c6:	3a30      	subs	r2, #48	; 0x30
 80047c8:	2a09      	cmp	r2, #9
 80047ca:	d903      	bls.n	80047d4 <_svfiprintf_r+0x1a8>
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0c5      	beq.n	800475c <_svfiprintf_r+0x130>
 80047d0:	9105      	str	r1, [sp, #20]
 80047d2:	e7c3      	b.n	800475c <_svfiprintf_r+0x130>
 80047d4:	4604      	mov	r4, r0
 80047d6:	2301      	movs	r3, #1
 80047d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80047dc:	e7f0      	b.n	80047c0 <_svfiprintf_r+0x194>
 80047de:	ab03      	add	r3, sp, #12
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	462a      	mov	r2, r5
 80047e4:	4638      	mov	r0, r7
 80047e6:	4b0f      	ldr	r3, [pc, #60]	; (8004824 <_svfiprintf_r+0x1f8>)
 80047e8:	a904      	add	r1, sp, #16
 80047ea:	f3af 8000 	nop.w
 80047ee:	1c42      	adds	r2, r0, #1
 80047f0:	4606      	mov	r6, r0
 80047f2:	d1d6      	bne.n	80047a2 <_svfiprintf_r+0x176>
 80047f4:	89ab      	ldrh	r3, [r5, #12]
 80047f6:	065b      	lsls	r3, r3, #25
 80047f8:	f53f af2c 	bmi.w	8004654 <_svfiprintf_r+0x28>
 80047fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047fe:	b01d      	add	sp, #116	; 0x74
 8004800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004804:	ab03      	add	r3, sp, #12
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	462a      	mov	r2, r5
 800480a:	4638      	mov	r0, r7
 800480c:	4b05      	ldr	r3, [pc, #20]	; (8004824 <_svfiprintf_r+0x1f8>)
 800480e:	a904      	add	r1, sp, #16
 8004810:	f000 f87c 	bl	800490c <_printf_i>
 8004814:	e7eb      	b.n	80047ee <_svfiprintf_r+0x1c2>
 8004816:	bf00      	nop
 8004818:	08005178 	.word	0x08005178
 800481c:	08005182 	.word	0x08005182
 8004820:	00000000 	.word	0x00000000
 8004824:	08004575 	.word	0x08004575
 8004828:	0800517e 	.word	0x0800517e

0800482c <_printf_common>:
 800482c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004830:	4616      	mov	r6, r2
 8004832:	4699      	mov	r9, r3
 8004834:	688a      	ldr	r2, [r1, #8]
 8004836:	690b      	ldr	r3, [r1, #16]
 8004838:	4607      	mov	r7, r0
 800483a:	4293      	cmp	r3, r2
 800483c:	bfb8      	it	lt
 800483e:	4613      	movlt	r3, r2
 8004840:	6033      	str	r3, [r6, #0]
 8004842:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004846:	460c      	mov	r4, r1
 8004848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800484c:	b10a      	cbz	r2, 8004852 <_printf_common+0x26>
 800484e:	3301      	adds	r3, #1
 8004850:	6033      	str	r3, [r6, #0]
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	0699      	lsls	r1, r3, #26
 8004856:	bf42      	ittt	mi
 8004858:	6833      	ldrmi	r3, [r6, #0]
 800485a:	3302      	addmi	r3, #2
 800485c:	6033      	strmi	r3, [r6, #0]
 800485e:	6825      	ldr	r5, [r4, #0]
 8004860:	f015 0506 	ands.w	r5, r5, #6
 8004864:	d106      	bne.n	8004874 <_printf_common+0x48>
 8004866:	f104 0a19 	add.w	sl, r4, #25
 800486a:	68e3      	ldr	r3, [r4, #12]
 800486c:	6832      	ldr	r2, [r6, #0]
 800486e:	1a9b      	subs	r3, r3, r2
 8004870:	42ab      	cmp	r3, r5
 8004872:	dc28      	bgt.n	80048c6 <_printf_common+0x9a>
 8004874:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004878:	1e13      	subs	r3, r2, #0
 800487a:	6822      	ldr	r2, [r4, #0]
 800487c:	bf18      	it	ne
 800487e:	2301      	movne	r3, #1
 8004880:	0692      	lsls	r2, r2, #26
 8004882:	d42d      	bmi.n	80048e0 <_printf_common+0xb4>
 8004884:	4649      	mov	r1, r9
 8004886:	4638      	mov	r0, r7
 8004888:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800488c:	47c0      	blx	r8
 800488e:	3001      	adds	r0, #1
 8004890:	d020      	beq.n	80048d4 <_printf_common+0xa8>
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	68e5      	ldr	r5, [r4, #12]
 8004896:	f003 0306 	and.w	r3, r3, #6
 800489a:	2b04      	cmp	r3, #4
 800489c:	bf18      	it	ne
 800489e:	2500      	movne	r5, #0
 80048a0:	6832      	ldr	r2, [r6, #0]
 80048a2:	f04f 0600 	mov.w	r6, #0
 80048a6:	68a3      	ldr	r3, [r4, #8]
 80048a8:	bf08      	it	eq
 80048aa:	1aad      	subeq	r5, r5, r2
 80048ac:	6922      	ldr	r2, [r4, #16]
 80048ae:	bf08      	it	eq
 80048b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048b4:	4293      	cmp	r3, r2
 80048b6:	bfc4      	itt	gt
 80048b8:	1a9b      	subgt	r3, r3, r2
 80048ba:	18ed      	addgt	r5, r5, r3
 80048bc:	341a      	adds	r4, #26
 80048be:	42b5      	cmp	r5, r6
 80048c0:	d11a      	bne.n	80048f8 <_printf_common+0xcc>
 80048c2:	2000      	movs	r0, #0
 80048c4:	e008      	b.n	80048d8 <_printf_common+0xac>
 80048c6:	2301      	movs	r3, #1
 80048c8:	4652      	mov	r2, sl
 80048ca:	4649      	mov	r1, r9
 80048cc:	4638      	mov	r0, r7
 80048ce:	47c0      	blx	r8
 80048d0:	3001      	adds	r0, #1
 80048d2:	d103      	bne.n	80048dc <_printf_common+0xb0>
 80048d4:	f04f 30ff 	mov.w	r0, #4294967295
 80048d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048dc:	3501      	adds	r5, #1
 80048de:	e7c4      	b.n	800486a <_printf_common+0x3e>
 80048e0:	2030      	movs	r0, #48	; 0x30
 80048e2:	18e1      	adds	r1, r4, r3
 80048e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048ee:	4422      	add	r2, r4
 80048f0:	3302      	adds	r3, #2
 80048f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048f6:	e7c5      	b.n	8004884 <_printf_common+0x58>
 80048f8:	2301      	movs	r3, #1
 80048fa:	4622      	mov	r2, r4
 80048fc:	4649      	mov	r1, r9
 80048fe:	4638      	mov	r0, r7
 8004900:	47c0      	blx	r8
 8004902:	3001      	adds	r0, #1
 8004904:	d0e6      	beq.n	80048d4 <_printf_common+0xa8>
 8004906:	3601      	adds	r6, #1
 8004908:	e7d9      	b.n	80048be <_printf_common+0x92>
	...

0800490c <_printf_i>:
 800490c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004910:	460c      	mov	r4, r1
 8004912:	7e27      	ldrb	r7, [r4, #24]
 8004914:	4691      	mov	r9, r2
 8004916:	2f78      	cmp	r7, #120	; 0x78
 8004918:	4680      	mov	r8, r0
 800491a:	469a      	mov	sl, r3
 800491c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800491e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004922:	d807      	bhi.n	8004934 <_printf_i+0x28>
 8004924:	2f62      	cmp	r7, #98	; 0x62
 8004926:	d80a      	bhi.n	800493e <_printf_i+0x32>
 8004928:	2f00      	cmp	r7, #0
 800492a:	f000 80d9 	beq.w	8004ae0 <_printf_i+0x1d4>
 800492e:	2f58      	cmp	r7, #88	; 0x58
 8004930:	f000 80a4 	beq.w	8004a7c <_printf_i+0x170>
 8004934:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004938:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800493c:	e03a      	b.n	80049b4 <_printf_i+0xa8>
 800493e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004942:	2b15      	cmp	r3, #21
 8004944:	d8f6      	bhi.n	8004934 <_printf_i+0x28>
 8004946:	a001      	add	r0, pc, #4	; (adr r0, 800494c <_printf_i+0x40>)
 8004948:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800494c:	080049a5 	.word	0x080049a5
 8004950:	080049b9 	.word	0x080049b9
 8004954:	08004935 	.word	0x08004935
 8004958:	08004935 	.word	0x08004935
 800495c:	08004935 	.word	0x08004935
 8004960:	08004935 	.word	0x08004935
 8004964:	080049b9 	.word	0x080049b9
 8004968:	08004935 	.word	0x08004935
 800496c:	08004935 	.word	0x08004935
 8004970:	08004935 	.word	0x08004935
 8004974:	08004935 	.word	0x08004935
 8004978:	08004ac7 	.word	0x08004ac7
 800497c:	080049e9 	.word	0x080049e9
 8004980:	08004aa9 	.word	0x08004aa9
 8004984:	08004935 	.word	0x08004935
 8004988:	08004935 	.word	0x08004935
 800498c:	08004ae9 	.word	0x08004ae9
 8004990:	08004935 	.word	0x08004935
 8004994:	080049e9 	.word	0x080049e9
 8004998:	08004935 	.word	0x08004935
 800499c:	08004935 	.word	0x08004935
 80049a0:	08004ab1 	.word	0x08004ab1
 80049a4:	680b      	ldr	r3, [r1, #0]
 80049a6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80049aa:	1d1a      	adds	r2, r3, #4
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	600a      	str	r2, [r1, #0]
 80049b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0a4      	b.n	8004b02 <_printf_i+0x1f6>
 80049b8:	6825      	ldr	r5, [r4, #0]
 80049ba:	6808      	ldr	r0, [r1, #0]
 80049bc:	062e      	lsls	r6, r5, #24
 80049be:	f100 0304 	add.w	r3, r0, #4
 80049c2:	d50a      	bpl.n	80049da <_printf_i+0xce>
 80049c4:	6805      	ldr	r5, [r0, #0]
 80049c6:	600b      	str	r3, [r1, #0]
 80049c8:	2d00      	cmp	r5, #0
 80049ca:	da03      	bge.n	80049d4 <_printf_i+0xc8>
 80049cc:	232d      	movs	r3, #45	; 0x2d
 80049ce:	426d      	negs	r5, r5
 80049d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049d4:	230a      	movs	r3, #10
 80049d6:	485e      	ldr	r0, [pc, #376]	; (8004b50 <_printf_i+0x244>)
 80049d8:	e019      	b.n	8004a0e <_printf_i+0x102>
 80049da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80049de:	6805      	ldr	r5, [r0, #0]
 80049e0:	600b      	str	r3, [r1, #0]
 80049e2:	bf18      	it	ne
 80049e4:	b22d      	sxthne	r5, r5
 80049e6:	e7ef      	b.n	80049c8 <_printf_i+0xbc>
 80049e8:	680b      	ldr	r3, [r1, #0]
 80049ea:	6825      	ldr	r5, [r4, #0]
 80049ec:	1d18      	adds	r0, r3, #4
 80049ee:	6008      	str	r0, [r1, #0]
 80049f0:	0628      	lsls	r0, r5, #24
 80049f2:	d501      	bpl.n	80049f8 <_printf_i+0xec>
 80049f4:	681d      	ldr	r5, [r3, #0]
 80049f6:	e002      	b.n	80049fe <_printf_i+0xf2>
 80049f8:	0669      	lsls	r1, r5, #25
 80049fa:	d5fb      	bpl.n	80049f4 <_printf_i+0xe8>
 80049fc:	881d      	ldrh	r5, [r3, #0]
 80049fe:	2f6f      	cmp	r7, #111	; 0x6f
 8004a00:	bf0c      	ite	eq
 8004a02:	2308      	moveq	r3, #8
 8004a04:	230a      	movne	r3, #10
 8004a06:	4852      	ldr	r0, [pc, #328]	; (8004b50 <_printf_i+0x244>)
 8004a08:	2100      	movs	r1, #0
 8004a0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a0e:	6866      	ldr	r6, [r4, #4]
 8004a10:	2e00      	cmp	r6, #0
 8004a12:	bfa8      	it	ge
 8004a14:	6821      	ldrge	r1, [r4, #0]
 8004a16:	60a6      	str	r6, [r4, #8]
 8004a18:	bfa4      	itt	ge
 8004a1a:	f021 0104 	bicge.w	r1, r1, #4
 8004a1e:	6021      	strge	r1, [r4, #0]
 8004a20:	b90d      	cbnz	r5, 8004a26 <_printf_i+0x11a>
 8004a22:	2e00      	cmp	r6, #0
 8004a24:	d04d      	beq.n	8004ac2 <_printf_i+0x1b6>
 8004a26:	4616      	mov	r6, r2
 8004a28:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a2c:	fb03 5711 	mls	r7, r3, r1, r5
 8004a30:	5dc7      	ldrb	r7, [r0, r7]
 8004a32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a36:	462f      	mov	r7, r5
 8004a38:	42bb      	cmp	r3, r7
 8004a3a:	460d      	mov	r5, r1
 8004a3c:	d9f4      	bls.n	8004a28 <_printf_i+0x11c>
 8004a3e:	2b08      	cmp	r3, #8
 8004a40:	d10b      	bne.n	8004a5a <_printf_i+0x14e>
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	07df      	lsls	r7, r3, #31
 8004a46:	d508      	bpl.n	8004a5a <_printf_i+0x14e>
 8004a48:	6923      	ldr	r3, [r4, #16]
 8004a4a:	6861      	ldr	r1, [r4, #4]
 8004a4c:	4299      	cmp	r1, r3
 8004a4e:	bfde      	ittt	le
 8004a50:	2330      	movle	r3, #48	; 0x30
 8004a52:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a56:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a5a:	1b92      	subs	r2, r2, r6
 8004a5c:	6122      	str	r2, [r4, #16]
 8004a5e:	464b      	mov	r3, r9
 8004a60:	4621      	mov	r1, r4
 8004a62:	4640      	mov	r0, r8
 8004a64:	f8cd a000 	str.w	sl, [sp]
 8004a68:	aa03      	add	r2, sp, #12
 8004a6a:	f7ff fedf 	bl	800482c <_printf_common>
 8004a6e:	3001      	adds	r0, #1
 8004a70:	d14c      	bne.n	8004b0c <_printf_i+0x200>
 8004a72:	f04f 30ff 	mov.w	r0, #4294967295
 8004a76:	b004      	add	sp, #16
 8004a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a7c:	4834      	ldr	r0, [pc, #208]	; (8004b50 <_printf_i+0x244>)
 8004a7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a82:	680e      	ldr	r6, [r1, #0]
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a8a:	061f      	lsls	r7, r3, #24
 8004a8c:	600e      	str	r6, [r1, #0]
 8004a8e:	d514      	bpl.n	8004aba <_printf_i+0x1ae>
 8004a90:	07d9      	lsls	r1, r3, #31
 8004a92:	bf44      	itt	mi
 8004a94:	f043 0320 	orrmi.w	r3, r3, #32
 8004a98:	6023      	strmi	r3, [r4, #0]
 8004a9a:	b91d      	cbnz	r5, 8004aa4 <_printf_i+0x198>
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	f023 0320 	bic.w	r3, r3, #32
 8004aa2:	6023      	str	r3, [r4, #0]
 8004aa4:	2310      	movs	r3, #16
 8004aa6:	e7af      	b.n	8004a08 <_printf_i+0xfc>
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	f043 0320 	orr.w	r3, r3, #32
 8004aae:	6023      	str	r3, [r4, #0]
 8004ab0:	2378      	movs	r3, #120	; 0x78
 8004ab2:	4828      	ldr	r0, [pc, #160]	; (8004b54 <_printf_i+0x248>)
 8004ab4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ab8:	e7e3      	b.n	8004a82 <_printf_i+0x176>
 8004aba:	065e      	lsls	r6, r3, #25
 8004abc:	bf48      	it	mi
 8004abe:	b2ad      	uxthmi	r5, r5
 8004ac0:	e7e6      	b.n	8004a90 <_printf_i+0x184>
 8004ac2:	4616      	mov	r6, r2
 8004ac4:	e7bb      	b.n	8004a3e <_printf_i+0x132>
 8004ac6:	680b      	ldr	r3, [r1, #0]
 8004ac8:	6826      	ldr	r6, [r4, #0]
 8004aca:	1d1d      	adds	r5, r3, #4
 8004acc:	6960      	ldr	r0, [r4, #20]
 8004ace:	600d      	str	r5, [r1, #0]
 8004ad0:	0635      	lsls	r5, r6, #24
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	d501      	bpl.n	8004ada <_printf_i+0x1ce>
 8004ad6:	6018      	str	r0, [r3, #0]
 8004ad8:	e002      	b.n	8004ae0 <_printf_i+0x1d4>
 8004ada:	0671      	lsls	r1, r6, #25
 8004adc:	d5fb      	bpl.n	8004ad6 <_printf_i+0x1ca>
 8004ade:	8018      	strh	r0, [r3, #0]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	4616      	mov	r6, r2
 8004ae4:	6123      	str	r3, [r4, #16]
 8004ae6:	e7ba      	b.n	8004a5e <_printf_i+0x152>
 8004ae8:	680b      	ldr	r3, [r1, #0]
 8004aea:	1d1a      	adds	r2, r3, #4
 8004aec:	600a      	str	r2, [r1, #0]
 8004aee:	681e      	ldr	r6, [r3, #0]
 8004af0:	2100      	movs	r1, #0
 8004af2:	4630      	mov	r0, r6
 8004af4:	6862      	ldr	r2, [r4, #4]
 8004af6:	f000 f82f 	bl	8004b58 <memchr>
 8004afa:	b108      	cbz	r0, 8004b00 <_printf_i+0x1f4>
 8004afc:	1b80      	subs	r0, r0, r6
 8004afe:	6060      	str	r0, [r4, #4]
 8004b00:	6863      	ldr	r3, [r4, #4]
 8004b02:	6123      	str	r3, [r4, #16]
 8004b04:	2300      	movs	r3, #0
 8004b06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b0a:	e7a8      	b.n	8004a5e <_printf_i+0x152>
 8004b0c:	4632      	mov	r2, r6
 8004b0e:	4649      	mov	r1, r9
 8004b10:	4640      	mov	r0, r8
 8004b12:	6923      	ldr	r3, [r4, #16]
 8004b14:	47d0      	blx	sl
 8004b16:	3001      	adds	r0, #1
 8004b18:	d0ab      	beq.n	8004a72 <_printf_i+0x166>
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	079b      	lsls	r3, r3, #30
 8004b1e:	d413      	bmi.n	8004b48 <_printf_i+0x23c>
 8004b20:	68e0      	ldr	r0, [r4, #12]
 8004b22:	9b03      	ldr	r3, [sp, #12]
 8004b24:	4298      	cmp	r0, r3
 8004b26:	bfb8      	it	lt
 8004b28:	4618      	movlt	r0, r3
 8004b2a:	e7a4      	b.n	8004a76 <_printf_i+0x16a>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	4632      	mov	r2, r6
 8004b30:	4649      	mov	r1, r9
 8004b32:	4640      	mov	r0, r8
 8004b34:	47d0      	blx	sl
 8004b36:	3001      	adds	r0, #1
 8004b38:	d09b      	beq.n	8004a72 <_printf_i+0x166>
 8004b3a:	3501      	adds	r5, #1
 8004b3c:	68e3      	ldr	r3, [r4, #12]
 8004b3e:	9903      	ldr	r1, [sp, #12]
 8004b40:	1a5b      	subs	r3, r3, r1
 8004b42:	42ab      	cmp	r3, r5
 8004b44:	dcf2      	bgt.n	8004b2c <_printf_i+0x220>
 8004b46:	e7eb      	b.n	8004b20 <_printf_i+0x214>
 8004b48:	2500      	movs	r5, #0
 8004b4a:	f104 0619 	add.w	r6, r4, #25
 8004b4e:	e7f5      	b.n	8004b3c <_printf_i+0x230>
 8004b50:	08005189 	.word	0x08005189
 8004b54:	0800519a 	.word	0x0800519a

08004b58 <memchr>:
 8004b58:	4603      	mov	r3, r0
 8004b5a:	b510      	push	{r4, lr}
 8004b5c:	b2c9      	uxtb	r1, r1
 8004b5e:	4402      	add	r2, r0
 8004b60:	4293      	cmp	r3, r2
 8004b62:	4618      	mov	r0, r3
 8004b64:	d101      	bne.n	8004b6a <memchr+0x12>
 8004b66:	2000      	movs	r0, #0
 8004b68:	e003      	b.n	8004b72 <memchr+0x1a>
 8004b6a:	7804      	ldrb	r4, [r0, #0]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	428c      	cmp	r4, r1
 8004b70:	d1f6      	bne.n	8004b60 <memchr+0x8>
 8004b72:	bd10      	pop	{r4, pc}

08004b74 <memcpy>:
 8004b74:	440a      	add	r2, r1
 8004b76:	4291      	cmp	r1, r2
 8004b78:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b7c:	d100      	bne.n	8004b80 <memcpy+0xc>
 8004b7e:	4770      	bx	lr
 8004b80:	b510      	push	{r4, lr}
 8004b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b86:	4291      	cmp	r1, r2
 8004b88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b8c:	d1f9      	bne.n	8004b82 <memcpy+0xe>
 8004b8e:	bd10      	pop	{r4, pc}

08004b90 <memmove>:
 8004b90:	4288      	cmp	r0, r1
 8004b92:	b510      	push	{r4, lr}
 8004b94:	eb01 0402 	add.w	r4, r1, r2
 8004b98:	d902      	bls.n	8004ba0 <memmove+0x10>
 8004b9a:	4284      	cmp	r4, r0
 8004b9c:	4623      	mov	r3, r4
 8004b9e:	d807      	bhi.n	8004bb0 <memmove+0x20>
 8004ba0:	1e43      	subs	r3, r0, #1
 8004ba2:	42a1      	cmp	r1, r4
 8004ba4:	d008      	beq.n	8004bb8 <memmove+0x28>
 8004ba6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004baa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bae:	e7f8      	b.n	8004ba2 <memmove+0x12>
 8004bb0:	4601      	mov	r1, r0
 8004bb2:	4402      	add	r2, r0
 8004bb4:	428a      	cmp	r2, r1
 8004bb6:	d100      	bne.n	8004bba <memmove+0x2a>
 8004bb8:	bd10      	pop	{r4, pc}
 8004bba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bc2:	e7f7      	b.n	8004bb4 <memmove+0x24>

08004bc4 <_free_r>:
 8004bc4:	b538      	push	{r3, r4, r5, lr}
 8004bc6:	4605      	mov	r5, r0
 8004bc8:	2900      	cmp	r1, #0
 8004bca:	d043      	beq.n	8004c54 <_free_r+0x90>
 8004bcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bd0:	1f0c      	subs	r4, r1, #4
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	bfb8      	it	lt
 8004bd6:	18e4      	addlt	r4, r4, r3
 8004bd8:	f000 f8d0 	bl	8004d7c <__malloc_lock>
 8004bdc:	4a1e      	ldr	r2, [pc, #120]	; (8004c58 <_free_r+0x94>)
 8004bde:	6813      	ldr	r3, [r2, #0]
 8004be0:	4610      	mov	r0, r2
 8004be2:	b933      	cbnz	r3, 8004bf2 <_free_r+0x2e>
 8004be4:	6063      	str	r3, [r4, #4]
 8004be6:	6014      	str	r4, [r2, #0]
 8004be8:	4628      	mov	r0, r5
 8004bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bee:	f000 b8cb 	b.w	8004d88 <__malloc_unlock>
 8004bf2:	42a3      	cmp	r3, r4
 8004bf4:	d90a      	bls.n	8004c0c <_free_r+0x48>
 8004bf6:	6821      	ldr	r1, [r4, #0]
 8004bf8:	1862      	adds	r2, r4, r1
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	bf01      	itttt	eq
 8004bfe:	681a      	ldreq	r2, [r3, #0]
 8004c00:	685b      	ldreq	r3, [r3, #4]
 8004c02:	1852      	addeq	r2, r2, r1
 8004c04:	6022      	streq	r2, [r4, #0]
 8004c06:	6063      	str	r3, [r4, #4]
 8004c08:	6004      	str	r4, [r0, #0]
 8004c0a:	e7ed      	b.n	8004be8 <_free_r+0x24>
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	b10b      	cbz	r3, 8004c16 <_free_r+0x52>
 8004c12:	42a3      	cmp	r3, r4
 8004c14:	d9fa      	bls.n	8004c0c <_free_r+0x48>
 8004c16:	6811      	ldr	r1, [r2, #0]
 8004c18:	1850      	adds	r0, r2, r1
 8004c1a:	42a0      	cmp	r0, r4
 8004c1c:	d10b      	bne.n	8004c36 <_free_r+0x72>
 8004c1e:	6820      	ldr	r0, [r4, #0]
 8004c20:	4401      	add	r1, r0
 8004c22:	1850      	adds	r0, r2, r1
 8004c24:	4283      	cmp	r3, r0
 8004c26:	6011      	str	r1, [r2, #0]
 8004c28:	d1de      	bne.n	8004be8 <_free_r+0x24>
 8004c2a:	6818      	ldr	r0, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	4401      	add	r1, r0
 8004c30:	6011      	str	r1, [r2, #0]
 8004c32:	6053      	str	r3, [r2, #4]
 8004c34:	e7d8      	b.n	8004be8 <_free_r+0x24>
 8004c36:	d902      	bls.n	8004c3e <_free_r+0x7a>
 8004c38:	230c      	movs	r3, #12
 8004c3a:	602b      	str	r3, [r5, #0]
 8004c3c:	e7d4      	b.n	8004be8 <_free_r+0x24>
 8004c3e:	6820      	ldr	r0, [r4, #0]
 8004c40:	1821      	adds	r1, r4, r0
 8004c42:	428b      	cmp	r3, r1
 8004c44:	bf01      	itttt	eq
 8004c46:	6819      	ldreq	r1, [r3, #0]
 8004c48:	685b      	ldreq	r3, [r3, #4]
 8004c4a:	1809      	addeq	r1, r1, r0
 8004c4c:	6021      	streq	r1, [r4, #0]
 8004c4e:	6063      	str	r3, [r4, #4]
 8004c50:	6054      	str	r4, [r2, #4]
 8004c52:	e7c9      	b.n	8004be8 <_free_r+0x24>
 8004c54:	bd38      	pop	{r3, r4, r5, pc}
 8004c56:	bf00      	nop
 8004c58:	20000104 	.word	0x20000104

08004c5c <_malloc_r>:
 8004c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5e:	1ccd      	adds	r5, r1, #3
 8004c60:	f025 0503 	bic.w	r5, r5, #3
 8004c64:	3508      	adds	r5, #8
 8004c66:	2d0c      	cmp	r5, #12
 8004c68:	bf38      	it	cc
 8004c6a:	250c      	movcc	r5, #12
 8004c6c:	2d00      	cmp	r5, #0
 8004c6e:	4606      	mov	r6, r0
 8004c70:	db01      	blt.n	8004c76 <_malloc_r+0x1a>
 8004c72:	42a9      	cmp	r1, r5
 8004c74:	d903      	bls.n	8004c7e <_malloc_r+0x22>
 8004c76:	230c      	movs	r3, #12
 8004c78:	6033      	str	r3, [r6, #0]
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c7e:	f000 f87d 	bl	8004d7c <__malloc_lock>
 8004c82:	4921      	ldr	r1, [pc, #132]	; (8004d08 <_malloc_r+0xac>)
 8004c84:	680a      	ldr	r2, [r1, #0]
 8004c86:	4614      	mov	r4, r2
 8004c88:	b99c      	cbnz	r4, 8004cb2 <_malloc_r+0x56>
 8004c8a:	4f20      	ldr	r7, [pc, #128]	; (8004d0c <_malloc_r+0xb0>)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	b923      	cbnz	r3, 8004c9a <_malloc_r+0x3e>
 8004c90:	4621      	mov	r1, r4
 8004c92:	4630      	mov	r0, r6
 8004c94:	f000 f862 	bl	8004d5c <_sbrk_r>
 8004c98:	6038      	str	r0, [r7, #0]
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	4630      	mov	r0, r6
 8004c9e:	f000 f85d 	bl	8004d5c <_sbrk_r>
 8004ca2:	1c43      	adds	r3, r0, #1
 8004ca4:	d123      	bne.n	8004cee <_malloc_r+0x92>
 8004ca6:	230c      	movs	r3, #12
 8004ca8:	4630      	mov	r0, r6
 8004caa:	6033      	str	r3, [r6, #0]
 8004cac:	f000 f86c 	bl	8004d88 <__malloc_unlock>
 8004cb0:	e7e3      	b.n	8004c7a <_malloc_r+0x1e>
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	1b5b      	subs	r3, r3, r5
 8004cb6:	d417      	bmi.n	8004ce8 <_malloc_r+0x8c>
 8004cb8:	2b0b      	cmp	r3, #11
 8004cba:	d903      	bls.n	8004cc4 <_malloc_r+0x68>
 8004cbc:	6023      	str	r3, [r4, #0]
 8004cbe:	441c      	add	r4, r3
 8004cc0:	6025      	str	r5, [r4, #0]
 8004cc2:	e004      	b.n	8004cce <_malloc_r+0x72>
 8004cc4:	6863      	ldr	r3, [r4, #4]
 8004cc6:	42a2      	cmp	r2, r4
 8004cc8:	bf0c      	ite	eq
 8004cca:	600b      	streq	r3, [r1, #0]
 8004ccc:	6053      	strne	r3, [r2, #4]
 8004cce:	4630      	mov	r0, r6
 8004cd0:	f000 f85a 	bl	8004d88 <__malloc_unlock>
 8004cd4:	f104 000b 	add.w	r0, r4, #11
 8004cd8:	1d23      	adds	r3, r4, #4
 8004cda:	f020 0007 	bic.w	r0, r0, #7
 8004cde:	1ac2      	subs	r2, r0, r3
 8004ce0:	d0cc      	beq.n	8004c7c <_malloc_r+0x20>
 8004ce2:	1a1b      	subs	r3, r3, r0
 8004ce4:	50a3      	str	r3, [r4, r2]
 8004ce6:	e7c9      	b.n	8004c7c <_malloc_r+0x20>
 8004ce8:	4622      	mov	r2, r4
 8004cea:	6864      	ldr	r4, [r4, #4]
 8004cec:	e7cc      	b.n	8004c88 <_malloc_r+0x2c>
 8004cee:	1cc4      	adds	r4, r0, #3
 8004cf0:	f024 0403 	bic.w	r4, r4, #3
 8004cf4:	42a0      	cmp	r0, r4
 8004cf6:	d0e3      	beq.n	8004cc0 <_malloc_r+0x64>
 8004cf8:	1a21      	subs	r1, r4, r0
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	f000 f82e 	bl	8004d5c <_sbrk_r>
 8004d00:	3001      	adds	r0, #1
 8004d02:	d1dd      	bne.n	8004cc0 <_malloc_r+0x64>
 8004d04:	e7cf      	b.n	8004ca6 <_malloc_r+0x4a>
 8004d06:	bf00      	nop
 8004d08:	20000104 	.word	0x20000104
 8004d0c:	20000108 	.word	0x20000108

08004d10 <_realloc_r>:
 8004d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d12:	4607      	mov	r7, r0
 8004d14:	4614      	mov	r4, r2
 8004d16:	460e      	mov	r6, r1
 8004d18:	b921      	cbnz	r1, 8004d24 <_realloc_r+0x14>
 8004d1a:	4611      	mov	r1, r2
 8004d1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d20:	f7ff bf9c 	b.w	8004c5c <_malloc_r>
 8004d24:	b922      	cbnz	r2, 8004d30 <_realloc_r+0x20>
 8004d26:	f7ff ff4d 	bl	8004bc4 <_free_r>
 8004d2a:	4625      	mov	r5, r4
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d30:	f000 f830 	bl	8004d94 <_malloc_usable_size_r>
 8004d34:	42a0      	cmp	r0, r4
 8004d36:	d20f      	bcs.n	8004d58 <_realloc_r+0x48>
 8004d38:	4621      	mov	r1, r4
 8004d3a:	4638      	mov	r0, r7
 8004d3c:	f7ff ff8e 	bl	8004c5c <_malloc_r>
 8004d40:	4605      	mov	r5, r0
 8004d42:	2800      	cmp	r0, #0
 8004d44:	d0f2      	beq.n	8004d2c <_realloc_r+0x1c>
 8004d46:	4631      	mov	r1, r6
 8004d48:	4622      	mov	r2, r4
 8004d4a:	f7ff ff13 	bl	8004b74 <memcpy>
 8004d4e:	4631      	mov	r1, r6
 8004d50:	4638      	mov	r0, r7
 8004d52:	f7ff ff37 	bl	8004bc4 <_free_r>
 8004d56:	e7e9      	b.n	8004d2c <_realloc_r+0x1c>
 8004d58:	4635      	mov	r5, r6
 8004d5a:	e7e7      	b.n	8004d2c <_realloc_r+0x1c>

08004d5c <_sbrk_r>:
 8004d5c:	b538      	push	{r3, r4, r5, lr}
 8004d5e:	2300      	movs	r3, #0
 8004d60:	4d05      	ldr	r5, [pc, #20]	; (8004d78 <_sbrk_r+0x1c>)
 8004d62:	4604      	mov	r4, r0
 8004d64:	4608      	mov	r0, r1
 8004d66:	602b      	str	r3, [r5, #0]
 8004d68:	f7fc ff58 	bl	8001c1c <_sbrk>
 8004d6c:	1c43      	adds	r3, r0, #1
 8004d6e:	d102      	bne.n	8004d76 <_sbrk_r+0x1a>
 8004d70:	682b      	ldr	r3, [r5, #0]
 8004d72:	b103      	cbz	r3, 8004d76 <_sbrk_r+0x1a>
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	bd38      	pop	{r3, r4, r5, pc}
 8004d78:	20000238 	.word	0x20000238

08004d7c <__malloc_lock>:
 8004d7c:	4801      	ldr	r0, [pc, #4]	; (8004d84 <__malloc_lock+0x8>)
 8004d7e:	f000 b811 	b.w	8004da4 <__retarget_lock_acquire_recursive>
 8004d82:	bf00      	nop
 8004d84:	20000240 	.word	0x20000240

08004d88 <__malloc_unlock>:
 8004d88:	4801      	ldr	r0, [pc, #4]	; (8004d90 <__malloc_unlock+0x8>)
 8004d8a:	f000 b80c 	b.w	8004da6 <__retarget_lock_release_recursive>
 8004d8e:	bf00      	nop
 8004d90:	20000240 	.word	0x20000240

08004d94 <_malloc_usable_size_r>:
 8004d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d98:	1f18      	subs	r0, r3, #4
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	bfbc      	itt	lt
 8004d9e:	580b      	ldrlt	r3, [r1, r0]
 8004da0:	18c0      	addlt	r0, r0, r3
 8004da2:	4770      	bx	lr

08004da4 <__retarget_lock_acquire_recursive>:
 8004da4:	4770      	bx	lr

08004da6 <__retarget_lock_release_recursive>:
 8004da6:	4770      	bx	lr

08004da8 <_init>:
 8004da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004daa:	bf00      	nop
 8004dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dae:	bc08      	pop	{r3}
 8004db0:	469e      	mov	lr, r3
 8004db2:	4770      	bx	lr

08004db4 <_fini>:
 8004db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db6:	bf00      	nop
 8004db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dba:	bc08      	pop	{r3}
 8004dbc:	469e      	mov	lr, r3
 8004dbe:	4770      	bx	lr

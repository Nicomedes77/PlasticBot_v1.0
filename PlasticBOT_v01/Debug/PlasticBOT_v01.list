
PlasticBOT_v01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000560c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  08005718  08005718  00015718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b50  08005b50  00020130  2**0
                  CONTENTS
  4 .ARM          00000000  08005b50  08005b50  00020130  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b50  08005b50  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b50  08005b50  00015b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b54  08005b54  00015b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08005b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000130  08005c88  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08005c88  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015611  00000000  00000000  00020159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cf9  00000000  00000000  0003576a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00038468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  000393d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019bb2  00000000  00000000  0003a218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013934  00000000  00000000  00053dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ecb9  00000000  00000000  000676fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f63b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004484  00000000  00000000  000f640c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000130 	.word	0x20000130
 8000128:	00000000 	.word	0x00000000
 800012c:	08005700 	.word	0x08005700

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000134 	.word	0x20000134
 8000148:	08005700 	.word	0x08005700

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <ControlAlarms>:


//****** FUNCTIONS IMPLEMENTATIONS ******

void ControlAlarms(bool *_sensorFil , PETfilConv *_petFilConv)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
	if(*_sensorFil)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d00c      	beq.n	8000760 <ControlAlarms+0x2c>
	{
		if(_petFilConv -> lightAlarm_state)	ActivaAlarmaLuminica();
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	785b      	ldrb	r3, [r3, #1]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <ControlAlarms+0x1e>
 800074e:	f000 f80d 	bl	800076c <ActivaAlarmaLuminica>
		if(_petFilConv -> soundAlarm_state)	ActivaAlarmaSonora();
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d004      	beq.n	8000764 <ControlAlarms+0x30>
 800075a:	f000 f813 	bl	8000784 <ActivaAlarmaSonora>
	}

	else	DesactivaAlarmas();
}
 800075e:	e001      	b.n	8000764 <ControlAlarms+0x30>
	else	DesactivaAlarmas();
 8000760:	f000 f81c 	bl	800079c <DesactivaAlarmas>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <ActivaAlarmaLuminica>:

void ActivaAlarmaLuminica(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Led_Pin, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000776:	4802      	ldr	r0, [pc, #8]	; (8000780 <ActivaAlarmaLuminica+0x14>)
 8000778:	f002 fdf5 	bl	8003366 <HAL_GPIO_WritePin>
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40010800 	.word	0x40010800

08000784 <ActivaAlarmaSonora>:

void ActivaAlarmaSonora(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, Buzzer_Pin, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078e:	4802      	ldr	r0, [pc, #8]	; (8000798 <ActivaAlarmaSonora+0x14>)
 8000790:	f002 fde9 	bl	8003366 <HAL_GPIO_WritePin>
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40010c00 	.word	0x40010c00

0800079c <DesactivaAlarmas>:

void DesactivaAlarmas(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Led_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <DesactivaAlarmas+0x20>)
 80007a8:	f002 fddd 	bl	8003366 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Buzzer_Pin, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b2:	4803      	ldr	r0, [pc, #12]	; (80007c0 <DesactivaAlarmas+0x24>)
 80007b4:	f002 fdd7 	bl	8003366 <HAL_GPIO_WritePin>
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40010800 	.word	0x40010800
 80007c0:	40010c00 	.word	0x40010c00

080007c4 <GetTemp>:
#define N_SAMPLES_ADC 16

//****** FUNCTIONS IMPLEMENTATIONS ******

float_t GetTemp(void)
{
 80007c4:	b5b0      	push	{r4, r5, r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
		uint8_t i = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	73fb      	strb	r3, [r7, #15]
		static float_t factor_cor2 = 10;
		static float_t Temp_C = 0;
		float_t adc_val_average = 0;
 80007ce:	f04f 0300 	mov.w	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
		uint32_t adc_val = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	603b      	str	r3, [r7, #0]

		for(uint8_t j = 0 ; j < N_SAMPLES_ADC ; j++)
 80007d8:	2300      	movs	r3, #0
 80007da:	71fb      	strb	r3, [r7, #7]
 80007dc:	e013      	b.n	8000806 <GetTemp+0x42>
		{
			HAL_ADC_Start_DMA(&hadc1, &adc_val, 1);	//star in DMA mode and we are reading only 1 channel or 1 word
 80007de:	463b      	mov	r3, r7
 80007e0:	2201      	movs	r2, #1
 80007e2:	4619      	mov	r1, r3
 80007e4:	4847      	ldr	r0, [pc, #284]	; (8000904 <GetTemp+0x140>)
 80007e6:	f001 fe3d 	bl	8002464 <HAL_ADC_Start_DMA>
			adc_val_average += adc_val;
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fd63 	bl	80002b8 <__aeabi_ui2f>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4619      	mov	r1, r3
 80007f6:	68b8      	ldr	r0, [r7, #8]
 80007f8:	f7ff fcae 	bl	8000158 <__addsf3>
 80007fc:	4603      	mov	r3, r0
 80007fe:	60bb      	str	r3, [r7, #8]
		for(uint8_t j = 0 ; j < N_SAMPLES_ADC ; j++)
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	3301      	adds	r3, #1
 8000804:	71fb      	strb	r3, [r7, #7]
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b0f      	cmp	r3, #15
 800080a:	d9e8      	bls.n	80007de <GetTemp+0x1a>
		}
		adc_val_average = adc_val_average/N_SAMPLES_ADC;	//promedio
 800080c:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8000810:	68b8      	ldr	r0, [r7, #8]
 8000812:	f7ff fe5d 	bl	80004d0 <__aeabi_fdiv>
 8000816:	4603      	mov	r3, r0
 8000818:	60bb      	str	r3, [r7, #8]
			Temp_K = (T0 * B_param) / (T0 * log(R_NTC / 130000) + B_param);
			Temp_C = Temp_K - 273.15;
			return	Temp_C;
	*/

			while(tempNTC100K[i].adc < adc_val_average) i++;
 800081a:	e002      	b.n	8000822 <GetTemp+0x5e>
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	3301      	adds	r3, #1
 8000820:	73fb      	strb	r3, [r7, #15]
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	4a38      	ldr	r2, [pc, #224]	; (8000908 <GetTemp+0x144>)
 8000826:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800082a:	4619      	mov	r1, r3
 800082c:	68b8      	ldr	r0, [r7, #8]
 800082e:	f7ff ff57 	bl	80006e0 <__aeabi_fcmpgt>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d1f1      	bne.n	800081c <GetTemp+0x58>

			if(i == NUMTEMPS)	Temp_C = tempNTC100K[i-1].temp;
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	2b19      	cmp	r3, #25
 800083c:	d108      	bne.n	8000850 <GetTemp+0x8c>
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	3b01      	subs	r3, #1
 8000842:	4a31      	ldr	r2, [pc, #196]	; (8000908 <GetTemp+0x144>)
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	4413      	add	r3, r2
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	4a30      	ldr	r2, [pc, #192]	; (800090c <GetTemp+0x148>)
 800084c:	6013      	str	r3, [r2, #0]
 800084e:	e04c      	b.n	80008ea <GetTemp+0x126>
			else if(i == 0) Temp_C = tempNTC100K[i].temp;
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d107      	bne.n	8000866 <GetTemp+0xa2>
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	4a2b      	ldr	r2, [pc, #172]	; (8000908 <GetTemp+0x144>)
 800085a:	00db      	lsls	r3, r3, #3
 800085c:	4413      	add	r3, r2
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	4a2a      	ldr	r2, [pc, #168]	; (800090c <GetTemp+0x148>)
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	e041      	b.n	80008ea <GetTemp+0x126>
			else
			{
				Temp_C = tempNTC100K[i-1].temp + (adc_val_average - tempNTC100K[i-1].adc) * (float)(tempNTC100K[i].temp - tempNTC100K[i-1].temp) / (float)(tempNTC100K[i].adc - tempNTC100K[i-1].adc);
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	3b01      	subs	r3, #1
 800086a:	4a27      	ldr	r2, [pc, #156]	; (8000908 <GetTemp+0x144>)
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	4413      	add	r3, r2
 8000870:	685c      	ldr	r4, [r3, #4]
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	3b01      	subs	r3, #1
 8000876:	4a24      	ldr	r2, [pc, #144]	; (8000908 <GetTemp+0x144>)
 8000878:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800087c:	4619      	mov	r1, r3
 800087e:	68b8      	ldr	r0, [r7, #8]
 8000880:	f7ff fc68 	bl	8000154 <__aeabi_fsub>
 8000884:	4603      	mov	r3, r0
 8000886:	461d      	mov	r5, r3
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	4a1f      	ldr	r2, [pc, #124]	; (8000908 <GetTemp+0x144>)
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	4413      	add	r3, r2
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	3b01      	subs	r3, #1
 8000896:	491c      	ldr	r1, [pc, #112]	; (8000908 <GetTemp+0x144>)
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	440b      	add	r3, r1
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	4619      	mov	r1, r3
 80008a0:	4610      	mov	r0, r2
 80008a2:	f7ff fc57 	bl	8000154 <__aeabi_fsub>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4619      	mov	r1, r3
 80008aa:	4628      	mov	r0, r5
 80008ac:	f7ff fd5c 	bl	8000368 <__aeabi_fmul>
 80008b0:	4603      	mov	r3, r0
 80008b2:	461d      	mov	r5, r3
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	4a14      	ldr	r2, [pc, #80]	; (8000908 <GetTemp+0x144>)
 80008b8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
 80008be:	3b01      	subs	r3, #1
 80008c0:	4911      	ldr	r1, [pc, #68]	; (8000908 <GetTemp+0x144>)
 80008c2:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80008c6:	4619      	mov	r1, r3
 80008c8:	4610      	mov	r0, r2
 80008ca:	f7ff fc43 	bl	8000154 <__aeabi_fsub>
 80008ce:	4603      	mov	r3, r0
 80008d0:	4619      	mov	r1, r3
 80008d2:	4628      	mov	r0, r5
 80008d4:	f7ff fdfc 	bl	80004d0 <__aeabi_fdiv>
 80008d8:	4603      	mov	r3, r0
 80008da:	4619      	mov	r1, r3
 80008dc:	4620      	mov	r0, r4
 80008de:	f7ff fc3b 	bl	8000158 <__addsf3>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <GetTemp+0x148>)
 80008e8:	601a      	str	r2, [r3, #0]
			}

			//tempCint = (uint32_t)Temp_C;
			return	(Temp_C - factor_cor2);
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <GetTemp+0x148>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a08      	ldr	r2, [pc, #32]	; (8000910 <GetTemp+0x14c>)
 80008f0:	6812      	ldr	r2, [r2, #0]
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fc2d 	bl	8000154 <__aeabi_fsub>
 80008fa:	4603      	mov	r3, r0
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bdb0      	pop	{r4, r5, r7, pc}
 8000904:	20000204 	.word	0x20000204
 8000908:	08005a2c 	.word	0x08005a2c
 800090c:	2000014c 	.word	0x2000014c
 8000910:	20000000 	.word	0x20000000

08000914 <Control_ON_OFF>:

void Control_ON_OFF(PETfilConv *_petFilConv)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	static uint32_t previousTemp = 0;

	_petFilConv -> currentExtTemp = (uint32_t)GetTemp();
 800091c:	f7ff ff52 	bl	80007c4 <GetTemp>
 8000920:	4603      	mov	r3, r0
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fee6 	bl	80006f4 <__aeabi_f2uiz>
 8000928:	4602      	mov	r2, r0
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	605a      	str	r2, [r3, #4]

	if(previousTemp != _petFilConv -> currentExtTemp)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	685a      	ldr	r2, [r3, #4]
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <Control_ON_OFF+0x50>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	429a      	cmp	r2, r3
 8000938:	d00f      	beq.n	800095a <Control_ON_OFF+0x46>
	{
		previousTemp = _petFilConv -> currentExtTemp;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	4a09      	ldr	r2, [pc, #36]	; (8000964 <Control_ON_OFF+0x50>)
 8000940:	6013      	str	r3, [r2, #0]

		if((_petFilConv -> currentExtTemp) < ((_petFilConv -> setExtTemp) - 4))	ActivaCalentador();
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	685a      	ldr	r2, [r3, #4]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	68db      	ldr	r3, [r3, #12]
 800094a:	3b04      	subs	r3, #4
 800094c:	429a      	cmp	r2, r3
 800094e:	d202      	bcs.n	8000956 <Control_ON_OFF+0x42>
 8000950:	f000 f80a 	bl	8000968 <ActivaCalentador>
		else		DesactivaCalentador();
	}
}
 8000954:	e001      	b.n	800095a <Control_ON_OFF+0x46>
		else		DesactivaCalentador();
 8000956:	f000 f813 	bl	8000980 <DesactivaCalentador>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000150 	.word	0x20000150

08000968 <ActivaCalentador>:


void ActivaCalentador(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CALENTADOR1_Pin, GPIO_PIN_RESET);	//Utiliza lógica negativa
 800096c:	2200      	movs	r2, #0
 800096e:	2120      	movs	r1, #32
 8000970:	4802      	ldr	r0, [pc, #8]	; (800097c <ActivaCalentador+0x14>)
 8000972:	f002 fcf8 	bl	8003366 <HAL_GPIO_WritePin>
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40010800 	.word	0x40010800

08000980 <DesactivaCalentador>:
void DesactivaCalentador(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CALENTADOR1_Pin, GPIO_PIN_SET);	//Utiliza lógica negativa
 8000984:	2201      	movs	r2, #1
 8000986:	2120      	movs	r1, #32
 8000988:	4802      	ldr	r0, [pc, #8]	; (8000994 <DesactivaCalentador+0x14>)
 800098a:	f002 fcec 	bl	8003366 <HAL_GPIO_WritePin>
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40010800 	.word	0x40010800

08000998 <UpdateDataGUI>:


//****** FUNCTIONS IMPLEMENTATIONS ******

void UpdateDataGUI(uint32_t *_indexes , uint32_t *_btn , PETfilConv *_petFilConv , uint32_t *currentScreen , uint32_t *_vel_col)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
 80009a4:	603b      	str	r3, [r7, #0]
	if(*_btn != NoPressed)
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	f000 82f8 	beq.w	8000fa0 <UpdateDataGUI+0x608>
	{
			if(*_btn == Ok)
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	f040 814d 	bne.w	8000c54 <UpdateDataGUI+0x2bc>
			{
				switch(*currentScreen)
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2b1f      	cmp	r3, #31
 80009c0:	f200 82f0 	bhi.w	8000fa4 <UpdateDataGUI+0x60c>
 80009c4:	a201      	add	r2, pc, #4	; (adr r2, 80009cc <UpdateDataGUI+0x34>)
 80009c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ca:	bf00      	nop
 80009cc:	08000a4d 	.word	0x08000a4d
 80009d0:	08000fa5 	.word	0x08000fa5
 80009d4:	08000acd 	.word	0x08000acd
 80009d8:	08000af3 	.word	0x08000af3
 80009dc:	08000b19 	.word	0x08000b19
 80009e0:	08000b7d 	.word	0x08000b7d
 80009e4:	08000c2f 	.word	0x08000c2f
 80009e8:	08000c37 	.word	0x08000c37
 80009ec:	08000c3f 	.word	0x08000c3f
 80009f0:	08000fa5 	.word	0x08000fa5
 80009f4:	08000fa5 	.word	0x08000fa5
 80009f8:	08000a5d 	.word	0x08000a5d
 80009fc:	08000aa7 	.word	0x08000aa7
 8000a00:	08000fa5 	.word	0x08000fa5
 8000a04:	08000fa5 	.word	0x08000fa5
 8000a08:	08000fa5 	.word	0x08000fa5
 8000a0c:	08000fa5 	.word	0x08000fa5
 8000a10:	08000fa5 	.word	0x08000fa5
 8000a14:	08000fa5 	.word	0x08000fa5
 8000a18:	08000fa5 	.word	0x08000fa5
 8000a1c:	08000fa5 	.word	0x08000fa5
 8000a20:	08000fa5 	.word	0x08000fa5
 8000a24:	08000fa5 	.word	0x08000fa5
 8000a28:	08000fa5 	.word	0x08000fa5
 8000a2c:	08000fa5 	.word	0x08000fa5
 8000a30:	08000fa5 	.word	0x08000fa5
 8000a34:	08000fa5 	.word	0x08000fa5
 8000a38:	08000fa5 	.word	0x08000fa5
 8000a3c:	08000fa5 	.word	0x08000fa5
 8000a40:	08000fa5 	.word	0x08000fa5
 8000a44:	08000fa5 	.word	0x08000fa5
 8000a48:	08000b91 	.word	0x08000b91
				{
					case pantallaWorkingScreen:	//pantalla de trabajo
						*currentScreen = pantallaMainMenu_part1;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	220b      	movs	r2, #11
 8000a50:	601a      	str	r2, [r3, #0]
						_indexes[cont_item_PrinMenu] = 0;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	3304      	adds	r3, #4
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
					break;
 8000a5a:	e2b4      	b.n	8000fc6 <UpdateDataGUI+0x62e>

					case pantallaMainMenu_part1: //menu principal (parte 1)
						if(_indexes[cont_item_PrinMenu] == 0) *currentScreen = pantallaWorkingScreen;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	3304      	adds	r3, #4
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d103      	bne.n	8000a6e <UpdateDataGUI+0xd6>
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
						else if(_indexes[cont_item_PrinMenu] == 1) *currentScreen = pantallaSubMenuExtrusores;
						else if(_indexes[cont_item_PrinMenu] == 2) *currentScreen = pantallaSubMenuColectoresFil;
						else if(_indexes[cont_item_PrinMenu] == 3) *currentScreen = pantallaSubMenuAlarmas;
					break;
 8000a6c:	e29c      	b.n	8000fa8 <UpdateDataGUI+0x610>
						else if(_indexes[cont_item_PrinMenu] == 1) *currentScreen = pantallaSubMenuExtrusores;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	3304      	adds	r3, #4
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d103      	bne.n	8000a80 <UpdateDataGUI+0xe8>
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	601a      	str	r2, [r3, #0]
					break;
 8000a7e:	e293      	b.n	8000fa8 <UpdateDataGUI+0x610>
						else if(_indexes[cont_item_PrinMenu] == 2) *currentScreen = pantallaSubMenuColectoresFil;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	3304      	adds	r3, #4
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d103      	bne.n	8000a92 <UpdateDataGUI+0xfa>
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	601a      	str	r2, [r3, #0]
					break;
 8000a90:	e28a      	b.n	8000fa8 <UpdateDataGUI+0x610>
						else if(_indexes[cont_item_PrinMenu] == 3) *currentScreen = pantallaSubMenuAlarmas;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	3304      	adds	r3, #4
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b03      	cmp	r3, #3
 8000a9a:	f040 8285 	bne.w	8000fa8 <UpdateDataGUI+0x610>
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	601a      	str	r2, [r3, #0]
					break;
 8000aa4:	e280      	b.n	8000fa8 <UpdateDataGUI+0x610>

					case pantallaMainMenu_part2: //menu principal (parte 2)
						if(_indexes[cont_item_PrinMenu] == 4) *currentScreen = pantallaSubMenuHistorial;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b04      	cmp	r3, #4
 8000aae:	d103      	bne.n	8000ab8 <UpdateDataGUI+0x120>
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	2205      	movs	r2, #5
 8000ab4:	601a      	str	r2, [r3, #0]
						else if(_indexes[cont_item_PrinMenu] == 5) *currentScreen = pantallaSubMenuAcercaDe_part1;
					break;
 8000ab6:	e279      	b.n	8000fac <UpdateDataGUI+0x614>
						else if(_indexes[cont_item_PrinMenu] == 5) *currentScreen = pantallaSubMenuAcercaDe_part1;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	3304      	adds	r3, #4
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b05      	cmp	r3, #5
 8000ac0:	f040 8274 	bne.w	8000fac <UpdateDataGUI+0x614>
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	2206      	movs	r2, #6
 8000ac8:	601a      	str	r2, [r3, #0]
					break;
 8000aca:	e26f      	b.n	8000fac <UpdateDataGUI+0x614>

					case pantallaSubMenuExtrusores: //sub EXTRUSORES
						if(_indexes[cont_item_SubMenuExtrusores] == 0) *currentScreen = pantallaMainMenu_part1;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	3308      	adds	r3, #8
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d103      	bne.n	8000ade <UpdateDataGUI+0x146>
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	220b      	movs	r2, #11
 8000ada:	601a      	str	r2, [r3, #0]
						else if (_indexes[cont_item_SubMenuExtrusores] == 1) *currentScreen = pantallaSubmenuSetTempExt;
					break;
 8000adc:	e268      	b.n	8000fb0 <UpdateDataGUI+0x618>
						else if (_indexes[cont_item_SubMenuExtrusores] == 1) *currentScreen = pantallaSubmenuSetTempExt;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	3308      	adds	r3, #8
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	f040 8263 	bne.w	8000fb0 <UpdateDataGUI+0x618>
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	2208      	movs	r2, #8
 8000aee:	601a      	str	r2, [r3, #0]
					break;
 8000af0:	e25e      	b.n	8000fb0 <UpdateDataGUI+0x618>

					case pantallaSubMenuColectoresFil:	//sub COLECTORES fil.
						if(_indexes[cont_item_SubMenuColectores] == 0) *currentScreen = pantallaMainMenu_part1;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	330c      	adds	r3, #12
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d103      	bne.n	8000b04 <UpdateDataGUI+0x16c>
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	220b      	movs	r2, #11
 8000b00:	601a      	str	r2, [r3, #0]
						else if(_indexes[cont_item_SubMenuColectores] == 1)	*currentScreen = pantallaSubMenuSelVelocidadColFil;
					break;
 8000b02:	e257      	b.n	8000fb4 <UpdateDataGUI+0x61c>
						else if(_indexes[cont_item_SubMenuColectores] == 1)	*currentScreen = pantallaSubMenuSelVelocidadColFil;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	330c      	adds	r3, #12
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	f040 8252 	bne.w	8000fb4 <UpdateDataGUI+0x61c>
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	221f      	movs	r2, #31
 8000b14:	601a      	str	r2, [r3, #0]
					break;
 8000b16:	e24d      	b.n	8000fb4 <UpdateDataGUI+0x61c>

					case pantallaSubMenuAlarmas:	//sub menu ALARMAS
						if(_indexes[cont_item_SubMenuAlarmas] == 0) *currentScreen = pantallaMainMenu_part1;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	3310      	adds	r3, #16
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d103      	bne.n	8000b2a <UpdateDataGUI+0x192>
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	220b      	movs	r2, #11
 8000b26:	601a      	str	r2, [r3, #0]
						else if(_indexes[cont_item_SubMenuAlarmas] == 2)
						{
							if(_petFilConv -> soundAlarm_state == false)	_petFilConv -> soundAlarm_state = true;
							else	_petFilConv -> soundAlarm_state = false;
						}
					break;
 8000b28:	e246      	b.n	8000fb8 <UpdateDataGUI+0x620>
						else if(_indexes[cont_item_SubMenuAlarmas] == 1)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	3310      	adds	r3, #16
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d10e      	bne.n	8000b52 <UpdateDataGUI+0x1ba>
							if(_petFilConv -> lightAlarm_state == false)	_petFilConv -> lightAlarm_state = true;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	785b      	ldrb	r3, [r3, #1]
 8000b38:	f083 0301 	eor.w	r3, r3, #1
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d003      	beq.n	8000b4a <UpdateDataGUI+0x1b2>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2201      	movs	r2, #1
 8000b46:	705a      	strb	r2, [r3, #1]
					break;
 8000b48:	e236      	b.n	8000fb8 <UpdateDataGUI+0x620>
							else	_petFilConv -> lightAlarm_state = false;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	705a      	strb	r2, [r3, #1]
					break;
 8000b50:	e232      	b.n	8000fb8 <UpdateDataGUI+0x620>
						else if(_indexes[cont_item_SubMenuAlarmas] == 2)
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3310      	adds	r3, #16
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	f040 822d 	bne.w	8000fb8 <UpdateDataGUI+0x620>
							if(_petFilConv -> soundAlarm_state == false)	_petFilConv -> soundAlarm_state = true;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	f083 0301 	eor.w	r3, r3, #1
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d003      	beq.n	8000b74 <UpdateDataGUI+0x1dc>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2201      	movs	r2, #1
 8000b70:	701a      	strb	r2, [r3, #0]
					break;
 8000b72:	e221      	b.n	8000fb8 <UpdateDataGUI+0x620>
							else	_petFilConv -> soundAlarm_state = false;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]
					break;
 8000b7a:	e21d      	b.n	8000fb8 <UpdateDataGUI+0x620>

					case pantallaSubMenuHistorial:	//sub HISTORIAL
						if(_indexes[cont_item_SubMenuHistorial] == 0) *currentScreen = pantallaMainMenu_part2;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	3314      	adds	r3, #20
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f040 821a 	bne.w	8000fbc <UpdateDataGUI+0x624>
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	601a      	str	r2, [r3, #0]
						else{} //borra el valor acumulador del extrusor
					break;
 8000b8e:	e215      	b.n	8000fbc <UpdateDataGUI+0x624>

					case pantallaSubMenuSelVelocidadColFil:	//sub selector velocidad

						if(_indexes[cont_item_SubMenuSelVelCol] == 0)
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	331c      	adds	r3, #28
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d10d      	bne.n	8000bb6 <UpdateDataGUI+0x21e>
						{
							if(*_vel_col != APAGADO)
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d041      	beq.n	8000c26 <UpdateDataGUI+0x28e>
							{
								*_vel_col = APAGADO;
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
								_petFilConv -> col_state = false;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2200      	movs	r2, #0
 8000bac:	709a      	strb	r2, [r3, #2]
								ControlMotor(_petFilConv);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f001 f8fd 	bl	8001dae <ControlMotor>
 8000bb4:	e037      	b.n	8000c26 <UpdateDataGUI+0x28e>
							}
						}

						else if(_indexes[cont_item_SubMenuSelVelCol] == 1)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	331c      	adds	r3, #28
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d10d      	bne.n	8000bdc <UpdateDataGUI+0x244>
						{
							if(*_vel_col != VELOCIDAD_1)
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d02e      	beq.n	8000c26 <UpdateDataGUI+0x28e>
							{
								*_vel_col = VELOCIDAD_1;
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	2201      	movs	r2, #1
 8000bcc:	601a      	str	r2, [r3, #0]
								_petFilConv -> col_state = true;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	709a      	strb	r2, [r3, #2]
								ControlMotor(_petFilConv);
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f001 f8ea 	bl	8001dae <ControlMotor>
 8000bda:	e024      	b.n	8000c26 <UpdateDataGUI+0x28e>
							}
						}

						else if(_indexes[cont_item_SubMenuSelVelCol] == 2)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	331c      	adds	r3, #28
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d10d      	bne.n	8000c02 <UpdateDataGUI+0x26a>
						{
							if(*_vel_col != VELOCIDAD_2)
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d01b      	beq.n	8000c26 <UpdateDataGUI+0x28e>
							{
								*_vel_col = VELOCIDAD_2;
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	601a      	str	r2, [r3, #0]
								_petFilConv -> col_state = true;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	709a      	strb	r2, [r3, #2]
								ControlMotor(_petFilConv);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f001 f8d7 	bl	8001dae <ControlMotor>
 8000c00:	e011      	b.n	8000c26 <UpdateDataGUI+0x28e>
							}
						}
						else if(_indexes[cont_item_SubMenuSelVelCol] == 3)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	331c      	adds	r3, #28
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b03      	cmp	r3, #3
 8000c0a:	d10c      	bne.n	8000c26 <UpdateDataGUI+0x28e>
						{
							if(*_vel_col != VELOCIDAD_3)
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b03      	cmp	r3, #3
 8000c12:	d008      	beq.n	8000c26 <UpdateDataGUI+0x28e>
							{
								*_vel_col = VELOCIDAD_3;
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	2203      	movs	r2, #3
 8000c18:	601a      	str	r2, [r3, #0]
								_petFilConv -> col_state = true;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	709a      	strb	r2, [r3, #2]
								ControlMotor(_petFilConv);
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f001 f8c4 	bl	8001dae <ControlMotor>
							}
						}

						*currentScreen = pantallaSubMenuColectoresFil;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	2203      	movs	r2, #3
 8000c2a:	601a      	str	r2, [r3, #0]
					break;
 8000c2c:	e1cb      	b.n	8000fc6 <UpdateDataGUI+0x62e>

					case pantallaSubMenuAcercaDe_part1:	//sub menu ACERCA DE...
						*currentScreen = pantallaMainMenu_part2;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	220c      	movs	r2, #12
 8000c32:	601a      	str	r2, [r3, #0]
					break;
 8000c34:	e1c7      	b.n	8000fc6 <UpdateDataGUI+0x62e>

					case pantallaSubMenuAcercaDe_part2:	//sub menu ACERCA DE...
						*currentScreen = pantallaMainMenu_part2;
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	220c      	movs	r2, #12
 8000c3a:	601a      	str	r2, [r3, #0]
					break;
 8000c3c:	e1c3      	b.n	8000fc6 <UpdateDataGUI+0x62e>

					case pantallaSubmenuSetTempExt:	//menu seteo de temperatura COLECTORES
						_petFilConv -> setExtTemp = _petFilConv -> previousSetExtTemp;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	60da      	str	r2, [r3, #12]
						_petFilConv -> flagTemp_state = false;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	741a      	strb	r2, [r3, #16]
						*currentScreen = pantallaSubMenuExtrusores;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	2202      	movs	r2, #2
 8000c50:	601a      	str	r2, [r3, #0]
					break;
 8000c52:	e1b8      	b.n	8000fc6 <UpdateDataGUI+0x62e>

					default: break;
				}
			}

			else if(*_btn == Left)
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	f040 80a7 	bne.w	8000dac <UpdateDataGUI+0x414>
			{
					switch(*currentScreen)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b1f      	cmp	r3, #31
 8000c64:	f200 8089 	bhi.w	8000d7a <UpdateDataGUI+0x3e2>
 8000c68:	a201      	add	r2, pc, #4	; (adr r2, 8000c70 <UpdateDataGUI+0x2d8>)
 8000c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c6e:	bf00      	nop
 8000c70:	08000fc1 	.word	0x08000fc1
 8000c74:	08000d7b 	.word	0x08000d7b
 8000c78:	08000d7b 	.word	0x08000d7b
 8000c7c:	08000d7b 	.word	0x08000d7b
 8000c80:	08000d7b 	.word	0x08000d7b
 8000c84:	08000d7b 	.word	0x08000d7b
 8000c88:	08000d7b 	.word	0x08000d7b
 8000c8c:	08000d57 	.word	0x08000d57
 8000c90:	08000d5f 	.word	0x08000d5f
 8000c94:	08000d7b 	.word	0x08000d7b
 8000c98:	08000d7b 	.word	0x08000d7b
 8000c9c:	08000cf1 	.word	0x08000cf1
 8000ca0:	08000d11 	.word	0x08000d11
 8000ca4:	08000d7b 	.word	0x08000d7b
 8000ca8:	08000d7b 	.word	0x08000d7b
 8000cac:	08000d7b 	.word	0x08000d7b
 8000cb0:	08000d7b 	.word	0x08000d7b
 8000cb4:	08000d7b 	.word	0x08000d7b
 8000cb8:	08000d7b 	.word	0x08000d7b
 8000cbc:	08000d7b 	.word	0x08000d7b
 8000cc0:	08000d7b 	.word	0x08000d7b
 8000cc4:	08000d7b 	.word	0x08000d7b
 8000cc8:	08000d7b 	.word	0x08000d7b
 8000ccc:	08000d7b 	.word	0x08000d7b
 8000cd0:	08000d7b 	.word	0x08000d7b
 8000cd4:	08000d7b 	.word	0x08000d7b
 8000cd8:	08000d7b 	.word	0x08000d7b
 8000cdc:	08000d7b 	.word	0x08000d7b
 8000ce0:	08000d7b 	.word	0x08000d7b
 8000ce4:	08000d7b 	.word	0x08000d7b
 8000ce8:	08000d7b 	.word	0x08000d7b
 8000cec:	08000d37 	.word	0x08000d37
						case pantallaWorkingScreen:	//pantalla de trabajo
							//NADA
						break;

						case pantallaMainMenu_part1:
							if(_indexes[cont_item_PrinMenu] == 0) _indexes[cont_item_PrinMenu] = 0;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	3304      	adds	r3, #4
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d104      	bne.n	8000d04 <UpdateDataGUI+0x36c>
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
							else	_indexes[cont_item_PrinMenu]--;
						break;
 8000d02:	e160      	b.n	8000fc6 <UpdateDataGUI+0x62e>
							else	_indexes[cont_item_PrinMenu]--;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	3304      	adds	r3, #4
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	3a01      	subs	r2, #1
 8000d0c:	601a      	str	r2, [r3, #0]
						break;
 8000d0e:	e15a      	b.n	8000fc6 <UpdateDataGUI+0x62e>

						case pantallaMainMenu_part2:
							if(_indexes[cont_item_PrinMenu] <= 4)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	3304      	adds	r3, #4
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	d807      	bhi.n	8000d2a <UpdateDataGUI+0x392>
							{
								*currentScreen = pantallaMainMenu_part1;
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	220b      	movs	r2, #11
 8000d1e:	601a      	str	r2, [r3, #0]
								_indexes[cont_item_PrinMenu] = 3;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	3304      	adds	r3, #4
 8000d24:	2203      	movs	r2, #3
 8000d26:	601a      	str	r2, [r3, #0]
							}
							else	_indexes[cont_item_PrinMenu]--;
						break;
 8000d28:	e14d      	b.n	8000fc6 <UpdateDataGUI+0x62e>
							else	_indexes[cont_item_PrinMenu]--;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	3a01      	subs	r2, #1
 8000d32:	601a      	str	r2, [r3, #0]
						break;
 8000d34:	e147      	b.n	8000fc6 <UpdateDataGUI+0x62e>

						case pantallaSubMenuSelVelocidadColFil:
							if(_indexes[cont_item_SubMenuSelVelCol] == 0) _indexes[cont_item_SubMenuSelVelCol] = 0;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	331c      	adds	r3, #28
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d104      	bne.n	8000d4a <UpdateDataGUI+0x3b2>
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	331c      	adds	r3, #28
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
							else	_indexes[cont_item_SubMenuSelVelCol]--;
						break;
 8000d48:	e13d      	b.n	8000fc6 <UpdateDataGUI+0x62e>
							else	_indexes[cont_item_SubMenuSelVelCol]--;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	331c      	adds	r3, #28
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	3a01      	subs	r2, #1
 8000d52:	601a      	str	r2, [r3, #0]
						break;
 8000d54:	e137      	b.n	8000fc6 <UpdateDataGUI+0x62e>

						case pantallaSubMenuAcercaDe_part2:	*currentScreen = pantallaSubMenuAcercaDe_part1;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	2206      	movs	r2, #6
 8000d5a:	601a      	str	r2, [r3, #0]
						break;
 8000d5c:	e133      	b.n	8000fc6 <UpdateDataGUI+0x62e>
						case pantallaSubmenuSetTempExt:


						//	if(_petFilConv -> setExtTemp == 0)	_petFilConv -> setExtTemp = 0;
						//	else _petFilConv -> setExtTemp--;
							if(_petFilConv -> previousSetExtTemp == 0) _petFilConv -> previousSetExtTemp = 0;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d103      	bne.n	8000d6e <UpdateDataGUI+0x3d6>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
							else _petFilConv -> previousSetExtTemp = _petFilConv -> previousSetExtTemp - 5;
						break;
 8000d6c:	e12b      	b.n	8000fc6 <UpdateDataGUI+0x62e>
							else _petFilConv -> previousSetExtTemp = _petFilConv -> previousSetExtTemp - 5;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	1f5a      	subs	r2, r3, #5
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	609a      	str	r2, [r3, #8]
						break;
 8000d78:	e125      	b.n	8000fc6 <UpdateDataGUI+0x62e>

						default:
							if(_indexes[*currentScreen] == 0) _indexes[*currentScreen] = 0;
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	4413      	add	r3, r2
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d107      	bne.n	8000d9a <UpdateDataGUI+0x402>
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	4413      	add	r3, r2
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]

						default: break;
					}
			}
	}
}
 8000d98:	e115      	b.n	8000fc6 <UpdateDataGUI+0x62e>
							else _indexes[*currentScreen]--;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	68fa      	ldr	r2, [r7, #12]
 8000da2:	4413      	add	r3, r2
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	3a01      	subs	r2, #1
 8000da8:	601a      	str	r2, [r3, #0]
}
 8000daa:	e10c      	b.n	8000fc6 <UpdateDataGUI+0x62e>
			else if (*_btn == Right)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b03      	cmp	r3, #3
 8000db2:	f040 80f5 	bne.w	8000fa0 <UpdateDataGUI+0x608>
					switch(*currentScreen)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b1f      	cmp	r3, #31
 8000dbc:	f200 8102 	bhi.w	8000fc4 <UpdateDataGUI+0x62c>
 8000dc0:	a201      	add	r2, pc, #4	; (adr r2, 8000dc8 <UpdateDataGUI+0x430>)
 8000dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc6:	bf00      	nop
 8000dc8:	08000fc5 	.word	0x08000fc5
 8000dcc:	08000fc5 	.word	0x08000fc5
 8000dd0:	08000e8f 	.word	0x08000e8f
 8000dd4:	08000ec1 	.word	0x08000ec1
 8000dd8:	08000f13 	.word	0x08000f13
 8000ddc:	08000f45 	.word	0x08000f45
 8000de0:	08000f77 	.word	0x08000f77
 8000de4:	08000fc5 	.word	0x08000fc5
 8000de8:	08000f7f 	.word	0x08000f7f
 8000dec:	08000fc5 	.word	0x08000fc5
 8000df0:	08000fc5 	.word	0x08000fc5
 8000df4:	08000e49 	.word	0x08000e49
 8000df8:	08000e6f 	.word	0x08000e6f
 8000dfc:	08000fc5 	.word	0x08000fc5
 8000e00:	08000fc5 	.word	0x08000fc5
 8000e04:	08000fc5 	.word	0x08000fc5
 8000e08:	08000fc5 	.word	0x08000fc5
 8000e0c:	08000fc5 	.word	0x08000fc5
 8000e10:	08000fc5 	.word	0x08000fc5
 8000e14:	08000fc5 	.word	0x08000fc5
 8000e18:	08000fc5 	.word	0x08000fc5
 8000e1c:	08000fc5 	.word	0x08000fc5
 8000e20:	08000fc5 	.word	0x08000fc5
 8000e24:	08000fc5 	.word	0x08000fc5
 8000e28:	08000fc5 	.word	0x08000fc5
 8000e2c:	08000fc5 	.word	0x08000fc5
 8000e30:	08000fc5 	.word	0x08000fc5
 8000e34:	08000fc5 	.word	0x08000fc5
 8000e38:	08000fc5 	.word	0x08000fc5
 8000e3c:	08000fc5 	.word	0x08000fc5
 8000e40:	08000fc5 	.word	0x08000fc5
 8000e44:	08000ef3 	.word	0x08000ef3
							if(_indexes[cont_item_PrinMenu] >= 3)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	3304      	adds	r3, #4
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d907      	bls.n	8000e62 <UpdateDataGUI+0x4ca>
								*currentScreen = pantallaMainMenu_part2;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	220c      	movs	r2, #12
 8000e56:	601a      	str	r2, [r3, #0]
								_indexes[cont_item_PrinMenu] = 4;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	3304      	adds	r3, #4
 8000e5c:	2204      	movs	r2, #4
 8000e5e:	601a      	str	r2, [r3, #0]
						break;
 8000e60:	e0b1      	b.n	8000fc6 <UpdateDataGUI+0x62e>
							else	_indexes[cont_item_PrinMenu]++;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	3304      	adds	r3, #4
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	3201      	adds	r2, #1
 8000e6a:	601a      	str	r2, [r3, #0]
						break;
 8000e6c:	e0ab      	b.n	8000fc6 <UpdateDataGUI+0x62e>
							if(_indexes[cont_item_PrinMenu] >= 5) _indexes[cont_item_PrinMenu] = 5;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	3304      	adds	r3, #4
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b04      	cmp	r3, #4
 8000e76:	d904      	bls.n	8000e82 <UpdateDataGUI+0x4ea>
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	2205      	movs	r2, #5
 8000e7e:	601a      	str	r2, [r3, #0]
						break;
 8000e80:	e0a1      	b.n	8000fc6 <UpdateDataGUI+0x62e>
							else	_indexes[cont_item_PrinMenu]++;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	3304      	adds	r3, #4
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	3201      	adds	r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]
						break;
 8000e8c:	e09b      	b.n	8000fc6 <UpdateDataGUI+0x62e>
							if(_indexes[*currentScreen] == (cantItemsSubMenuExtrusores - 1)) _indexes[*currentScreen] = cantItemsSubMenuExtrusores - 1;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	4413      	add	r3, r2
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d107      	bne.n	8000eae <UpdateDataGUI+0x516>
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]
						break;
 8000eac:	e08b      	b.n	8000fc6 <UpdateDataGUI+0x62e>
							else _indexes[*currentScreen]++;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	3201      	adds	r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]
						break;
 8000ebe:	e082      	b.n	8000fc6 <UpdateDataGUI+0x62e>
							if(_indexes[*currentScreen] == (cantItemsSubMenuColectores - 1)) _indexes[*currentScreen] = cantItemsSubMenuColectores - 1;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	4413      	add	r3, r2
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d107      	bne.n	8000ee0 <UpdateDataGUI+0x548>
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	4413      	add	r3, r2
 8000eda:	2201      	movs	r2, #1
 8000edc:	601a      	str	r2, [r3, #0]
						break;
 8000ede:	e072      	b.n	8000fc6 <UpdateDataGUI+0x62e>
							else _indexes[*currentScreen]++;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	4413      	add	r3, r2
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	3201      	adds	r2, #1
 8000eee:	601a      	str	r2, [r3, #0]
						break;
 8000ef0:	e069      	b.n	8000fc6 <UpdateDataGUI+0x62e>
							if(_indexes[cont_item_SubMenuSelVelCol] >= 3) _indexes[cont_item_PrinMenu] = 3;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	331c      	adds	r3, #28
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d904      	bls.n	8000f06 <UpdateDataGUI+0x56e>
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	3304      	adds	r3, #4
 8000f00:	2203      	movs	r2, #3
 8000f02:	601a      	str	r2, [r3, #0]
						break;
 8000f04:	e05f      	b.n	8000fc6 <UpdateDataGUI+0x62e>
							else	_indexes[cont_item_SubMenuSelVelCol]++;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	331c      	adds	r3, #28
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	3201      	adds	r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]
						break;
 8000f10:	e059      	b.n	8000fc6 <UpdateDataGUI+0x62e>
							if(_indexes[*currentScreen] == (cantItemsSubMenuAlarmas - 1)) _indexes[*currentScreen] = cantItemsSubMenuAlarmas - 1;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d107      	bne.n	8000f32 <UpdateDataGUI+0x59a>
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	601a      	str	r2, [r3, #0]
						break;
 8000f30:	e049      	b.n	8000fc6 <UpdateDataGUI+0x62e>
							else _indexes[*currentScreen]++;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	3201      	adds	r2, #1
 8000f40:	601a      	str	r2, [r3, #0]
						break;
 8000f42:	e040      	b.n	8000fc6 <UpdateDataGUI+0x62e>
							if(_indexes[*currentScreen] == (cantItemsSubMenuHistorial - 1)) _indexes[*currentScreen] = cantItemsSubMenuHistorial - 1;
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d107      	bne.n	8000f64 <UpdateDataGUI+0x5cc>
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	2202      	movs	r2, #2
 8000f60:	601a      	str	r2, [r3, #0]
						break;
 8000f62:	e030      	b.n	8000fc6 <UpdateDataGUI+0x62e>
							else _indexes[*currentScreen]++;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	3201      	adds	r2, #1
 8000f72:	601a      	str	r2, [r3, #0]
						break;
 8000f74:	e027      	b.n	8000fc6 <UpdateDataGUI+0x62e>
						case pantallaSubMenuAcercaDe_part1: *currentScreen = pantallaSubMenuAcercaDe_part2;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	2207      	movs	r2, #7
 8000f7a:	601a      	str	r2, [r3, #0]
						break;
 8000f7c:	e023      	b.n	8000fc6 <UpdateDataGUI+0x62e>
							if(_petFilConv -> previousSetExtTemp == MAX_TEMP) _petFilConv -> previousSetExtTemp = MAX_TEMP;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f240 1213 	movw	r2, #275	; 0x113
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d104      	bne.n	8000f94 <UpdateDataGUI+0x5fc>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f240 1213 	movw	r2, #275	; 0x113
 8000f90:	609a      	str	r2, [r3, #8]
						break;
 8000f92:	e018      	b.n	8000fc6 <UpdateDataGUI+0x62e>
							else _petFilConv -> previousSetExtTemp = _petFilConv -> previousSetExtTemp + STEP_TEMP;	//Temp++
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	1d5a      	adds	r2, r3, #5
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
						break;
 8000f9e:	e012      	b.n	8000fc6 <UpdateDataGUI+0x62e>
			}
 8000fa0:	bf00      	nop
 8000fa2:	e010      	b.n	8000fc6 <UpdateDataGUI+0x62e>
					default: break;
 8000fa4:	bf00      	nop
 8000fa6:	e00e      	b.n	8000fc6 <UpdateDataGUI+0x62e>
					break;
 8000fa8:	bf00      	nop
 8000faa:	e00c      	b.n	8000fc6 <UpdateDataGUI+0x62e>
					break;
 8000fac:	bf00      	nop
 8000fae:	e00a      	b.n	8000fc6 <UpdateDataGUI+0x62e>
					break;
 8000fb0:	bf00      	nop
 8000fb2:	e008      	b.n	8000fc6 <UpdateDataGUI+0x62e>
					break;
 8000fb4:	bf00      	nop
 8000fb6:	e006      	b.n	8000fc6 <UpdateDataGUI+0x62e>
					break;
 8000fb8:	bf00      	nop
 8000fba:	e004      	b.n	8000fc6 <UpdateDataGUI+0x62e>
					break;
 8000fbc:	bf00      	nop
 8000fbe:	e002      	b.n	8000fc6 <UpdateDataGUI+0x62e>
						break;
 8000fc0:	bf00      	nop
 8000fc2:	e000      	b.n	8000fc6 <UpdateDataGUI+0x62e>
						default: break;
 8000fc4:	bf00      	nop
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop

08000fd0 <UpdateCursor>:

void UpdateCursor(uint32_t *_indexes , PETfilConv *_petFilConv , uint32_t *currentScreen , uint32_t *_vel_col)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	603b      	str	r3, [r7, #0]
	  ClearAllCursor();
 8000fde:	f000 fb67 	bl	80016b0 <ClearAllCursor>

	switch(*currentScreen)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	3b02      	subs	r3, #2
 8000fe8:	2b1d      	cmp	r3, #29
 8000fea:	f200 80b8 	bhi.w	800115e <UpdateCursor+0x18e>
 8000fee:	a201      	add	r2, pc, #4	; (adr r2, 8000ff4 <UpdateCursor+0x24>)
 8000ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff4:	0800108d 	.word	0x0800108d
 8000ff8:	0800109d 	.word	0x0800109d
 8000ffc:	080010ad 	.word	0x080010ad
 8001000:	08001101 	.word	0x08001101
 8001004:	0800115f 	.word	0x0800115f
 8001008:	0800115f 	.word	0x0800115f
 800100c:	0800115f 	.word	0x0800115f
 8001010:	0800115f 	.word	0x0800115f
 8001014:	0800115f 	.word	0x0800115f
 8001018:	0800106d 	.word	0x0800106d
 800101c:	0800107d 	.word	0x0800107d
 8001020:	0800115f 	.word	0x0800115f
 8001024:	0800115f 	.word	0x0800115f
 8001028:	0800115f 	.word	0x0800115f
 800102c:	0800115f 	.word	0x0800115f
 8001030:	0800115f 	.word	0x0800115f
 8001034:	0800115f 	.word	0x0800115f
 8001038:	0800115f 	.word	0x0800115f
 800103c:	0800115f 	.word	0x0800115f
 8001040:	0800115f 	.word	0x0800115f
 8001044:	0800115f 	.word	0x0800115f
 8001048:	0800115f 	.word	0x0800115f
 800104c:	0800115f 	.word	0x0800115f
 8001050:	0800115f 	.word	0x0800115f
 8001054:	0800115f 	.word	0x0800115f
 8001058:	0800115f 	.word	0x0800115f
 800105c:	0800115f 	.word	0x0800115f
 8001060:	0800115f 	.word	0x0800115f
 8001064:	0800115f 	.word	0x0800115f
 8001068:	08001111 	.word	0x08001111
	{
		case pantallaMainMenu_part1: PrintCursor(_indexes[cont_item_PrinMenu]);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	3304      	adds	r3, #4
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4618      	mov	r0, r3
 8001076:	f000 fad9 	bl	800162c <PrintCursor>
		break;
 800107a:	e073      	b.n	8001164 <UpdateCursor+0x194>

		case pantallaMainMenu_part2: PrintCursor(_indexes[cont_item_PrinMenu]);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	3304      	adds	r3, #4
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fad1 	bl	800162c <PrintCursor>
		break;
 800108a:	e06b      	b.n	8001164 <UpdateCursor+0x194>

		case pantallaSubMenuExtrusores: PrintCursor(_indexes[cont_item_SubMenuExtrusores]);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	3308      	adds	r3, #8
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	4618      	mov	r0, r3
 8001096:	f000 fac9 	bl	800162c <PrintCursor>
		break;
 800109a:	e063      	b.n	8001164 <UpdateCursor+0x194>

		case pantallaSubMenuColectoresFil:	PrintCursor(_indexes[cont_item_SubMenuColectores]);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	330c      	adds	r3, #12
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 fac1 	bl	800162c <PrintCursor>
		break;
 80010aa:	e05b      	b.n	8001164 <UpdateCursor+0x194>

		case pantallaSubMenuAlarmas:
			PrintCursor(_indexes[cont_item_SubMenuAlarmas]);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	3310      	adds	r3, #16
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 fab9 	bl	800162c <PrintCursor>
			if(_petFilConv -> lightAlarm_state == true)
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	785b      	ldrb	r3, [r3, #1]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d006      	beq.n	80010d0 <UpdateCursor+0x100>
			{
				lcd_send_cmd(XC_LINE2_LCD);
 80010c2:	20d1      	movs	r0, #209	; 0xd1
 80010c4:	f000 f856 	bl	8001174 <lcd_send_cmd>
				lcd_send_string("X");
 80010c8:	4828      	ldr	r0, [pc, #160]	; (800116c <UpdateCursor+0x19c>)
 80010ca:	f000 f8ee 	bl	80012aa <lcd_send_string>
 80010ce:	e005      	b.n	80010dc <UpdateCursor+0x10c>
			}
			else
			{
				lcd_send_cmd(XC_LINE2_LCD);
 80010d0:	20d1      	movs	r0, #209	; 0xd1
 80010d2:	f000 f84f 	bl	8001174 <lcd_send_cmd>
				lcd_send_string(" ");
 80010d6:	4826      	ldr	r0, [pc, #152]	; (8001170 <UpdateCursor+0x1a0>)
 80010d8:	f000 f8e7 	bl	80012aa <lcd_send_string>
			}

			if(_petFilConv -> soundAlarm_state == true)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d006      	beq.n	80010f2 <UpdateCursor+0x122>
			{
				lcd_send_cmd(XC_LINE3_LCD);
 80010e4:	20a5      	movs	r0, #165	; 0xa5
 80010e6:	f000 f845 	bl	8001174 <lcd_send_cmd>
				lcd_send_string("X");
 80010ea:	4820      	ldr	r0, [pc, #128]	; (800116c <UpdateCursor+0x19c>)
 80010ec:	f000 f8dd 	bl	80012aa <lcd_send_string>
			else
			{
				lcd_send_cmd(XC_LINE3_LCD);
				lcd_send_string(" ");
			}
		break;
 80010f0:	e038      	b.n	8001164 <UpdateCursor+0x194>
				lcd_send_cmd(XC_LINE3_LCD);
 80010f2:	20a5      	movs	r0, #165	; 0xa5
 80010f4:	f000 f83e 	bl	8001174 <lcd_send_cmd>
				lcd_send_string(" ");
 80010f8:	481d      	ldr	r0, [pc, #116]	; (8001170 <UpdateCursor+0x1a0>)
 80010fa:	f000 f8d6 	bl	80012aa <lcd_send_string>
		break;
 80010fe:	e031      	b.n	8001164 <UpdateCursor+0x194>

		case pantallaSubMenuHistorial: PrintCursor(_indexes[cont_item_SubMenuHistorial]);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	3314      	adds	r3, #20
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	4618      	mov	r0, r3
 800110a:	f000 fa8f 	bl	800162c <PrintCursor>
		break;
 800110e:	e029      	b.n	8001164 <UpdateCursor+0x194>

		case pantallaSubMenuSelVelocidadColFil:
			PrintCursor(_indexes[cont_item_SubMenuSelVelCol]);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	331c      	adds	r3, #28
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	4618      	mov	r0, r3
 800111a:	f000 fa87 	bl	800162c <PrintCursor>
			if(*_vel_col == APAGADO)	PrintX(1);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d103      	bne.n	800112e <UpdateCursor+0x15e>
 8001126:	2001      	movs	r0, #1
 8001128:	f000 fa36 	bl	8001598 <PrintX>
			else if(*_vel_col == VELOCIDAD_1)	PrintX(2);
			else if(*_vel_col == VELOCIDAD_2)	PrintX(3);
			else if(*_vel_col == VELOCIDAD_3)	PrintX(4);
		break;
 800112c:	e019      	b.n	8001162 <UpdateCursor+0x192>
			else if(*_vel_col == VELOCIDAD_1)	PrintX(2);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d103      	bne.n	800113e <UpdateCursor+0x16e>
 8001136:	2002      	movs	r0, #2
 8001138:	f000 fa2e 	bl	8001598 <PrintX>
		break;
 800113c:	e011      	b.n	8001162 <UpdateCursor+0x192>
			else if(*_vel_col == VELOCIDAD_2)	PrintX(3);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d103      	bne.n	800114e <UpdateCursor+0x17e>
 8001146:	2003      	movs	r0, #3
 8001148:	f000 fa26 	bl	8001598 <PrintX>
		break;
 800114c:	e009      	b.n	8001162 <UpdateCursor+0x192>
			else if(*_vel_col == VELOCIDAD_3)	PrintX(4);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b03      	cmp	r3, #3
 8001154:	d105      	bne.n	8001162 <UpdateCursor+0x192>
 8001156:	2004      	movs	r0, #4
 8001158:	f000 fa1e 	bl	8001598 <PrintX>
		break;
 800115c:	e001      	b.n	8001162 <UpdateCursor+0x192>

		default: break;
 800115e:	bf00      	nop
 8001160:	e000      	b.n	8001164 <UpdateCursor+0x194>
		break;
 8001162:	bf00      	nop
	}
}
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	08005718 	.word	0x08005718
 8001170:	0800571c 	.word	0x0800571c

08001174 <lcd_send_cmd>:
};

//****** FUNCTIONS IMPLEMENTATIONS ******

void lcd_send_cmd (char cmd)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af02      	add	r7, sp, #8
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	f023 030f 	bic.w	r3, r3, #15
 8001184:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	f043 030c 	orr.w	r3, r3, #12
 8001192:	b2db      	uxtb	r3, r3
 8001194:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	f043 0308 	orr.w	r3, r3, #8
 800119c:	b2db      	uxtb	r3, r3
 800119e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80011a0:	7bbb      	ldrb	r3, [r7, #14]
 80011a2:	f043 030c 	orr.w	r3, r3, #12
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80011aa:	7bbb      	ldrb	r3, [r7, #14]
 80011ac:	f043 0308 	orr.w	r3, r3, #8
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80011b4:	f107 0208 	add.w	r2, r7, #8
 80011b8:	2364      	movs	r3, #100	; 0x64
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2304      	movs	r3, #4
 80011be:	214e      	movs	r1, #78	; 0x4e
 80011c0:	4803      	ldr	r0, [pc, #12]	; (80011d0 <lcd_send_cmd+0x5c>)
 80011c2:	f002 fa5d 	bl	8003680 <HAL_I2C_Master_Transmit>
}
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200001b0 	.word	0x200001b0

080011d4 <lcd_send_data>:

void lcd_send_data (char data)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af02      	add	r7, sp, #8
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	f023 030f 	bic.w	r3, r3, #15
 80011e4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	011b      	lsls	r3, r3, #4
 80011ea:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	f043 030d 	orr.w	r3, r3, #13
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	f043 0309 	orr.w	r3, r3, #9
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001200:	7bbb      	ldrb	r3, [r7, #14]
 8001202:	f043 030d 	orr.w	r3, r3, #13
 8001206:	b2db      	uxtb	r3, r3
 8001208:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 800120a:	7bbb      	ldrb	r3, [r7, #14]
 800120c:	f043 0309 	orr.w	r3, r3, #9
 8001210:	b2db      	uxtb	r3, r3
 8001212:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001214:	f107 0208 	add.w	r2, r7, #8
 8001218:	2364      	movs	r3, #100	; 0x64
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2304      	movs	r3, #4
 800121e:	214e      	movs	r1, #78	; 0x4e
 8001220:	4803      	ldr	r0, [pc, #12]	; (8001230 <lcd_send_data+0x5c>)
 8001222:	f002 fa2d 	bl	8003680 <HAL_I2C_Master_Transmit>
}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200001b0 	.word	0x200001b0

08001234 <lcd_init>:
		lcd_send_data (' ');
	}
}

bool lcd_init (void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001238:	2032      	movs	r0, #50	; 0x32
 800123a:	f001 f817 	bl	800226c <HAL_Delay>
	lcd_send_cmd (0x30);
 800123e:	2030      	movs	r0, #48	; 0x30
 8001240:	f7ff ff98 	bl	8001174 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001244:	2005      	movs	r0, #5
 8001246:	f001 f811 	bl	800226c <HAL_Delay>
	lcd_send_cmd (0x30);
 800124a:	2030      	movs	r0, #48	; 0x30
 800124c:	f7ff ff92 	bl	8001174 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001250:	2001      	movs	r0, #1
 8001252:	f001 f80b 	bl	800226c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001256:	2030      	movs	r0, #48	; 0x30
 8001258:	f7ff ff8c 	bl	8001174 <lcd_send_cmd>
	HAL_Delay(10);
 800125c:	200a      	movs	r0, #10
 800125e:	f001 f805 	bl	800226c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001262:	2020      	movs	r0, #32
 8001264:	f7ff ff86 	bl	8001174 <lcd_send_cmd>
	HAL_Delay(10);
 8001268:	200a      	movs	r0, #10
 800126a:	f000 ffff 	bl	800226c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800126e:	2028      	movs	r0, #40	; 0x28
 8001270:	f7ff ff80 	bl	8001174 <lcd_send_cmd>
	HAL_Delay(1);
 8001274:	2001      	movs	r0, #1
 8001276:	f000 fff9 	bl	800226c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800127a:	2008      	movs	r0, #8
 800127c:	f7ff ff7a 	bl	8001174 <lcd_send_cmd>
	HAL_Delay(1);
 8001280:	2001      	movs	r0, #1
 8001282:	f000 fff3 	bl	800226c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001286:	2001      	movs	r0, #1
 8001288:	f7ff ff74 	bl	8001174 <lcd_send_cmd>
	HAL_Delay(1);
 800128c:	2001      	movs	r0, #1
 800128e:	f000 ffed 	bl	800226c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001292:	2006      	movs	r0, #6
 8001294:	f7ff ff6e 	bl	8001174 <lcd_send_cmd>
	HAL_Delay(1);
 8001298:	2001      	movs	r0, #1
 800129a:	f000 ffe7 	bl	800226c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800129e:	200c      	movs	r0, #12
 80012a0:	f7ff ff68 	bl	8001174 <lcd_send_cmd>

	return true;
 80012a4:	2301      	movs	r3, #1
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	bd80      	pop	{r7, pc}

080012aa <lcd_send_string>:

void lcd_send_string (const char *str)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80012b2:	e006      	b.n	80012c2 <lcd_send_string+0x18>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	1c5a      	adds	r2, r3, #1
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff89 	bl	80011d4 <lcd_send_data>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f4      	bne.n	80012b4 <lcd_send_string+0xa>
}
 80012ca:	bf00      	nop
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <PresentacionLCD>:

void PresentacionLCD(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	ClearScreen();
 80012d8:	f000 fa36 	bl	8001748 <ClearScreen>
	HAL_Delay(100);
 80012dc:	2064      	movs	r0, #100	; 0x64
 80012de:	f000 ffc5 	bl	800226c <HAL_Delay>
	PrintScreen(screenStart);
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <PresentacionLCD+0x24>)
 80012e4:	f000 fa0a 	bl	80016fc <PrintScreen>
	HAL_Delay(4000);
 80012e8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80012ec:	f000 ffbe 	bl	800226c <HAL_Delay>
	ClearScreen();
 80012f0:	f000 fa2a 	bl	8001748 <ClearScreen>
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	2000000c 	.word	0x2000000c

080012fc <UpdateLCD>:

void UpdateLCD(PETfilConv *_petFilConv , uint32_t *currentScreen)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
	static uint32_t previousScreen;

	if(*currentScreen != previousScreen) //si la pantalla actual es distinto a la anterior o si la pantalla actual es la de seteo de temp de extrusor
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4b47      	ldr	r3, [pc, #284]	; (8001428 <UpdateLCD+0x12c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	429a      	cmp	r2, r3
 8001310:	d076      	beq.n	8001400 <UpdateLCD+0x104>
	{
		previousScreen = *currentScreen;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a44      	ldr	r2, [pc, #272]	; (8001428 <UpdateLCD+0x12c>)
 8001318:	6013      	str	r3, [r2, #0]

		switch(*currentScreen)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b1f      	cmp	r3, #31
 8001320:	d870      	bhi.n	8001404 <UpdateLCD+0x108>
 8001322:	a201      	add	r2, pc, #4	; (adr r2, 8001328 <UpdateLCD+0x2c>)
 8001324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001328:	080013a9 	.word	0x080013a9
 800132c:	08001405 	.word	0x08001405
 8001330:	080013c1 	.word	0x080013c1
 8001334:	080013c9 	.word	0x080013c9
 8001338:	080013d1 	.word	0x080013d1
 800133c:	080013d9 	.word	0x080013d9
 8001340:	080013e1 	.word	0x080013e1
 8001344:	080013e9 	.word	0x080013e9
 8001348:	080013f1 	.word	0x080013f1
 800134c:	08001405 	.word	0x08001405
 8001350:	08001405 	.word	0x08001405
 8001354:	080013b1 	.word	0x080013b1
 8001358:	080013b9 	.word	0x080013b9
 800135c:	08001405 	.word	0x08001405
 8001360:	08001405 	.word	0x08001405
 8001364:	08001405 	.word	0x08001405
 8001368:	08001405 	.word	0x08001405
 800136c:	08001405 	.word	0x08001405
 8001370:	08001405 	.word	0x08001405
 8001374:	08001405 	.word	0x08001405
 8001378:	08001405 	.word	0x08001405
 800137c:	08001405 	.word	0x08001405
 8001380:	08001405 	.word	0x08001405
 8001384:	08001405 	.word	0x08001405
 8001388:	08001405 	.word	0x08001405
 800138c:	08001405 	.word	0x08001405
 8001390:	08001405 	.word	0x08001405
 8001394:	08001405 	.word	0x08001405
 8001398:	08001405 	.word	0x08001405
 800139c:	08001405 	.word	0x08001405
 80013a0:	08001405 	.word	0x08001405
 80013a4:	080013f9 	.word	0x080013f9
		{
			case pantallaWorkingScreen: PrintScreenWorking(_petFilConv);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 f897 	bl	80014dc <PrintScreenWorking>
			break;
 80013ae:	e02a      	b.n	8001406 <UpdateLCD+0x10a>

			case pantallaMainMenu_part1: PrintScreen(prinMenu1);
 80013b0:	481e      	ldr	r0, [pc, #120]	; (800142c <UpdateLCD+0x130>)
 80013b2:	f000 f9a3 	bl	80016fc <PrintScreen>
			break;
 80013b6:	e026      	b.n	8001406 <UpdateLCD+0x10a>

			case pantallaMainMenu_part2: PrintScreen(prinMenu2);
 80013b8:	481d      	ldr	r0, [pc, #116]	; (8001430 <UpdateLCD+0x134>)
 80013ba:	f000 f99f 	bl	80016fc <PrintScreen>
			break;
 80013be:	e022      	b.n	8001406 <UpdateLCD+0x10a>

			case pantallaSubMenuExtrusores: PrintScreen(subMenuExtrusores);
 80013c0:	481c      	ldr	r0, [pc, #112]	; (8001434 <UpdateLCD+0x138>)
 80013c2:	f000 f99b 	bl	80016fc <PrintScreen>
			break;
 80013c6:	e01e      	b.n	8001406 <UpdateLCD+0x10a>

			case pantallaSubMenuColectoresFil: PrintScreen(subMenuColectores);
 80013c8:	481b      	ldr	r0, [pc, #108]	; (8001438 <UpdateLCD+0x13c>)
 80013ca:	f000 f997 	bl	80016fc <PrintScreen>
			break;
 80013ce:	e01a      	b.n	8001406 <UpdateLCD+0x10a>

			case pantallaSubMenuAlarmas: PrintScreen(subMenuAlarmas);
 80013d0:	481a      	ldr	r0, [pc, #104]	; (800143c <UpdateLCD+0x140>)
 80013d2:	f000 f993 	bl	80016fc <PrintScreen>
			break;
 80013d6:	e016      	b.n	8001406 <UpdateLCD+0x10a>

			case pantallaSubMenuHistorial: PrintScreen(subMenuHistorial);
 80013d8:	4819      	ldr	r0, [pc, #100]	; (8001440 <UpdateLCD+0x144>)
 80013da:	f000 f98f 	bl	80016fc <PrintScreen>
			break;
 80013de:	e012      	b.n	8001406 <UpdateLCD+0x10a>

			case pantallaSubMenuAcercaDe_part1: PrintScreen(subMenuAcercaDe1);
 80013e0:	4818      	ldr	r0, [pc, #96]	; (8001444 <UpdateLCD+0x148>)
 80013e2:	f000 f98b 	bl	80016fc <PrintScreen>
			break;
 80013e6:	e00e      	b.n	8001406 <UpdateLCD+0x10a>

			case pantallaSubMenuAcercaDe_part2: PrintScreen(subMenuAcercaDe2);
 80013e8:	4817      	ldr	r0, [pc, #92]	; (8001448 <UpdateLCD+0x14c>)
 80013ea:	f000 f987 	bl	80016fc <PrintScreen>
			break;
 80013ee:	e00a      	b.n	8001406 <UpdateLCD+0x10a>

			case pantallaSubmenuSetTempExt: PrintScreenSettingTemp(_petFilConv);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f000 f82d 	bl	8001450 <PrintScreenSettingTemp>
			break;
 80013f6:	e006      	b.n	8001406 <UpdateLCD+0x10a>

			case pantallaSubMenuSelVelocidadColFil: PrintScreen(subMenuSelVelocidadColec);
 80013f8:	4814      	ldr	r0, [pc, #80]	; (800144c <UpdateLCD+0x150>)
 80013fa:	f000 f97f 	bl	80016fc <PrintScreen>
			break;
 80013fe:	e002      	b.n	8001406 <UpdateLCD+0x10a>

			default: break;
		}
	}
 8001400:	bf00      	nop
 8001402:	e000      	b.n	8001406 <UpdateLCD+0x10a>
			default: break;
 8001404:	bf00      	nop

	if((_petFilConv -> previousSetExtTemp != _petFilConv -> setExtTemp) && (*currentScreen == pantallaSubmenuSetTempExt))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	429a      	cmp	r2, r3
 8001410:	d006      	beq.n	8001420 <UpdateLCD+0x124>
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b08      	cmp	r3, #8
 8001418:	d102      	bne.n	8001420 <UpdateLCD+0x124>
	{
		PrintSettingTemp(_petFilConv);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 f842 	bl	80014a4 <PrintSettingTemp>
	}
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000154 	.word	0x20000154
 800142c:	2000001c 	.word	0x2000001c
 8001430:	2000002c 	.word	0x2000002c
 8001434:	2000003c 	.word	0x2000003c
 8001438:	2000004c 	.word	0x2000004c
 800143c:	2000005c 	.word	0x2000005c
 8001440:	2000006c 	.word	0x2000006c
 8001444:	2000007c 	.word	0x2000007c
 8001448:	2000008c 	.word	0x2000008c
 800144c:	2000009c 	.word	0x2000009c

08001450 <PrintScreenSettingTemp>:

void PrintScreenSettingTemp(PETfilConv *_petFilConv)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	char aux[20];

	ClearScreen();
 8001458:	f000 f976 	bl	8001748 <ClearScreen>
	lcd_send_cmd(reg_lines[0]);
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	b2db      	uxtb	r3, r3
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fe87 	bl	8001174 <lcd_send_cmd>
	lcd_send_string(subMenuSelTemp[0]);
 8001466:	4b0d      	ldr	r3, [pc, #52]	; (800149c <PrintScreenSettingTemp+0x4c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff1d 	bl	80012aa <lcd_send_string>
	lcd_send_cmd(reg_lines[2]);
 8001470:	2394      	movs	r3, #148	; 0x94
 8001472:	b2db      	uxtb	r3, r3
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fe7d 	bl	8001174 <lcd_send_cmd>
	sprintf(aux,"%lu  / 275 C (Max.)",_petFilConv -> previousSetExtTemp);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	4907      	ldr	r1, [pc, #28]	; (80014a0 <PrintScreenSettingTemp+0x50>)
 8001484:	4618      	mov	r0, r3
 8001486:	f003 fd01 	bl	8004e8c <siprintf>
	lcd_send_string(aux);
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff ff0b 	bl	80012aa <lcd_send_string>
}
 8001494:	bf00      	nop
 8001496:	3720      	adds	r7, #32
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200000ac 	.word	0x200000ac
 80014a0:	080059b4 	.word	0x080059b4

080014a4 <PrintSettingTemp>:

void PrintSettingTemp(PETfilConv *_petFilConv)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	char aux[5];

	lcd_send_cmd(reg_lines[2]);
 80014ac:	2394      	movs	r3, #148	; 0x94
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fe5f 	bl	8001174 <lcd_send_cmd>
	sprintf(aux,"%lu ",_petFilConv -> previousSetExtTemp);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4906      	ldr	r1, [pc, #24]	; (80014d8 <PrintSettingTemp+0x34>)
 80014c0:	4618      	mov	r0, r3
 80014c2:	f003 fce3 	bl	8004e8c <siprintf>
	lcd_send_string(aux);
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff feed 	bl	80012aa <lcd_send_string>
}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	080059c8 	.word	0x080059c8

080014dc <PrintScreenWorking>:

void PrintScreenWorking(PETfilConv *_petFilConv)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	char aux[20];

	ClearScreen();
 80014e4:	f000 f930 	bl	8001748 <ClearScreen>
	lcd_send_cmd(reg_lines[0]);
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fe41 	bl	8001174 <lcd_send_cmd>
	//sprintf(aux,"EXT1: %lu / %lu C  ",_petFilConv -> currentExtTemp ,_petFilConv -> setExtTemp);
	sprintf(aux,"EXT1:     / %lu C  ",_petFilConv -> setExtTemp);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	4916      	ldr	r1, [pc, #88]	; (8001554 <PrintScreenWorking+0x78>)
 80014fc:	4618      	mov	r0, r3
 80014fe:	f003 fcc5 	bl	8004e8c <siprintf>
	lcd_send_string(aux);
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fecf 	bl	80012aa <lcd_send_string>

	if(_petFilConv -> col_state == true)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	789b      	ldrb	r3, [r3, #2]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d007      	beq.n	8001524 <PrintScreenWorking+0x48>
	{
		lcd_send_cmd(reg_lines[2]);
 8001514:	2394      	movs	r3, #148	; 0x94
 8001516:	b2db      	uxtb	r3, r3
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fe2b 	bl	8001174 <lcd_send_cmd>
		lcd_send_string("COL1");
 800151e:	480e      	ldr	r0, [pc, #56]	; (8001558 <PrintScreenWorking+0x7c>)
 8001520:	f7ff fec3 	bl	80012aa <lcd_send_string>
	}

	if(_petFilConv -> lightAlarm_state == true)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	785b      	ldrb	r3, [r3, #1]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <PrintScreenWorking+0x5c>
	{
		lcd_send_cmd(reg_Al_S);
 800152c:	20da      	movs	r0, #218	; 0xda
 800152e:	f7ff fe21 	bl	8001174 <lcd_send_cmd>
		lcd_send_string("Al:L");
 8001532:	480a      	ldr	r0, [pc, #40]	; (800155c <PrintScreenWorking+0x80>)
 8001534:	f7ff feb9 	bl	80012aa <lcd_send_string>
	}

	if(_petFilConv -> soundAlarm_state == true)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d005      	beq.n	800154c <PrintScreenWorking+0x70>
	{
		lcd_send_cmd(reg_Al_V);
 8001540:	20d4      	movs	r0, #212	; 0xd4
 8001542:	f7ff fe17 	bl	8001174 <lcd_send_cmd>
		lcd_send_string("Al:S");
 8001546:	4806      	ldr	r0, [pc, #24]	; (8001560 <PrintScreenWorking+0x84>)
 8001548:	f7ff feaf 	bl	80012aa <lcd_send_string>
	}
}
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	080059d0 	.word	0x080059d0
 8001558:	080059e4 	.word	0x080059e4
 800155c:	080059ec 	.word	0x080059ec
 8001560:	080059f4 	.word	0x080059f4

08001564 <UpdateCurrentTemp>:

void UpdateCurrentTemp(PETfilConv *_petFilConv)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	char aux[5];

	lcd_send_cmd(0x80|0x06);
 800156c:	2086      	movs	r0, #134	; 0x86
 800156e:	f7ff fe01 	bl	8001174 <lcd_send_cmd>
	sprintf(aux,"%lu ",_petFilConv -> currentExtTemp);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	4906      	ldr	r1, [pc, #24]	; (8001594 <UpdateCurrentTemp+0x30>)
 800157c:	4618      	mov	r0, r3
 800157e:	f003 fc85 	bl	8004e8c <siprintf>
	lcd_send_string(aux);
 8001582:	f107 0308 	add.w	r3, r7, #8
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fe8f 	bl	80012aa <lcd_send_string>
}
 800158c:	bf00      	nop
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	080059c8 	.word	0x080059c8

08001598 <PrintX>:

void PrintX(uint8_t i)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
	CleanX();
 80015a2:	f000 f825 	bl	80015f0 <CleanX>

	if(i == 1)	lcd_send_cmd(XC_LINE1_LCD);
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d103      	bne.n	80015b4 <PrintX+0x1c>
 80015ac:	2091      	movs	r0, #145	; 0x91
 80015ae:	f7ff fde1 	bl	8001174 <lcd_send_cmd>
 80015b2:	e013      	b.n	80015dc <PrintX+0x44>
	else if(i == 2)	lcd_send_cmd(XC_LINE2_LCD);
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d103      	bne.n	80015c2 <PrintX+0x2a>
 80015ba:	20d1      	movs	r0, #209	; 0xd1
 80015bc:	f7ff fdda 	bl	8001174 <lcd_send_cmd>
 80015c0:	e00c      	b.n	80015dc <PrintX+0x44>
	else if(i == 3)	lcd_send_cmd(XC_LINE3_LCD);
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d103      	bne.n	80015d0 <PrintX+0x38>
 80015c8:	20a5      	movs	r0, #165	; 0xa5
 80015ca:	f7ff fdd3 	bl	8001174 <lcd_send_cmd>
 80015ce:	e005      	b.n	80015dc <PrintX+0x44>
	else if(i == 4)	lcd_send_cmd(XC_LINE4_LCD);
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d102      	bne.n	80015dc <PrintX+0x44>
 80015d6:	20e5      	movs	r0, #229	; 0xe5
 80015d8:	f7ff fdcc 	bl	8001174 <lcd_send_cmd>
	lcd_send_string("X");
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <PrintX+0x54>)
 80015de:	f7ff fe64 	bl	80012aa <lcd_send_string>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	080059fc 	.word	0x080059fc

080015f0 <CleanX>:

void CleanX(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	lcd_send_cmd(XC_LINE1_LCD);
 80015f4:	2091      	movs	r0, #145	; 0x91
 80015f6:	f7ff fdbd 	bl	8001174 <lcd_send_cmd>
	lcd_send_string(" ");
 80015fa:	480b      	ldr	r0, [pc, #44]	; (8001628 <CleanX+0x38>)
 80015fc:	f7ff fe55 	bl	80012aa <lcd_send_string>
	lcd_send_cmd(XC_LINE2_LCD);
 8001600:	20d1      	movs	r0, #209	; 0xd1
 8001602:	f7ff fdb7 	bl	8001174 <lcd_send_cmd>
	lcd_send_string(" ");
 8001606:	4808      	ldr	r0, [pc, #32]	; (8001628 <CleanX+0x38>)
 8001608:	f7ff fe4f 	bl	80012aa <lcd_send_string>
	lcd_send_cmd(XC_LINE3_LCD);
 800160c:	20a5      	movs	r0, #165	; 0xa5
 800160e:	f7ff fdb1 	bl	8001174 <lcd_send_cmd>
	lcd_send_string(" ");
 8001612:	4805      	ldr	r0, [pc, #20]	; (8001628 <CleanX+0x38>)
 8001614:	f7ff fe49 	bl	80012aa <lcd_send_string>
	lcd_send_cmd(XC_LINE4_LCD);
 8001618:	20e5      	movs	r0, #229	; 0xe5
 800161a:	f7ff fdab 	bl	8001174 <lcd_send_cmd>
	lcd_send_string(" ");
 800161e:	4802      	ldr	r0, [pc, #8]	; (8001628 <CleanX+0x38>)
 8001620:	f7ff fe43 	bl	80012aa <lcd_send_string>
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	08005724 	.word	0x08005724

0800162c <PrintCursor>:

void PrintCursor(uint8_t index)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
	switch(index)
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	2b06      	cmp	r3, #6
 800163a:	d82d      	bhi.n	8001698 <PrintCursor+0x6c>
 800163c:	a201      	add	r2, pc, #4	; (adr r2, 8001644 <PrintCursor+0x18>)
 800163e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001642:	bf00      	nop
 8001644:	08001661 	.word	0x08001661
 8001648:	08001669 	.word	0x08001669
 800164c:	08001671 	.word	0x08001671
 8001650:	08001679 	.word	0x08001679
 8001654:	08001681 	.word	0x08001681
 8001658:	08001689 	.word	0x08001689
 800165c:	08001691 	.word	0x08001691
	{
		case 0:	lcd_send_cmd(C_LINE1_LCD);	//primera linea
 8001660:	2093      	movs	r0, #147	; 0x93
 8001662:	f7ff fd87 	bl	8001174 <lcd_send_cmd>
		break;
 8001666:	e018      	b.n	800169a <PrintCursor+0x6e>

		case 1:	lcd_send_cmd(C_LINE2_LCD);	//segunda linea
 8001668:	20d3      	movs	r0, #211	; 0xd3
 800166a:	f7ff fd83 	bl	8001174 <lcd_send_cmd>
		break;
 800166e:	e014      	b.n	800169a <PrintCursor+0x6e>

		case 2:	lcd_send_cmd(C_LINE3_LCD);	//tercera linea
 8001670:	20a7      	movs	r0, #167	; 0xa7
 8001672:	f7ff fd7f 	bl	8001174 <lcd_send_cmd>
		break;
 8001676:	e010      	b.n	800169a <PrintCursor+0x6e>

		case 3:	lcd_send_cmd(C_LINE4_LCD);	//cuarta linea
 8001678:	20e7      	movs	r0, #231	; 0xe7
 800167a:	f7ff fd7b 	bl	8001174 <lcd_send_cmd>
		break;
 800167e:	e00c      	b.n	800169a <PrintCursor+0x6e>

		case 4:	lcd_send_cmd(C_LINE1_LCD);	//primer linea
 8001680:	2093      	movs	r0, #147	; 0x93
 8001682:	f7ff fd77 	bl	8001174 <lcd_send_cmd>
		break;
 8001686:	e008      	b.n	800169a <PrintCursor+0x6e>

		case 5:	lcd_send_cmd(C_LINE2_LCD);	//segunda linea
 8001688:	20d3      	movs	r0, #211	; 0xd3
 800168a:	f7ff fd73 	bl	8001174 <lcd_send_cmd>
		break;
 800168e:	e004      	b.n	800169a <PrintCursor+0x6e>

		case 6:	lcd_send_cmd(C_LINE3_LCD);	//tercera linea
 8001690:	20a7      	movs	r0, #167	; 0xa7
 8001692:	f7ff fd6f 	bl	8001174 <lcd_send_cmd>
		break;
 8001696:	e000      	b.n	800169a <PrintCursor+0x6e>

		default: break;
 8001698:	bf00      	nop
	}

	lcd_send_string(cursor[0]);
 800169a:	4b04      	ldr	r3, [pc, #16]	; (80016ac <PrintCursor+0x80>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fe03 	bl	80012aa <lcd_send_string>
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000004 	.word	0x20000004

080016b0 <ClearAllCursor>:

void ClearAllCursor(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	lcd_send_cmd(C_LINE1_LCD);	//primer linea
 80016b4:	2093      	movs	r0, #147	; 0x93
 80016b6:	f7ff fd5d 	bl	8001174 <lcd_send_cmd>
	lcd_send_string(char_vacio[0]);
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <ClearAllCursor+0x48>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fdf3 	bl	80012aa <lcd_send_string>
	lcd_send_cmd(C_LINE2_LCD);	//segunda linea
 80016c4:	20d3      	movs	r0, #211	; 0xd3
 80016c6:	f7ff fd55 	bl	8001174 <lcd_send_cmd>
	lcd_send_string(char_vacio[0]);
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <ClearAllCursor+0x48>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fdeb 	bl	80012aa <lcd_send_string>
	lcd_send_cmd(C_LINE3_LCD);	//tercera linea
 80016d4:	20a7      	movs	r0, #167	; 0xa7
 80016d6:	f7ff fd4d 	bl	8001174 <lcd_send_cmd>
	lcd_send_string(char_vacio[0]);
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <ClearAllCursor+0x48>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fde3 	bl	80012aa <lcd_send_string>
	lcd_send_cmd(C_LINE4_LCD);	//cuarta linea
 80016e4:	20e7      	movs	r0, #231	; 0xe7
 80016e6:	f7ff fd45 	bl	8001174 <lcd_send_cmd>
	lcd_send_string(char_vacio[0]);
 80016ea:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <ClearAllCursor+0x48>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fddb 	bl	80012aa <lcd_send_string>
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000008 	.word	0x20000008

080016fc <PrintScreen>:

void PrintScreen(const char *screen[])
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	ClearScreen();
 8001704:	f000 f820 	bl	8001748 <ClearScreen>
	  for(int i = 0 ; i < LINES ; i++)
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	e012      	b.n	8001734 <PrintScreen+0x38>
	  {
		  lcd_send_cmd(reg_lines[i]);
 800170e:	4a0d      	ldr	r2, [pc, #52]	; (8001744 <PrintScreen+0x48>)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fd2b 	bl	8001174 <lcd_send_cmd>
		  lcd_send_string(screen[i]);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fdbe 	bl	80012aa <lcd_send_string>
	  for(int i = 0 ; i < LINES ; i++)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	3301      	adds	r3, #1
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2b03      	cmp	r3, #3
 8001738:	dde9      	ble.n	800170e <PrintScreen+0x12>
	  }
}
 800173a:	bf00      	nop
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	08005af4 	.word	0x08005af4

08001748 <ClearScreen>:

void ClearScreen(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
	  lcd_send_cmd (CLEAR_LCD);  // clear display
 800174c:	2001      	movs	r0, #1
 800174e:	f7ff fd11 	bl	8001174 <lcd_send_cmd>
	  HAL_Delay(100);
 8001752:	2064      	movs	r0, #100	; 0x64
 8001754:	f000 fd8a 	bl	800226c <HAL_Delay>
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <PrintErrorMessage>:

void PrintErrorMessage(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	lcd_send_cmd(LINE1_LCD);
 8001760:	2080      	movs	r0, #128	; 0x80
 8001762:	f7ff fd07 	bl	8001174 <lcd_send_cmd>
	lcd_send_string("ERROR!");
 8001766:	4805      	ldr	r0, [pc, #20]	; (800177c <PrintErrorMessage+0x20>)
 8001768:	f7ff fd9f 	bl	80012aa <lcd_send_string>
	lcd_send_cmd(LINE2_LCD);
 800176c:	20c0      	movs	r0, #192	; 0xc0
 800176e:	f7ff fd01 	bl	8001174 <lcd_send_cmd>
	lcd_send_string("Reinicie el equipo");
 8001772:	4803      	ldr	r0, [pc, #12]	; (8001780 <PrintErrorMessage+0x24>)
 8001774:	f7ff fd99 	bl	80012aa <lcd_send_string>
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	08005a00 	.word	0x08005a00
 8001780:	08005a08 	.word	0x08005a08

08001784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	static uint32_t previousTick = 0;
	uint32_t currentTick = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800178e:	f000 fd0b 	bl	80021a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001792:	f000 f865 	bl	8001860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001796:	f000 f995 	bl	8001ac4 <MX_GPIO_Init>
  MX_DMA_Init();
 800179a:	f000 f975 	bl	8001a88 <MX_DMA_Init>
  MX_ADC1_Init();
 800179e:	f000 f8bb 	bl	8001918 <MX_ADC1_Init>
  MX_I2C1_Init();
 80017a2:	f000 f8f7 	bl	8001994 <MX_I2C1_Init>
  MX_TIM2_Init();
 80017a6:	f000 f923 	bl	80019f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if(!lcd_init())					Error_Handler();
 80017aa:	f7ff fd43 	bl	8001234 <lcd_init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	f083 0301 	eor.w	r3, r3, #1
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <main+0x3a>
 80017ba:	f000 faf1 	bl	8001da0 <Error_Handler>
  PresentacionLCD();
 80017be:	f7ff fd89 	bl	80012d4 <PresentacionLCD>
  if(!PetConv_Init(&PETfilConv1))	Error_Handler();
 80017c2:	4820      	ldr	r0, [pc, #128]	; (8001844 <main+0xc0>)
 80017c4:	f000 fa1c 	bl	8001c00 <PetConv_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f083 0301 	eor.w	r3, r3, #1
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <main+0x54>
 80017d4:	f000 fae4 	bl	8001da0 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(g_btnPressed != NoPressed)
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <main+0xc4>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d014      	beq.n	800180a <main+0x86>
	  {
		  UpdateDataGUI(indexes,&g_btnPressed,&PETfilConv1,&currentScreen,&g_velocidad_Col1);
 80017e0:	4b1a      	ldr	r3, [pc, #104]	; (800184c <main+0xc8>)
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <main+0xcc>)
 80017e6:	4a17      	ldr	r2, [pc, #92]	; (8001844 <main+0xc0>)
 80017e8:	4917      	ldr	r1, [pc, #92]	; (8001848 <main+0xc4>)
 80017ea:	481a      	ldr	r0, [pc, #104]	; (8001854 <main+0xd0>)
 80017ec:	f7ff f8d4 	bl	8000998 <UpdateDataGUI>
		  UpdateLCD(&PETfilConv1,&currentScreen);
 80017f0:	4917      	ldr	r1, [pc, #92]	; (8001850 <main+0xcc>)
 80017f2:	4814      	ldr	r0, [pc, #80]	; (8001844 <main+0xc0>)
 80017f4:	f7ff fd82 	bl	80012fc <UpdateLCD>
		  UpdateCursor(indexes,&PETfilConv1,&currentScreen,&g_velocidad_Col1);
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <main+0xc8>)
 80017fa:	4a15      	ldr	r2, [pc, #84]	; (8001850 <main+0xcc>)
 80017fc:	4911      	ldr	r1, [pc, #68]	; (8001844 <main+0xc0>)
 80017fe:	4815      	ldr	r0, [pc, #84]	; (8001854 <main+0xd0>)
 8001800:	f7ff fbe6 	bl	8000fd0 <UpdateCursor>
		  g_btnPressed = NoPressed;
 8001804:	4b10      	ldr	r3, [pc, #64]	; (8001848 <main+0xc4>)
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
	  }

	  ControlAlarms(&g_alarmFil,&PETfilConv1);
 800180a:	490e      	ldr	r1, [pc, #56]	; (8001844 <main+0xc0>)
 800180c:	4812      	ldr	r0, [pc, #72]	; (8001858 <main+0xd4>)
 800180e:	f7fe ff91 	bl	8000734 <ControlAlarms>
	  currentTick = HAL_GetTick();
 8001812:	f000 fd21 	bl	8002258 <HAL_GetTick>
 8001816:	6078      	str	r0, [r7, #4]

	  if(currentTick - previousTick > 500)
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <main+0xd8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001824:	d9d8      	bls.n	80017d8 <main+0x54>
	  {
		  Control_ON_OFF(&PETfilConv1);
 8001826:	4807      	ldr	r0, [pc, #28]	; (8001844 <main+0xc0>)
 8001828:	f7ff f874 	bl	8000914 <Control_ON_OFF>

		  if(currentScreen == pantallaWorkingScreen)
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <main+0xcc>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d102      	bne.n	800183a <main+0xb6>
		  {
			  UpdateCurrentTemp(&PETfilConv1);
 8001834:	4803      	ldr	r0, [pc, #12]	; (8001844 <main+0xc0>)
 8001836:	f7ff fe95 	bl	8001564 <UpdateCurrentTemp>
		  }

		  previousTick = currentTick;
 800183a:	4a08      	ldr	r2, [pc, #32]	; (800185c <main+0xd8>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6013      	str	r3, [r2, #0]
	  if(g_btnPressed != NoPressed)
 8001840:	e7ca      	b.n	80017d8 <main+0x54>
 8001842:	bf00      	nop
 8001844:	20000160 	.word	0x20000160
 8001848:	200000bc 	.word	0x200000bc
 800184c:	20000158 	.word	0x20000158
 8001850:	20000194 	.word	0x20000194
 8001854:	20000174 	.word	0x20000174
 8001858:	2000015c 	.word	0x2000015c
 800185c:	20000198 	.word	0x20000198

08001860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b094      	sub	sp, #80	; 0x50
 8001864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001866:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800186a:	2228      	movs	r2, #40	; 0x28
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f003 fb04 	bl	8004e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001890:	2301      	movs	r3, #1
 8001892:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001894:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800189a:	2300      	movs	r3, #0
 800189c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800189e:	2301      	movs	r3, #1
 80018a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a2:	2302      	movs	r3, #2
 80018a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 80018ac:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 80018b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018b6:	4618      	mov	r0, r3
 80018b8:	f002 f9e8 	bl	8003c8c <HAL_RCC_OscConfig>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80018c2:	f000 fa6d 	bl	8001da0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c6:	230f      	movs	r3, #15
 80018c8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ca:	2302      	movs	r3, #2
 80018cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d8:	2300      	movs	r3, #0
 80018da:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	2102      	movs	r1, #2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f002 fc52 	bl	800418c <HAL_RCC_ClockConfig>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80018ee:	f000 fa57 	bl	8001da0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018f2:	2302      	movs	r3, #2
 80018f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80018f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018fa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	4618      	mov	r0, r3
 8001900:	f002 fdca 	bl	8004498 <HAL_RCCEx_PeriphCLKConfig>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800190a:	f000 fa49 	bl	8001da0 <Error_Handler>
  }
}
 800190e:	bf00      	nop
 8001910:	3750      	adds	r7, #80	; 0x50
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001928:	4b18      	ldr	r3, [pc, #96]	; (800198c <MX_ADC1_Init+0x74>)
 800192a:	4a19      	ldr	r2, [pc, #100]	; (8001990 <MX_ADC1_Init+0x78>)
 800192c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800192e:	4b17      	ldr	r3, [pc, #92]	; (800198c <MX_ADC1_Init+0x74>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001934:	4b15      	ldr	r3, [pc, #84]	; (800198c <MX_ADC1_Init+0x74>)
 8001936:	2200      	movs	r2, #0
 8001938:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800193a:	4b14      	ldr	r3, [pc, #80]	; (800198c <MX_ADC1_Init+0x74>)
 800193c:	2200      	movs	r2, #0
 800193e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <MX_ADC1_Init+0x74>)
 8001942:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001946:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001948:	4b10      	ldr	r3, [pc, #64]	; (800198c <MX_ADC1_Init+0x74>)
 800194a:	2200      	movs	r2, #0
 800194c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800194e:	4b0f      	ldr	r3, [pc, #60]	; (800198c <MX_ADC1_Init+0x74>)
 8001950:	2201      	movs	r2, #1
 8001952:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001954:	480d      	ldr	r0, [pc, #52]	; (800198c <MX_ADC1_Init+0x74>)
 8001956:	f000 fcad 	bl	80022b4 <HAL_ADC_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001960:	f000 fa1e 	bl	8001da0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001964:	2301      	movs	r3, #1
 8001966:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001968:	2301      	movs	r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	4619      	mov	r1, r3
 8001974:	4805      	ldr	r0, [pc, #20]	; (800198c <MX_ADC1_Init+0x74>)
 8001976:	f000 fe6f 	bl	8002658 <HAL_ADC_ConfigChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001980:	f000 fa0e 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000204 	.word	0x20000204
 8001990:	40012400 	.word	0x40012400

08001994 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <MX_I2C1_Init+0x50>)
 800199a:	4a13      	ldr	r2, [pc, #76]	; (80019e8 <MX_I2C1_Init+0x54>)
 800199c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800199e:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019a0:	4a12      	ldr	r2, [pc, #72]	; (80019ec <MX_I2C1_Init+0x58>)
 80019a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019b8:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019c4:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019d0:	4804      	ldr	r0, [pc, #16]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019d2:	f001 fd11 	bl	80033f8 <HAL_I2C_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019dc:	f000 f9e0 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	200001b0 	.word	0x200001b0
 80019e8:	40005400 	.word	0x40005400
 80019ec:	000186a0 	.word	0x000186a0

080019f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f6:	f107 0308 	add.w	r3, r7, #8
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a04:	463b      	mov	r3, r7
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <MX_TIM2_Init+0x94>)
 8001a0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 56000-1;
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <MX_TIM2_Init+0x94>)
 8001a16:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 8001a1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1c:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <MX_TIM2_Init+0x94>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7-1;
 8001a22:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <MX_TIM2_Init+0x94>)
 8001a24:	2206      	movs	r2, #6
 8001a26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a28:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <MX_TIM2_Init+0x94>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <MX_TIM2_Init+0x94>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a34:	4813      	ldr	r0, [pc, #76]	; (8001a84 <MX_TIM2_Init+0x94>)
 8001a36:	f002 fde5 	bl	8004604 <HAL_TIM_Base_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a40:	f000 f9ae 	bl	8001da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480c      	ldr	r0, [pc, #48]	; (8001a84 <MX_TIM2_Init+0x94>)
 8001a52:	f002 ffa9 	bl	80049a8 <HAL_TIM_ConfigClockSource>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a5c:	f000 f9a0 	bl	8001da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a60:	2300      	movs	r3, #0
 8001a62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a68:	463b      	mov	r3, r7
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_TIM2_Init+0x94>)
 8001a6e:	f003 f971 	bl	8004d54 <HAL_TIMEx_MasterConfigSynchronization>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a78:	f000 f992 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000278 	.word	0x20000278

08001a88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <MX_DMA_Init+0x38>)
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	4a0b      	ldr	r2, [pc, #44]	; (8001ac0 <MX_DMA_Init+0x38>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6153      	str	r3, [r2, #20]
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <MX_DMA_Init+0x38>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	200b      	movs	r0, #11
 8001aac:	f001 f8a5 	bl	8002bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ab0:	200b      	movs	r0, #11
 8001ab2:	f001 f8be 	bl	8002c32 <HAL_NVIC_EnableIRQ>

}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000

08001ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aca:	f107 0310 	add.w	r3, r7, #16
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad8:	4b43      	ldr	r3, [pc, #268]	; (8001be8 <MX_GPIO_Init+0x124>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	4a42      	ldr	r2, [pc, #264]	; (8001be8 <MX_GPIO_Init+0x124>)
 8001ade:	f043 0310 	orr.w	r3, r3, #16
 8001ae2:	6193      	str	r3, [r2, #24]
 8001ae4:	4b40      	ldr	r3, [pc, #256]	; (8001be8 <MX_GPIO_Init+0x124>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f003 0310 	and.w	r3, r3, #16
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af0:	4b3d      	ldr	r3, [pc, #244]	; (8001be8 <MX_GPIO_Init+0x124>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4a3c      	ldr	r2, [pc, #240]	; (8001be8 <MX_GPIO_Init+0x124>)
 8001af6:	f043 0320 	orr.w	r3, r3, #32
 8001afa:	6193      	str	r3, [r2, #24]
 8001afc:	4b3a      	ldr	r3, [pc, #232]	; (8001be8 <MX_GPIO_Init+0x124>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f003 0320 	and.w	r3, r3, #32
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b08:	4b37      	ldr	r3, [pc, #220]	; (8001be8 <MX_GPIO_Init+0x124>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	4a36      	ldr	r2, [pc, #216]	; (8001be8 <MX_GPIO_Init+0x124>)
 8001b0e:	f043 0304 	orr.w	r3, r3, #4
 8001b12:	6193      	str	r3, [r2, #24]
 8001b14:	4b34      	ldr	r3, [pc, #208]	; (8001be8 <MX_GPIO_Init+0x124>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b20:	4b31      	ldr	r3, [pc, #196]	; (8001be8 <MX_GPIO_Init+0x124>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	4a30      	ldr	r2, [pc, #192]	; (8001be8 <MX_GPIO_Init+0x124>)
 8001b26:	f043 0308 	orr.w	r3, r3, #8
 8001b2a:	6193      	str	r3, [r2, #24]
 8001b2c:	4b2e      	ldr	r3, [pc, #184]	; (8001be8 <MX_GPIO_Init+0x124>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	603b      	str	r3, [r7, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RESET_MOTOR1_Pin|PASOS_MOTOR1_Pin|CALENTADOR1_Pin|Led_Pin, GPIO_PIN_RESET);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f248 0125 	movw	r1, #32805	; 0x8025
 8001b3e:	482b      	ldr	r0, [pc, #172]	; (8001bec <MX_GPIO_Init+0x128>)
 8001b40:	f001 fc11 	bl	8003366 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b4a:	4829      	ldr	r0, [pc, #164]	; (8001bf0 <MX_GPIO_Init+0x12c>)
 8001b4c:	f001 fc0b 	bl	8003366 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RotaryDT_Pin RotaryCLK_Pin Button_Pin */
  GPIO_InitStruct.Pin = RotaryDT_Pin|RotaryCLK_Pin|Button_Pin;
 8001b50:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b56:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <MX_GPIO_Init+0x130>)
 8001b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5e:	f107 0310 	add.w	r3, r7, #16
 8001b62:	4619      	mov	r1, r3
 8001b64:	4824      	ldr	r0, [pc, #144]	; (8001bf8 <MX_GPIO_Init+0x134>)
 8001b66:	f001 fa6d 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_MOTOR1_Pin PASOS_MOTOR1_Pin CALENTADOR1_Pin Led_Pin */
  GPIO_InitStruct.Pin = RESET_MOTOR1_Pin|PASOS_MOTOR1_Pin|CALENTADOR1_Pin|Led_Pin;
 8001b6a:	f248 0325 	movw	r3, #32805	; 0x8025
 8001b6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b70:	2301      	movs	r3, #1
 8001b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7c:	f107 0310 	add.w	r3, r7, #16
 8001b80:	4619      	mov	r1, r3
 8001b82:	481a      	ldr	r0, [pc, #104]	; (8001bec <MX_GPIO_Init+0x128>)
 8001b84:	f001 fa5e 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2302      	movs	r3, #2
 8001b98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	f107 0310 	add.w	r3, r7, #16
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4813      	ldr	r0, [pc, #76]	; (8001bf0 <MX_GPIO_Init+0x12c>)
 8001ba2:	f001 fa4f 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pin : Detector_fil_Pin */
  GPIO_InitStruct.Pin = Detector_fil_Pin;
 8001ba6:	2308      	movs	r3, #8
 8001ba8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001baa:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <MX_GPIO_Init+0x138>)
 8001bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Detector_fil_GPIO_Port, &GPIO_InitStruct);
 8001bb2:	f107 0310 	add.w	r3, r7, #16
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	480d      	ldr	r0, [pc, #52]	; (8001bf0 <MX_GPIO_Init+0x12c>)
 8001bba:	f001 fa43 	bl	8003044 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	2009      	movs	r0, #9
 8001bc4:	f001 f819 	bl	8002bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001bc8:	2009      	movs	r0, #9
 8001bca:	f001 f832 	bl	8002c32 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	2028      	movs	r0, #40	; 0x28
 8001bd4:	f001 f811 	bl	8002bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bd8:	2028      	movs	r0, #40	; 0x28
 8001bda:	f001 f82a 	bl	8002c32 <HAL_NVIC_EnableIRQ>

}
 8001bde:	bf00      	nop
 8001be0:	3720      	adds	r7, #32
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40010800 	.word	0x40010800
 8001bf0:	40010c00 	.word	0x40010c00
 8001bf4:	10110000 	.word	0x10110000
 8001bf8:	40011000 	.word	0x40011000
 8001bfc:	10310000 	.word	0x10310000

08001c00 <PetConv_Init>:
/* USER CODE BEGIN 4 */



bool PetConv_Init(PETfilConv *_petFilConv)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	_petFilConv -> lightAlarm_state = false;	//false = alarma luminica DESHABILITADA | true = alarma luminica HABILITADA
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	705a      	strb	r2, [r3, #1]
	_petFilConv -> soundAlarm_state = false;	//false = alarma sonora DESHABILITADA | true = alarma sonora HABILITADA
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
	_petFilConv -> col_state = false;			//false = motor del colector DESHABILITADO | true = motor del colector HABILITADO
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	709a      	strb	r2, [r3, #2]
	_petFilConv -> currentExtTemp = 0;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	605a      	str	r2, [r3, #4]
	_petFilConv -> previousSetExtTemp = 50;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2232      	movs	r2, #50	; 0x32
 8001c24:	609a      	str	r2, [r3, #8]
	_petFilConv -> setExtTemp = 50;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2232      	movs	r2, #50	; 0x32
 8001c2a:	60da      	str	r2, [r3, #12]
	_petFilConv -> flagTemp_state = false;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	741a      	strb	r2, [r3, #16]

	DesactivaCalentador();	//deshabilito CALENTADOR 1
 8001c32:	f7fe fea5 	bl	8000980 <DesactivaCalentador>
	Colector_Init();		//inicio timer asociado a la velocidad del colector
 8001c36:	f000 f8e3 	bl	8001e00 <Colector_Init>

	return true;
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	80fb      	strh	r3, [r7, #6]
	static uint32_t previousTick;
	uint32_t currentTick = HAL_GetTick();
 8001c4e:	f000 fb03 	bl	8002258 <HAL_GetTick>
 8001c52:	60f8      	str	r0, [r7, #12]
	//Rotate encoder CCKW or CKW
	if(currentTick - previousTick > 300)
 8001c54:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <HAL_GPIO_EXTI_Callback+0x80>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001c60:	d92b      	bls.n	8001cba <HAL_GPIO_EXTI_Callback+0x76>
	{
		if(GPIO_Pin == RotaryDT_Pin)			g_btnPressed = Left;
 8001c62:	88fb      	ldrh	r3, [r7, #6]
 8001c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c68:	d103      	bne.n	8001c72 <HAL_GPIO_EXTI_Callback+0x2e>
 8001c6a:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <HAL_GPIO_EXTI_Callback+0x84>)
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	e020      	b.n	8001cb4 <HAL_GPIO_EXTI_Callback+0x70>
		else if(GPIO_Pin == RotaryCLK_Pin)		g_btnPressed = Right;
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c78:	d103      	bne.n	8001c82 <HAL_GPIO_EXTI_Callback+0x3e>
 8001c7a:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <HAL_GPIO_EXTI_Callback+0x84>)
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	e018      	b.n	8001cb4 <HAL_GPIO_EXTI_Callback+0x70>
		else if(GPIO_Pin == Button_Pin)			g_btnPressed = Ok;
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c88:	d103      	bne.n	8001c92 <HAL_GPIO_EXTI_Callback+0x4e>
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <HAL_GPIO_EXTI_Callback+0x84>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	e010      	b.n	8001cb4 <HAL_GPIO_EXTI_Callback+0x70>
		else if(GPIO_Pin == Detector_fil_Pin)
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d10d      	bne.n	8001cb4 <HAL_GPIO_EXTI_Callback+0x70>
		{
			if(HAL_GPIO_ReadPin(GPIOB, Detector_fil_Pin))	g_alarmFil = false;
 8001c98:	2108      	movs	r1, #8
 8001c9a:	480c      	ldr	r0, [pc, #48]	; (8001ccc <HAL_GPIO_EXTI_Callback+0x88>)
 8001c9c:	f001 fb4c 	bl	8003338 <HAL_GPIO_ReadPin>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_EXTI_Callback+0x6a>
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
 8001cac:	e002      	b.n	8001cb4 <HAL_GPIO_EXTI_Callback+0x70>
			else	g_alarmFil = true;
 8001cae:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	701a      	strb	r2, [r3, #0]
		}

		previousTick = currentTick;
 8001cb4:	4a03      	ldr	r2, [pc, #12]	; (8001cc4 <HAL_GPIO_EXTI_Callback+0x80>)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6013      	str	r3, [r2, #0]
	}
}
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	2000019c 	.word	0x2000019c
 8001cc8:	200000bc 	.word	0x200000bc
 8001ccc:	40010c00 	.word	0x40010c00
 8001cd0:	2000015c 	.word	0x2000015c

08001cd4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	//Fclk = 56MHz / prescaler = 56000-1 / autoreload = 7-1 (VELOCIDAD 3: 300 mm/min)

	//Fclk = 56MHz / prescaler = 56000-1 / autoreload = 5-1 (VELOCIDAD 3: 500 mm/min)
	//Fclk = 56MHz / prescaler = 56000-1 / autoreload = 6-1 (VELOCIDAD 3: 400 mm/min)

	if(htim->Instance == TIM2)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce4:	d151      	bne.n	8001d8a <HAL_TIM_PeriodElapsedCallback+0xb6>
	{
		if(g_velocidad_Col1 != previousVel_Col1)
 8001ce6:	4b2b      	ldr	r3, [pc, #172]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d046      	beq.n	8001d82 <HAL_TIM_PeriodElapsedCallback+0xae>
		{
			switch(g_velocidad_Col1)
 8001cf4:	4b28      	ldr	r3, [pc, #160]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d02a      	beq.n	8001d52 <HAL_TIM_PeriodElapsedCallback+0x7e>
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d83a      	bhi.n	8001d76 <HAL_TIM_PeriodElapsedCallback+0xa2>
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d002      	beq.n	8001d0a <HAL_TIM_PeriodElapsedCallback+0x36>
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d012      	beq.n	8001d2e <HAL_TIM_PeriodElapsedCallback+0x5a>
					__HAL_TIM_SET_COUNTER(htim, 0);
					__HAL_TIM_SET_AUTORELOAD(htim, 7-1);
					HAL_TIM_Base_Start_IT(htim);
					break;

				default: break;
 8001d08:	e035      	b.n	8001d76 <HAL_TIM_PeriodElapsedCallback+0xa2>
					HAL_TIM_Base_Stop_IT(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f002 fd16 	bl	800473c <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_SET_COUNTER(htim, 0);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2200      	movs	r2, #0
 8001d16:	625a      	str	r2, [r3, #36]	; 0x24
					__HAL_TIM_SET_AUTORELOAD(htim, 10-1);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2209      	movs	r2, #9
 8001d1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2209      	movs	r2, #9
 8001d24:	60da      	str	r2, [r3, #12]
					HAL_TIM_Base_Start_IT(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f002 fcbc 	bl	80046a4 <HAL_TIM_Base_Start_IT>
					break;
 8001d2c:	e024      	b.n	8001d78 <HAL_TIM_PeriodElapsedCallback+0xa4>
					HAL_TIM_Base_Stop_IT(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f002 fd04 	bl	800473c <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_SET_COUNTER(htim, 0);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24
					__HAL_TIM_SET_AUTORELOAD(htim, 8-1);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2207      	movs	r2, #7
 8001d42:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2207      	movs	r2, #7
 8001d48:	60da      	str	r2, [r3, #12]
					HAL_TIM_Base_Start_IT(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f002 fcaa 	bl	80046a4 <HAL_TIM_Base_Start_IT>
					break;
 8001d50:	e012      	b.n	8001d78 <HAL_TIM_PeriodElapsedCallback+0xa4>
					HAL_TIM_Base_Stop_IT(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f002 fcf2 	bl	800473c <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_SET_COUNTER(htim, 0);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	625a      	str	r2, [r3, #36]	; 0x24
					__HAL_TIM_SET_AUTORELOAD(htim, 7-1);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2206      	movs	r2, #6
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2206      	movs	r2, #6
 8001d6c:	60da      	str	r2, [r3, #12]
					HAL_TIM_Base_Start_IT(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f002 fc98 	bl	80046a4 <HAL_TIM_Base_Start_IT>
					break;
 8001d74:	e000      	b.n	8001d78 <HAL_TIM_PeriodElapsedCallback+0xa4>
				default: break;
 8001d76:	bf00      	nop
			}

			previousVel_Col1 = g_velocidad_Col1;
 8001d78:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001d80:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_TogglePin(GPIOA, PASOS_MOTOR1_Pin);
 8001d82:	2104      	movs	r1, #4
 8001d84:	4805      	ldr	r0, [pc, #20]	; (8001d9c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001d86:	f001 fb06 	bl	8003396 <HAL_GPIO_TogglePin>
	}
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200001a0 	.word	0x200001a0
 8001d98:	20000158 	.word	0x20000158
 8001d9c:	40010800 	.word	0x40010800

08001da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001da4:	b672      	cpsid	i
}
 8001da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  PrintErrorMessage();
 8001da8:	f7ff fcd8 	bl	800175c <PrintErrorMessage>
 8001dac:	e7fc      	b.n	8001da8 <Error_Handler+0x8>

08001dae <ControlMotor>:
extern TIM_HandleTypeDef htim2;

//****** FUNCTIONS IMPLEMENTATIONS ******

void ControlMotor(PETfilConv *_petFilConv)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
	if(_petFilConv -> col_state)	ActivarMotor();
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	789b      	ldrb	r3, [r3, #2]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d002      	beq.n	8001dc4 <ControlMotor+0x16>
 8001dbe:	f000 f807 	bl	8001dd0 <ActivarMotor>
	else						DesactivarMotor();
}
 8001dc2:	e001      	b.n	8001dc8 <ControlMotor+0x1a>
	else						DesactivarMotor();
 8001dc4:	f000 f810 	bl	8001de8 <DesactivarMotor>
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <ActivarMotor>:

void ActivarMotor(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, RESET_MOTOR1_Pin, GPIO_PIN_SET);	//si RESET_MOTOR == 1, el motor se habilita
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	4802      	ldr	r0, [pc, #8]	; (8001de4 <ActivarMotor+0x14>)
 8001dda:	f001 fac4 	bl	8003366 <HAL_GPIO_WritePin>
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40010800 	.word	0x40010800

08001de8 <DesactivarMotor>:

void DesactivarMotor(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, RESET_MOTOR1_Pin, GPIO_PIN_RESET);	//si RESET_MOTOR == 0, el motor se deshabilita
 8001dec:	2200      	movs	r2, #0
 8001dee:	2101      	movs	r1, #1
 8001df0:	4802      	ldr	r0, [pc, #8]	; (8001dfc <DesactivarMotor+0x14>)
 8001df2:	f001 fab8 	bl	8003366 <HAL_GPIO_WritePin>
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40010800 	.word	0x40010800

08001e00 <Colector_Init>:

void Colector_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001e04:	4804      	ldr	r0, [pc, #16]	; (8001e18 <Colector_Init+0x18>)
 8001e06:	f002 fc4d 	bl	80046a4 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(GPIOA, RESET_MOTOR1_Pin, GPIO_PIN_RESET);	//si RESET_MOTOR == 0, el motor se deshabilita
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	4803      	ldr	r0, [pc, #12]	; (8001e1c <Colector_Init+0x1c>)
 8001e10:	f001 faa9 	bl	8003366 <HAL_GPIO_WritePin>
}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000278 	.word	0x20000278
 8001e1c:	40010800 	.word	0x40010800

08001e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <HAL_MspInit+0x5c>)
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	4a14      	ldr	r2, [pc, #80]	; (8001e7c <HAL_MspInit+0x5c>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6193      	str	r3, [r2, #24]
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_MspInit+0x5c>)
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <HAL_MspInit+0x5c>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	4a0e      	ldr	r2, [pc, #56]	; (8001e7c <HAL_MspInit+0x5c>)
 8001e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e48:	61d3      	str	r3, [r2, #28]
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <HAL_MspInit+0x5c>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_MspInit+0x60>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	4a04      	ldr	r2, [pc, #16]	; (8001e80 <HAL_MspInit+0x60>)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e72:	bf00      	nop
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40010000 	.word	0x40010000

08001e84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 0310 	add.w	r3, r7, #16
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a28      	ldr	r2, [pc, #160]	; (8001f40 <HAL_ADC_MspInit+0xbc>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d149      	bne.n	8001f38 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ea4:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <HAL_ADC_MspInit+0xc0>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	4a26      	ldr	r2, [pc, #152]	; (8001f44 <HAL_ADC_MspInit+0xc0>)
 8001eaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eae:	6193      	str	r3, [r2, #24]
 8001eb0:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <HAL_ADC_MspInit+0xc0>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebc:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <HAL_ADC_MspInit+0xc0>)
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	4a20      	ldr	r2, [pc, #128]	; (8001f44 <HAL_ADC_MspInit+0xc0>)
 8001ec2:	f043 0304 	orr.w	r3, r3, #4
 8001ec6:	6193      	str	r3, [r2, #24]
 8001ec8:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <HAL_ADC_MspInit+0xc0>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001edc:	f107 0310 	add.w	r3, r7, #16
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4819      	ldr	r0, [pc, #100]	; (8001f48 <HAL_ADC_MspInit+0xc4>)
 8001ee4:	f001 f8ae 	bl	8003044 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ee8:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <HAL_ADC_MspInit+0xc8>)
 8001eea:	4a19      	ldr	r2, [pc, #100]	; (8001f50 <HAL_ADC_MspInit+0xcc>)
 8001eec:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eee:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <HAL_ADC_MspInit+0xc8>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ef4:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <HAL_ADC_MspInit+0xc8>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001efa:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <HAL_ADC_MspInit+0xc8>)
 8001efc:	2280      	movs	r2, #128	; 0x80
 8001efe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f00:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_ADC_MspInit+0xc8>)
 8001f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f06:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f08:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <HAL_ADC_MspInit+0xc8>)
 8001f0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f0e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f10:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <HAL_ADC_MspInit+0xc8>)
 8001f12:	2220      	movs	r2, #32
 8001f14:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f16:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <HAL_ADC_MspInit+0xc8>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f1c:	480b      	ldr	r0, [pc, #44]	; (8001f4c <HAL_ADC_MspInit+0xc8>)
 8001f1e:	f000 fea3 	bl	8002c68 <HAL_DMA_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001f28:	f7ff ff3a 	bl	8001da0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a07      	ldr	r2, [pc, #28]	; (8001f4c <HAL_ADC_MspInit+0xc8>)
 8001f30:	621a      	str	r2, [r3, #32]
 8001f32:	4a06      	ldr	r2, [pc, #24]	; (8001f4c <HAL_ADC_MspInit+0xc8>)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f38:	bf00      	nop
 8001f3a:	3720      	adds	r7, #32
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40012400 	.word	0x40012400
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40010800 	.word	0x40010800
 8001f4c:	20000234 	.word	0x20000234
 8001f50:	40020008 	.word	0x40020008

08001f54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	; 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a1e      	ldr	r2, [pc, #120]	; (8001fe8 <HAL_I2C_MspInit+0x94>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d134      	bne.n	8001fde <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f74:	4b1d      	ldr	r3, [pc, #116]	; (8001fec <HAL_I2C_MspInit+0x98>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	4a1c      	ldr	r2, [pc, #112]	; (8001fec <HAL_I2C_MspInit+0x98>)
 8001f7a:	f043 0308 	orr.w	r3, r3, #8
 8001f7e:	6193      	str	r3, [r2, #24]
 8001f80:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <HAL_I2C_MspInit+0x98>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f92:	2312      	movs	r3, #18
 8001f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f96:	2301      	movs	r3, #1
 8001f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4812      	ldr	r0, [pc, #72]	; (8001ff0 <HAL_I2C_MspInit+0x9c>)
 8001fa6:	f001 f84d 	bl	8003044 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001faa:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_I2C_MspInit+0xa0>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	f043 0302 	orr.w	r3, r3, #2
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc0:	4a0c      	ldr	r2, [pc, #48]	; (8001ff4 <HAL_I2C_MspInit+0xa0>)
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <HAL_I2C_MspInit+0x98>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	4a08      	ldr	r2, [pc, #32]	; (8001fec <HAL_I2C_MspInit+0x98>)
 8001fcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fd0:	61d3      	str	r3, [r2, #28]
 8001fd2:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_I2C_MspInit+0x98>)
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fde:	bf00      	nop
 8001fe0:	3728      	adds	r7, #40	; 0x28
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40005400 	.word	0x40005400
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40010c00 	.word	0x40010c00
 8001ff4:	40010000 	.word	0x40010000

08001ff8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002008:	d113      	bne.n	8002032 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800200a:	4b0c      	ldr	r3, [pc, #48]	; (800203c <HAL_TIM_Base_MspInit+0x44>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	4a0b      	ldr	r2, [pc, #44]	; (800203c <HAL_TIM_Base_MspInit+0x44>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	61d3      	str	r3, [r2, #28]
 8002016:	4b09      	ldr	r3, [pc, #36]	; (800203c <HAL_TIM_Base_MspInit+0x44>)
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002022:	2200      	movs	r2, #0
 8002024:	2100      	movs	r1, #0
 8002026:	201c      	movs	r0, #28
 8002028:	f000 fde7 	bl	8002bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800202c:	201c      	movs	r0, #28
 800202e:	f000 fe00 	bl	8002c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000

08002040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002044:	e7fe      	b.n	8002044 <NMI_Handler+0x4>

08002046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204a:	e7fe      	b.n	800204a <HardFault_Handler+0x4>

0800204c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <MemManage_Handler+0x4>

08002052 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002056:	e7fe      	b.n	8002056 <BusFault_Handler+0x4>

08002058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800205c:	e7fe      	b.n	800205c <UsageFault_Handler+0x4>

0800205e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr

0800206a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr

08002076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr

08002082 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002086:	f000 f8d5 	bl	8002234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}

0800208e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002092:	2008      	movs	r0, #8
 8002094:	f001 f998 	bl	80033c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}

0800209c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020a0:	4802      	ldr	r0, [pc, #8]	; (80020ac <DMA1_Channel1_IRQHandler+0x10>)
 80020a2:	f000 fe9b 	bl	8002ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000234 	.word	0x20000234

080020b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020b4:	4802      	ldr	r0, [pc, #8]	; (80020c0 <TIM2_IRQHandler+0x10>)
 80020b6:	f002 fb6f 	bl	8004798 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000278 	.word	0x20000278

080020c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80020c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020cc:	f001 f97c 	bl	80033c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80020d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80020d4:	f001 f978 	bl	80033c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80020d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80020dc:	f001 f974 	bl	80033c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020ec:	4a14      	ldr	r2, [pc, #80]	; (8002140 <_sbrk+0x5c>)
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <_sbrk+0x60>)
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020f8:	4b13      	ldr	r3, [pc, #76]	; (8002148 <_sbrk+0x64>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d102      	bne.n	8002106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <_sbrk+0x64>)
 8002102:	4a12      	ldr	r2, [pc, #72]	; (800214c <_sbrk+0x68>)
 8002104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <_sbrk+0x64>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	429a      	cmp	r2, r3
 8002112:	d207      	bcs.n	8002124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002114:	f002 fe88 	bl	8004e28 <__errno>
 8002118:	4603      	mov	r3, r0
 800211a:	220c      	movs	r2, #12
 800211c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800211e:	f04f 33ff 	mov.w	r3, #4294967295
 8002122:	e009      	b.n	8002138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <_sbrk+0x64>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <_sbrk+0x64>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	4a05      	ldr	r2, [pc, #20]	; (8002148 <_sbrk+0x64>)
 8002134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002136:	68fb      	ldr	r3, [r7, #12]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20002800 	.word	0x20002800
 8002144:	00000400 	.word	0x00000400
 8002148:	200001a4 	.word	0x200001a4
 800214c:	200002d8 	.word	0x200002d8

08002150 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800215c:	480c      	ldr	r0, [pc, #48]	; (8002190 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800215e:	490d      	ldr	r1, [pc, #52]	; (8002194 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002160:	4a0d      	ldr	r2, [pc, #52]	; (8002198 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002164:	e002      	b.n	800216c <LoopCopyDataInit>

08002166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800216a:	3304      	adds	r3, #4

0800216c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800216c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800216e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002170:	d3f9      	bcc.n	8002166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002172:	4a0a      	ldr	r2, [pc, #40]	; (800219c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002174:	4c0a      	ldr	r4, [pc, #40]	; (80021a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002178:	e001      	b.n	800217e <LoopFillZerobss>

0800217a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800217a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800217c:	3204      	adds	r2, #4

0800217e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800217e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002180:	d3fb      	bcc.n	800217a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002182:	f7ff ffe5 	bl	8002150 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002186:	f002 fe55 	bl	8004e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800218a:	f7ff fafb 	bl	8001784 <main>
  bx lr
 800218e:	4770      	bx	lr
  ldr r0, =_sdata
 8002190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002194:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8002198:	08005b58 	.word	0x08005b58
  ldr r2, =_sbss
 800219c:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 80021a0:	200002d4 	.word	0x200002d4

080021a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021a4:	e7fe      	b.n	80021a4 <ADC1_2_IRQHandler>
	...

080021a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <HAL_Init+0x28>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <HAL_Init+0x28>)
 80021b2:	f043 0310 	orr.w	r3, r3, #16
 80021b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b8:	2003      	movs	r0, #3
 80021ba:	f000 fd13 	bl	8002be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021be:	2000      	movs	r0, #0
 80021c0:	f000 f808 	bl	80021d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021c4:	f7ff fe2c 	bl	8001e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40022000 	.word	0x40022000

080021d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_InitTick+0x54>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_InitTick+0x58>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4619      	mov	r1, r3
 80021e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fd2b 	bl	8002c4e <HAL_SYSTICK_Config>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e00e      	b.n	8002220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b0f      	cmp	r3, #15
 8002206:	d80a      	bhi.n	800221e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002208:	2200      	movs	r2, #0
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	f04f 30ff 	mov.w	r0, #4294967295
 8002210:	f000 fcf3 	bl	8002bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002214:	4a06      	ldr	r2, [pc, #24]	; (8002230 <HAL_InitTick+0x5c>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	e000      	b.n	8002220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	200000c0 	.word	0x200000c0
 800222c:	200000c8 	.word	0x200000c8
 8002230:	200000c4 	.word	0x200000c4

08002234 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <HAL_IncTick+0x1c>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	4b05      	ldr	r3, [pc, #20]	; (8002254 <HAL_IncTick+0x20>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4413      	add	r3, r2
 8002244:	4a03      	ldr	r2, [pc, #12]	; (8002254 <HAL_IncTick+0x20>)
 8002246:	6013      	str	r3, [r2, #0]
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	200000c8 	.word	0x200000c8
 8002254:	200002c0 	.word	0x200002c0

08002258 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return uwTick;
 800225c:	4b02      	ldr	r3, [pc, #8]	; (8002268 <HAL_GetTick+0x10>)
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	200002c0 	.word	0x200002c0

0800226c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002274:	f7ff fff0 	bl	8002258 <HAL_GetTick>
 8002278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002284:	d005      	beq.n	8002292 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <HAL_Delay+0x44>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4413      	add	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002292:	bf00      	nop
 8002294:	f7ff ffe0 	bl	8002258 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d8f7      	bhi.n	8002294 <HAL_Delay+0x28>
  {
  }
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	200000c8 	.word	0x200000c8

080022b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e0be      	b.n	8002454 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d109      	bne.n	80022f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff fdc6 	bl	8001e84 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 faff 	bl	80028fc <ADC_ConversionStop_Disable>
 80022fe:	4603      	mov	r3, r0
 8002300:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	2b00      	cmp	r3, #0
 800230c:	f040 8099 	bne.w	8002442 <HAL_ADC_Init+0x18e>
 8002310:	7dfb      	ldrb	r3, [r7, #23]
 8002312:	2b00      	cmp	r3, #0
 8002314:	f040 8095 	bne.w	8002442 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002320:	f023 0302 	bic.w	r3, r3, #2
 8002324:	f043 0202 	orr.w	r2, r3, #2
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002334:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	7b1b      	ldrb	r3, [r3, #12]
 800233a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800233c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	4313      	orrs	r3, r2
 8002342:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800234c:	d003      	beq.n	8002356 <HAL_ADC_Init+0xa2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d102      	bne.n	800235c <HAL_ADC_Init+0xa8>
 8002356:	f44f 7380 	mov.w	r3, #256	; 0x100
 800235a:	e000      	b.n	800235e <HAL_ADC_Init+0xaa>
 800235c:	2300      	movs	r3, #0
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7d1b      	ldrb	r3, [r3, #20]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d119      	bne.n	80023a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	7b1b      	ldrb	r3, [r3, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d109      	bne.n	8002388 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	3b01      	subs	r3, #1
 800237a:	035a      	lsls	r2, r3, #13
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	e00b      	b.n	80023a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	f043 0220 	orr.w	r2, r3, #32
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	f043 0201 	orr.w	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	4b28      	ldr	r3, [pc, #160]	; (800245c <HAL_ADC_Init+0x1a8>)
 80023bc:	4013      	ands	r3, r2
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	68b9      	ldr	r1, [r7, #8]
 80023c4:	430b      	orrs	r3, r1
 80023c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023d0:	d003      	beq.n	80023da <HAL_ADC_Init+0x126>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d104      	bne.n	80023e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	3b01      	subs	r3, #1
 80023e0:	051b      	lsls	r3, r3, #20
 80023e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	4b18      	ldr	r3, [pc, #96]	; (8002460 <HAL_ADC_Init+0x1ac>)
 8002400:	4013      	ands	r3, r2
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	429a      	cmp	r2, r3
 8002406:	d10b      	bne.n	8002420 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002412:	f023 0303 	bic.w	r3, r3, #3
 8002416:	f043 0201 	orr.w	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800241e:	e018      	b.n	8002452 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002424:	f023 0312 	bic.w	r3, r3, #18
 8002428:	f043 0210 	orr.w	r2, r3, #16
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002440:	e007      	b.n	8002452 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002446:	f043 0210 	orr.w	r2, r3, #16
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002452:	7dfb      	ldrb	r3, [r7, #23]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	ffe1f7fd 	.word	0xffe1f7fd
 8002460:	ff1f0efe 	.word	0xff1f0efe

08002464 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002470:	2300      	movs	r3, #0
 8002472:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a64      	ldr	r2, [pc, #400]	; (800260c <HAL_ADC_Start_DMA+0x1a8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d004      	beq.n	8002488 <HAL_ADC_Start_DMA+0x24>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a63      	ldr	r2, [pc, #396]	; (8002610 <HAL_ADC_Start_DMA+0x1ac>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d106      	bne.n	8002496 <HAL_ADC_Start_DMA+0x32>
 8002488:	4b60      	ldr	r3, [pc, #384]	; (800260c <HAL_ADC_Start_DMA+0x1a8>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002490:	2b00      	cmp	r3, #0
 8002492:	f040 80b3 	bne.w	80025fc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_ADC_Start_DMA+0x40>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e0ae      	b.n	8002602 <HAL_ADC_Start_DMA+0x19e>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 f9cb 	bl	8002848 <ADC_Enable>
 80024b2:	4603      	mov	r3, r0
 80024b4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80024b6:	7dfb      	ldrb	r3, [r7, #23]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f040 809a 	bne.w	80025f2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024c6:	f023 0301 	bic.w	r3, r3, #1
 80024ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a4e      	ldr	r2, [pc, #312]	; (8002610 <HAL_ADC_Start_DMA+0x1ac>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d105      	bne.n	80024e8 <HAL_ADC_Start_DMA+0x84>
 80024dc:	4b4b      	ldr	r3, [pc, #300]	; (800260c <HAL_ADC_Start_DMA+0x1a8>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d115      	bne.n	8002514 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d026      	beq.n	8002550 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002506:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800250a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002512:	e01d      	b.n	8002550 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a39      	ldr	r2, [pc, #228]	; (800260c <HAL_ADC_Start_DMA+0x1a8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d004      	beq.n	8002534 <HAL_ADC_Start_DMA+0xd0>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a38      	ldr	r2, [pc, #224]	; (8002610 <HAL_ADC_Start_DMA+0x1ac>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d10d      	bne.n	8002550 <HAL_ADC_Start_DMA+0xec>
 8002534:	4b35      	ldr	r3, [pc, #212]	; (800260c <HAL_ADC_Start_DMA+0x1a8>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800253c:	2b00      	cmp	r3, #0
 800253e:	d007      	beq.n	8002550 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002544:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002548:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d006      	beq.n	800256a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002560:	f023 0206 	bic.w	r2, r3, #6
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	62da      	str	r2, [r3, #44]	; 0x2c
 8002568:	e002      	b.n	8002570 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	4a25      	ldr	r2, [pc, #148]	; (8002614 <HAL_ADC_Start_DMA+0x1b0>)
 800257e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	4a24      	ldr	r2, [pc, #144]	; (8002618 <HAL_ADC_Start_DMA+0x1b4>)
 8002586:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	4a23      	ldr	r2, [pc, #140]	; (800261c <HAL_ADC_Start_DMA+0x1b8>)
 800258e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0202 	mvn.w	r2, #2
 8002598:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025a8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a18      	ldr	r0, [r3, #32]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	334c      	adds	r3, #76	; 0x4c
 80025b4:	4619      	mov	r1, r3
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f000 fbaf 	bl	8002d1c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80025c8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80025cc:	d108      	bne.n	80025e0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80025dc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80025de:	e00f      	b.n	8002600 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80025ee:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80025f0:	e006      	b.n	8002600 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80025fa:	e001      	b.n	8002600 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002600:	7dfb      	ldrb	r3, [r7, #23]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40012400 	.word	0x40012400
 8002610:	40012800 	.word	0x40012800
 8002614:	0800297f 	.word	0x0800297f
 8002618:	080029fb 	.word	0x080029fb
 800261c:	08002a17 	.word	0x08002a17

08002620 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr

08002632 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr
	...

08002658 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x20>
 8002674:	2302      	movs	r3, #2
 8002676:	e0dc      	b.n	8002832 <HAL_ADC_ConfigChannel+0x1da>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b06      	cmp	r3, #6
 8002686:	d81c      	bhi.n	80026c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	3b05      	subs	r3, #5
 800269a:	221f      	movs	r2, #31
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	4019      	ands	r1, r3
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	6818      	ldr	r0, [r3, #0]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	3b05      	subs	r3, #5
 80026b4:	fa00 f203 	lsl.w	r2, r0, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	635a      	str	r2, [r3, #52]	; 0x34
 80026c0:	e03c      	b.n	800273c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b0c      	cmp	r3, #12
 80026c8:	d81c      	bhi.n	8002704 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	3b23      	subs	r3, #35	; 0x23
 80026dc:	221f      	movs	r2, #31
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43db      	mvns	r3, r3
 80026e4:	4019      	ands	r1, r3
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	3b23      	subs	r3, #35	; 0x23
 80026f6:	fa00 f203 	lsl.w	r2, r0, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	631a      	str	r2, [r3, #48]	; 0x30
 8002702:	e01b      	b.n	800273c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	3b41      	subs	r3, #65	; 0x41
 8002716:	221f      	movs	r2, #31
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	4019      	ands	r1, r3
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6818      	ldr	r0, [r3, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	3b41      	subs	r3, #65	; 0x41
 8002730:	fa00 f203 	lsl.w	r2, r0, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b09      	cmp	r3, #9
 8002742:	d91c      	bls.n	800277e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68d9      	ldr	r1, [r3, #12]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	4613      	mov	r3, r2
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	4413      	add	r3, r2
 8002754:	3b1e      	subs	r3, #30
 8002756:	2207      	movs	r2, #7
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	4019      	ands	r1, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	6898      	ldr	r0, [r3, #8]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4613      	mov	r3, r2
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	4413      	add	r3, r2
 800276e:	3b1e      	subs	r3, #30
 8002770:	fa00 f203 	lsl.w	r2, r0, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	60da      	str	r2, [r3, #12]
 800277c:	e019      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6919      	ldr	r1, [r3, #16]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4613      	mov	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4413      	add	r3, r2
 800278e:	2207      	movs	r2, #7
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	4019      	ands	r1, r3
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	6898      	ldr	r0, [r3, #8]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4613      	mov	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4413      	add	r3, r2
 80027a6:	fa00 f203 	lsl.w	r2, r0, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b10      	cmp	r3, #16
 80027b8:	d003      	beq.n	80027c2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027be:	2b11      	cmp	r3, #17
 80027c0:	d132      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a1d      	ldr	r2, [pc, #116]	; (800283c <HAL_ADC_ConfigChannel+0x1e4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d125      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d126      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80027e8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b10      	cmp	r3, #16
 80027f0:	d11a      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027f2:	4b13      	ldr	r3, [pc, #76]	; (8002840 <HAL_ADC_ConfigChannel+0x1e8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a13      	ldr	r2, [pc, #76]	; (8002844 <HAL_ADC_ConfigChannel+0x1ec>)
 80027f8:	fba2 2303 	umull	r2, r3, r2, r3
 80027fc:	0c9a      	lsrs	r2, r3, #18
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002808:	e002      	b.n	8002810 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	3b01      	subs	r3, #1
 800280e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f9      	bne.n	800280a <HAL_ADC_ConfigChannel+0x1b2>
 8002816:	e007      	b.n	8002828 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	f043 0220 	orr.w	r2, r3, #32
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002830:	7bfb      	ldrb	r3, [r7, #15]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr
 800283c:	40012400 	.word	0x40012400
 8002840:	200000c0 	.word	0x200000c0
 8002844:	431bde83 	.word	0x431bde83

08002848 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b01      	cmp	r3, #1
 8002864:	d040      	beq.n	80028e8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0201 	orr.w	r2, r2, #1
 8002874:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002876:	4b1f      	ldr	r3, [pc, #124]	; (80028f4 <ADC_Enable+0xac>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1f      	ldr	r2, [pc, #124]	; (80028f8 <ADC_Enable+0xb0>)
 800287c:	fba2 2303 	umull	r2, r3, r2, r3
 8002880:	0c9b      	lsrs	r3, r3, #18
 8002882:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002884:	e002      	b.n	800288c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	3b01      	subs	r3, #1
 800288a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f9      	bne.n	8002886 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002892:	f7ff fce1 	bl	8002258 <HAL_GetTick>
 8002896:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002898:	e01f      	b.n	80028da <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800289a:	f7ff fcdd 	bl	8002258 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d918      	bls.n	80028da <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d011      	beq.n	80028da <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	f043 0210 	orr.w	r2, r3, #16
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c6:	f043 0201 	orr.w	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e007      	b.n	80028ea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d1d8      	bne.n	800289a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	200000c0 	.word	0x200000c0
 80028f8:	431bde83 	.word	0x431bde83

080028fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b01      	cmp	r3, #1
 8002914:	d12e      	bne.n	8002974 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0201 	bic.w	r2, r2, #1
 8002924:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002926:	f7ff fc97 	bl	8002258 <HAL_GetTick>
 800292a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800292c:	e01b      	b.n	8002966 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800292e:	f7ff fc93 	bl	8002258 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d914      	bls.n	8002966 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b01      	cmp	r3, #1
 8002948:	d10d      	bne.n	8002966 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294e:	f043 0210 	orr.w	r2, r3, #16
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295a:	f043 0201 	orr.w	r2, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e007      	b.n	8002976 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b01      	cmp	r3, #1
 8002972:	d0dc      	beq.n	800292e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002994:	2b00      	cmp	r3, #0
 8002996:	d127      	bne.n	80029e8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80029ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80029b2:	d115      	bne.n	80029e0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d111      	bne.n	80029e0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d105      	bne.n	80029e0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d8:	f043 0201 	orr.w	r2, r3, #1
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f7ff fe1d 	bl	8002620 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80029e6:	e004      	b.n	80029f2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	4798      	blx	r3
}
 80029f2:	bf00      	nop
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b084      	sub	sp, #16
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f7ff fe12 	bl	8002632 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a0e:	bf00      	nop
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b084      	sub	sp, #16
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	f043 0204 	orr.w	r2, r3, #4
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f7ff fe01 	bl	8002644 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <__NVIC_SetPriorityGrouping+0x44>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a7e:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <__NVIC_SetPriorityGrouping+0x44>)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	60d3      	str	r3, [r2, #12]
}
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a98:	4b04      	ldr	r3, [pc, #16]	; (8002aac <__NVIC_GetPriorityGrouping+0x18>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	0a1b      	lsrs	r3, r3, #8
 8002a9e:	f003 0307 	and.w	r3, r3, #7
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	db0b      	blt.n	8002ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	f003 021f 	and.w	r2, r3, #31
 8002ac8:	4906      	ldr	r1, [pc, #24]	; (8002ae4 <__NVIC_EnableIRQ+0x34>)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr
 8002ae4:	e000e100 	.word	0xe000e100

08002ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	6039      	str	r1, [r7, #0]
 8002af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	db0a      	blt.n	8002b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	490c      	ldr	r1, [pc, #48]	; (8002b34 <__NVIC_SetPriority+0x4c>)
 8002b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b06:	0112      	lsls	r2, r2, #4
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b10:	e00a      	b.n	8002b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	4908      	ldr	r1, [pc, #32]	; (8002b38 <__NVIC_SetPriority+0x50>)
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	3b04      	subs	r3, #4
 8002b20:	0112      	lsls	r2, r2, #4
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	440b      	add	r3, r1
 8002b26:	761a      	strb	r2, [r3, #24]
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	e000e100 	.word	0xe000e100
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b089      	sub	sp, #36	; 0x24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f1c3 0307 	rsb	r3, r3, #7
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	bf28      	it	cs
 8002b5a:	2304      	movcs	r3, #4
 8002b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3304      	adds	r3, #4
 8002b62:	2b06      	cmp	r3, #6
 8002b64:	d902      	bls.n	8002b6c <NVIC_EncodePriority+0x30>
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	3b03      	subs	r3, #3
 8002b6a:	e000      	b.n	8002b6e <NVIC_EncodePriority+0x32>
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b70:	f04f 32ff 	mov.w	r2, #4294967295
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	401a      	ands	r2, r3
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b84:	f04f 31ff 	mov.w	r1, #4294967295
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8e:	43d9      	mvns	r1, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b94:	4313      	orrs	r3, r2
         );
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3724      	adds	r7, #36	; 0x24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bb0:	d301      	bcc.n	8002bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e00f      	b.n	8002bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bb6:	4a0a      	ldr	r2, [pc, #40]	; (8002be0 <SysTick_Config+0x40>)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bbe:	210f      	movs	r1, #15
 8002bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc4:	f7ff ff90 	bl	8002ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc8:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <SysTick_Config+0x40>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bce:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <SysTick_Config+0x40>)
 8002bd0:	2207      	movs	r2, #7
 8002bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	e000e010 	.word	0xe000e010

08002be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff ff2d 	bl	8002a4c <__NVIC_SetPriorityGrouping>
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b086      	sub	sp, #24
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	4603      	mov	r3, r0
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	607a      	str	r2, [r7, #4]
 8002c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c0c:	f7ff ff42 	bl	8002a94 <__NVIC_GetPriorityGrouping>
 8002c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	68b9      	ldr	r1, [r7, #8]
 8002c16:	6978      	ldr	r0, [r7, #20]
 8002c18:	f7ff ff90 	bl	8002b3c <NVIC_EncodePriority>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c22:	4611      	mov	r1, r2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff ff5f 	bl	8002ae8 <__NVIC_SetPriority>
}
 8002c2a:	bf00      	nop
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	4603      	mov	r3, r0
 8002c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff ff35 	bl	8002ab0 <__NVIC_EnableIRQ>
}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7ff ffa2 	bl	8002ba0 <SysTick_Config>
 8002c5c:	4603      	mov	r3, r0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
	...

08002c68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e043      	b.n	8002d06 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	4b22      	ldr	r3, [pc, #136]	; (8002d10 <HAL_DMA_Init+0xa8>)
 8002c86:	4413      	add	r3, r2
 8002c88:	4a22      	ldr	r2, [pc, #136]	; (8002d14 <HAL_DMA_Init+0xac>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	091b      	lsrs	r3, r3, #4
 8002c90:	009a      	lsls	r2, r3, #2
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a1f      	ldr	r2, [pc, #124]	; (8002d18 <HAL_DMA_Init+0xb0>)
 8002c9a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cb2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002cb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002cc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr
 8002d10:	bffdfff8 	.word	0xbffdfff8
 8002d14:	cccccccd 	.word	0xcccccccd
 8002d18:	40020000 	.word	0x40020000

08002d1c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_DMA_Start_IT+0x20>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e04a      	b.n	8002dd2 <HAL_DMA_Start_IT+0xb6>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d13a      	bne.n	8002dc4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2202      	movs	r2, #2
 8002d52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0201 	bic.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	68b9      	ldr	r1, [r7, #8]
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f938 	bl	8002fe8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d008      	beq.n	8002d92 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 020e 	orr.w	r2, r2, #14
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	e00f      	b.n	8002db2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0204 	bic.w	r2, r2, #4
 8002da0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 020a 	orr.w	r2, r2, #10
 8002db0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f042 0201 	orr.w	r2, r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	e005      	b.n	8002dd0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	2204      	movs	r2, #4
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d04f      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0xc8>
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d04a      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0320 	and.w	r3, r3, #32
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d107      	bne.n	8002e2c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0204 	bic.w	r2, r2, #4
 8002e2a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a66      	ldr	r2, [pc, #408]	; (8002fcc <HAL_DMA_IRQHandler+0x1f0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d029      	beq.n	8002e8a <HAL_DMA_IRQHandler+0xae>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a65      	ldr	r2, [pc, #404]	; (8002fd0 <HAL_DMA_IRQHandler+0x1f4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d022      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xaa>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a63      	ldr	r2, [pc, #396]	; (8002fd4 <HAL_DMA_IRQHandler+0x1f8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d01a      	beq.n	8002e80 <HAL_DMA_IRQHandler+0xa4>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a62      	ldr	r2, [pc, #392]	; (8002fd8 <HAL_DMA_IRQHandler+0x1fc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d012      	beq.n	8002e7a <HAL_DMA_IRQHandler+0x9e>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a60      	ldr	r2, [pc, #384]	; (8002fdc <HAL_DMA_IRQHandler+0x200>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00a      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x98>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a5f      	ldr	r2, [pc, #380]	; (8002fe0 <HAL_DMA_IRQHandler+0x204>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d102      	bne.n	8002e6e <HAL_DMA_IRQHandler+0x92>
 8002e68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e6c:	e00e      	b.n	8002e8c <HAL_DMA_IRQHandler+0xb0>
 8002e6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002e72:	e00b      	b.n	8002e8c <HAL_DMA_IRQHandler+0xb0>
 8002e74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e78:	e008      	b.n	8002e8c <HAL_DMA_IRQHandler+0xb0>
 8002e7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e7e:	e005      	b.n	8002e8c <HAL_DMA_IRQHandler+0xb0>
 8002e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e84:	e002      	b.n	8002e8c <HAL_DMA_IRQHandler+0xb0>
 8002e86:	2340      	movs	r3, #64	; 0x40
 8002e88:	e000      	b.n	8002e8c <HAL_DMA_IRQHandler+0xb0>
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	4a55      	ldr	r2, [pc, #340]	; (8002fe4 <HAL_DMA_IRQHandler+0x208>)
 8002e8e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 8094 	beq.w	8002fc2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002ea2:	e08e      	b.n	8002fc2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d056      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x186>
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d051      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0320 	and.w	r3, r3, #32
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10b      	bne.n	8002ee4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 020a 	bic.w	r2, r2, #10
 8002eda:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a38      	ldr	r2, [pc, #224]	; (8002fcc <HAL_DMA_IRQHandler+0x1f0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d029      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x166>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a37      	ldr	r2, [pc, #220]	; (8002fd0 <HAL_DMA_IRQHandler+0x1f4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d022      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x162>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a35      	ldr	r2, [pc, #212]	; (8002fd4 <HAL_DMA_IRQHandler+0x1f8>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d01a      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x15c>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a34      	ldr	r2, [pc, #208]	; (8002fd8 <HAL_DMA_IRQHandler+0x1fc>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d012      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x156>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a32      	ldr	r2, [pc, #200]	; (8002fdc <HAL_DMA_IRQHandler+0x200>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00a      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x150>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a31      	ldr	r2, [pc, #196]	; (8002fe0 <HAL_DMA_IRQHandler+0x204>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d102      	bne.n	8002f26 <HAL_DMA_IRQHandler+0x14a>
 8002f20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f24:	e00e      	b.n	8002f44 <HAL_DMA_IRQHandler+0x168>
 8002f26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f2a:	e00b      	b.n	8002f44 <HAL_DMA_IRQHandler+0x168>
 8002f2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f30:	e008      	b.n	8002f44 <HAL_DMA_IRQHandler+0x168>
 8002f32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f36:	e005      	b.n	8002f44 <HAL_DMA_IRQHandler+0x168>
 8002f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f3c:	e002      	b.n	8002f44 <HAL_DMA_IRQHandler+0x168>
 8002f3e:	2320      	movs	r3, #32
 8002f40:	e000      	b.n	8002f44 <HAL_DMA_IRQHandler+0x168>
 8002f42:	2302      	movs	r3, #2
 8002f44:	4a27      	ldr	r2, [pc, #156]	; (8002fe4 <HAL_DMA_IRQHandler+0x208>)
 8002f46:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d034      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f60:	e02f      	b.n	8002fc2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	2208      	movs	r2, #8
 8002f68:	409a      	lsls	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d028      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x1e8>
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d023      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 020e 	bic.w	r2, r2, #14
 8002f8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f94:	2101      	movs	r1, #1
 8002f96:	fa01 f202 	lsl.w	r2, r1, r2
 8002f9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d004      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	4798      	blx	r3
    }
  }
  return;
 8002fc2:	bf00      	nop
 8002fc4:	bf00      	nop
}
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40020008 	.word	0x40020008
 8002fd0:	4002001c 	.word	0x4002001c
 8002fd4:	40020030 	.word	0x40020030
 8002fd8:	40020044 	.word	0x40020044
 8002fdc:	40020058 	.word	0x40020058
 8002fe0:	4002006c 	.word	0x4002006c
 8002fe4:	40020000 	.word	0x40020000

08002fe8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffe:	2101      	movs	r1, #1
 8003000:	fa01 f202 	lsl.w	r2, r1, r2
 8003004:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b10      	cmp	r3, #16
 8003014:	d108      	bne.n	8003028 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003026:	e007      	b.n	8003038 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	60da      	str	r2, [r3, #12]
}
 8003038:	bf00      	nop
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	bc80      	pop	{r7}
 8003040:	4770      	bx	lr
	...

08003044 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003044:	b480      	push	{r7}
 8003046:	b08b      	sub	sp, #44	; 0x2c
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800304e:	2300      	movs	r3, #0
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003052:	2300      	movs	r3, #0
 8003054:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003056:	e148      	b.n	80032ea <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003058:	2201      	movs	r2, #1
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69fa      	ldr	r2, [r7, #28]
 8003068:	4013      	ands	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	429a      	cmp	r2, r3
 8003072:	f040 8137 	bne.w	80032e4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4aa3      	ldr	r2, [pc, #652]	; (8003308 <HAL_GPIO_Init+0x2c4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d05e      	beq.n	800313e <HAL_GPIO_Init+0xfa>
 8003080:	4aa1      	ldr	r2, [pc, #644]	; (8003308 <HAL_GPIO_Init+0x2c4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d875      	bhi.n	8003172 <HAL_GPIO_Init+0x12e>
 8003086:	4aa1      	ldr	r2, [pc, #644]	; (800330c <HAL_GPIO_Init+0x2c8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d058      	beq.n	800313e <HAL_GPIO_Init+0xfa>
 800308c:	4a9f      	ldr	r2, [pc, #636]	; (800330c <HAL_GPIO_Init+0x2c8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d86f      	bhi.n	8003172 <HAL_GPIO_Init+0x12e>
 8003092:	4a9f      	ldr	r2, [pc, #636]	; (8003310 <HAL_GPIO_Init+0x2cc>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d052      	beq.n	800313e <HAL_GPIO_Init+0xfa>
 8003098:	4a9d      	ldr	r2, [pc, #628]	; (8003310 <HAL_GPIO_Init+0x2cc>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d869      	bhi.n	8003172 <HAL_GPIO_Init+0x12e>
 800309e:	4a9d      	ldr	r2, [pc, #628]	; (8003314 <HAL_GPIO_Init+0x2d0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d04c      	beq.n	800313e <HAL_GPIO_Init+0xfa>
 80030a4:	4a9b      	ldr	r2, [pc, #620]	; (8003314 <HAL_GPIO_Init+0x2d0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d863      	bhi.n	8003172 <HAL_GPIO_Init+0x12e>
 80030aa:	4a9b      	ldr	r2, [pc, #620]	; (8003318 <HAL_GPIO_Init+0x2d4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d046      	beq.n	800313e <HAL_GPIO_Init+0xfa>
 80030b0:	4a99      	ldr	r2, [pc, #612]	; (8003318 <HAL_GPIO_Init+0x2d4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d85d      	bhi.n	8003172 <HAL_GPIO_Init+0x12e>
 80030b6:	2b12      	cmp	r3, #18
 80030b8:	d82a      	bhi.n	8003110 <HAL_GPIO_Init+0xcc>
 80030ba:	2b12      	cmp	r3, #18
 80030bc:	d859      	bhi.n	8003172 <HAL_GPIO_Init+0x12e>
 80030be:	a201      	add	r2, pc, #4	; (adr r2, 80030c4 <HAL_GPIO_Init+0x80>)
 80030c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c4:	0800313f 	.word	0x0800313f
 80030c8:	08003119 	.word	0x08003119
 80030cc:	0800312b 	.word	0x0800312b
 80030d0:	0800316d 	.word	0x0800316d
 80030d4:	08003173 	.word	0x08003173
 80030d8:	08003173 	.word	0x08003173
 80030dc:	08003173 	.word	0x08003173
 80030e0:	08003173 	.word	0x08003173
 80030e4:	08003173 	.word	0x08003173
 80030e8:	08003173 	.word	0x08003173
 80030ec:	08003173 	.word	0x08003173
 80030f0:	08003173 	.word	0x08003173
 80030f4:	08003173 	.word	0x08003173
 80030f8:	08003173 	.word	0x08003173
 80030fc:	08003173 	.word	0x08003173
 8003100:	08003173 	.word	0x08003173
 8003104:	08003173 	.word	0x08003173
 8003108:	08003121 	.word	0x08003121
 800310c:	08003135 	.word	0x08003135
 8003110:	4a82      	ldr	r2, [pc, #520]	; (800331c <HAL_GPIO_Init+0x2d8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d013      	beq.n	800313e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003116:	e02c      	b.n	8003172 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	623b      	str	r3, [r7, #32]
          break;
 800311e:	e029      	b.n	8003174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	3304      	adds	r3, #4
 8003126:	623b      	str	r3, [r7, #32]
          break;
 8003128:	e024      	b.n	8003174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	3308      	adds	r3, #8
 8003130:	623b      	str	r3, [r7, #32]
          break;
 8003132:	e01f      	b.n	8003174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	330c      	adds	r3, #12
 800313a:	623b      	str	r3, [r7, #32]
          break;
 800313c:	e01a      	b.n	8003174 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d102      	bne.n	800314c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003146:	2304      	movs	r3, #4
 8003148:	623b      	str	r3, [r7, #32]
          break;
 800314a:	e013      	b.n	8003174 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d105      	bne.n	8003160 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003154:	2308      	movs	r3, #8
 8003156:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69fa      	ldr	r2, [r7, #28]
 800315c:	611a      	str	r2, [r3, #16]
          break;
 800315e:	e009      	b.n	8003174 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003160:	2308      	movs	r3, #8
 8003162:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69fa      	ldr	r2, [r7, #28]
 8003168:	615a      	str	r2, [r3, #20]
          break;
 800316a:	e003      	b.n	8003174 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800316c:	2300      	movs	r3, #0
 800316e:	623b      	str	r3, [r7, #32]
          break;
 8003170:	e000      	b.n	8003174 <HAL_GPIO_Init+0x130>
          break;
 8003172:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	2bff      	cmp	r3, #255	; 0xff
 8003178:	d801      	bhi.n	800317e <HAL_GPIO_Init+0x13a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	e001      	b.n	8003182 <HAL_GPIO_Init+0x13e>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3304      	adds	r3, #4
 8003182:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2bff      	cmp	r3, #255	; 0xff
 8003188:	d802      	bhi.n	8003190 <HAL_GPIO_Init+0x14c>
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	e002      	b.n	8003196 <HAL_GPIO_Init+0x152>
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	3b08      	subs	r3, #8
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	210f      	movs	r1, #15
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	fa01 f303 	lsl.w	r3, r1, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	401a      	ands	r2, r3
 80031a8:	6a39      	ldr	r1, [r7, #32]
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	fa01 f303 	lsl.w	r3, r1, r3
 80031b0:	431a      	orrs	r2, r3
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 8090 	beq.w	80032e4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031c4:	4b56      	ldr	r3, [pc, #344]	; (8003320 <HAL_GPIO_Init+0x2dc>)
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	4a55      	ldr	r2, [pc, #340]	; (8003320 <HAL_GPIO_Init+0x2dc>)
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	6193      	str	r3, [r2, #24]
 80031d0:	4b53      	ldr	r3, [pc, #332]	; (8003320 <HAL_GPIO_Init+0x2dc>)
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031dc:	4a51      	ldr	r2, [pc, #324]	; (8003324 <HAL_GPIO_Init+0x2e0>)
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	089b      	lsrs	r3, r3, #2
 80031e2:	3302      	adds	r3, #2
 80031e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	220f      	movs	r2, #15
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4013      	ands	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a49      	ldr	r2, [pc, #292]	; (8003328 <HAL_GPIO_Init+0x2e4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d00d      	beq.n	8003224 <HAL_GPIO_Init+0x1e0>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a48      	ldr	r2, [pc, #288]	; (800332c <HAL_GPIO_Init+0x2e8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d007      	beq.n	8003220 <HAL_GPIO_Init+0x1dc>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a47      	ldr	r2, [pc, #284]	; (8003330 <HAL_GPIO_Init+0x2ec>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d101      	bne.n	800321c <HAL_GPIO_Init+0x1d8>
 8003218:	2302      	movs	r3, #2
 800321a:	e004      	b.n	8003226 <HAL_GPIO_Init+0x1e2>
 800321c:	2303      	movs	r3, #3
 800321e:	e002      	b.n	8003226 <HAL_GPIO_Init+0x1e2>
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <HAL_GPIO_Init+0x1e2>
 8003224:	2300      	movs	r3, #0
 8003226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003228:	f002 0203 	and.w	r2, r2, #3
 800322c:	0092      	lsls	r2, r2, #2
 800322e:	4093      	lsls	r3, r2
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	4313      	orrs	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003236:	493b      	ldr	r1, [pc, #236]	; (8003324 <HAL_GPIO_Init+0x2e0>)
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	089b      	lsrs	r3, r3, #2
 800323c:	3302      	adds	r3, #2
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d006      	beq.n	800325e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003250:	4b38      	ldr	r3, [pc, #224]	; (8003334 <HAL_GPIO_Init+0x2f0>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4937      	ldr	r1, [pc, #220]	; (8003334 <HAL_GPIO_Init+0x2f0>)
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	4313      	orrs	r3, r2
 800325a:	600b      	str	r3, [r1, #0]
 800325c:	e006      	b.n	800326c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800325e:	4b35      	ldr	r3, [pc, #212]	; (8003334 <HAL_GPIO_Init+0x2f0>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	43db      	mvns	r3, r3
 8003266:	4933      	ldr	r1, [pc, #204]	; (8003334 <HAL_GPIO_Init+0x2f0>)
 8003268:	4013      	ands	r3, r2
 800326a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d006      	beq.n	8003286 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003278:	4b2e      	ldr	r3, [pc, #184]	; (8003334 <HAL_GPIO_Init+0x2f0>)
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	492d      	ldr	r1, [pc, #180]	; (8003334 <HAL_GPIO_Init+0x2f0>)
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	4313      	orrs	r3, r2
 8003282:	604b      	str	r3, [r1, #4]
 8003284:	e006      	b.n	8003294 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003286:	4b2b      	ldr	r3, [pc, #172]	; (8003334 <HAL_GPIO_Init+0x2f0>)
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	43db      	mvns	r3, r3
 800328e:	4929      	ldr	r1, [pc, #164]	; (8003334 <HAL_GPIO_Init+0x2f0>)
 8003290:	4013      	ands	r3, r2
 8003292:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d006      	beq.n	80032ae <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032a0:	4b24      	ldr	r3, [pc, #144]	; (8003334 <HAL_GPIO_Init+0x2f0>)
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	4923      	ldr	r1, [pc, #140]	; (8003334 <HAL_GPIO_Init+0x2f0>)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	608b      	str	r3, [r1, #8]
 80032ac:	e006      	b.n	80032bc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032ae:	4b21      	ldr	r3, [pc, #132]	; (8003334 <HAL_GPIO_Init+0x2f0>)
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	43db      	mvns	r3, r3
 80032b6:	491f      	ldr	r1, [pc, #124]	; (8003334 <HAL_GPIO_Init+0x2f0>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d006      	beq.n	80032d6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032c8:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <HAL_GPIO_Init+0x2f0>)
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	4919      	ldr	r1, [pc, #100]	; (8003334 <HAL_GPIO_Init+0x2f0>)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60cb      	str	r3, [r1, #12]
 80032d4:	e006      	b.n	80032e4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032d6:	4b17      	ldr	r3, [pc, #92]	; (8003334 <HAL_GPIO_Init+0x2f0>)
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	43db      	mvns	r3, r3
 80032de:	4915      	ldr	r1, [pc, #84]	; (8003334 <HAL_GPIO_Init+0x2f0>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	3301      	adds	r3, #1
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f47f aeaf 	bne.w	8003058 <HAL_GPIO_Init+0x14>
  }
}
 80032fa:	bf00      	nop
 80032fc:	bf00      	nop
 80032fe:	372c      	adds	r7, #44	; 0x2c
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	10320000 	.word	0x10320000
 800330c:	10310000 	.word	0x10310000
 8003310:	10220000 	.word	0x10220000
 8003314:	10210000 	.word	0x10210000
 8003318:	10120000 	.word	0x10120000
 800331c:	10110000 	.word	0x10110000
 8003320:	40021000 	.word	0x40021000
 8003324:	40010000 	.word	0x40010000
 8003328:	40010800 	.word	0x40010800
 800332c:	40010c00 	.word	0x40010c00
 8003330:	40011000 	.word	0x40011000
 8003334:	40010400 	.word	0x40010400

08003338 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	887b      	ldrh	r3, [r7, #2]
 800334a:	4013      	ands	r3, r2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
 8003354:	e001      	b.n	800335a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003356:	2300      	movs	r3, #0
 8003358:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800335a:	7bfb      	ldrb	r3, [r7, #15]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr

08003366 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	460b      	mov	r3, r1
 8003370:	807b      	strh	r3, [r7, #2]
 8003372:	4613      	mov	r3, r2
 8003374:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003376:	787b      	ldrb	r3, [r7, #1]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800337c:	887a      	ldrh	r2, [r7, #2]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003382:	e003      	b.n	800338c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003384:	887b      	ldrh	r3, [r7, #2]
 8003386:	041a      	lsls	r2, r3, #16
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	611a      	str	r2, [r3, #16]
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr

08003396 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003396:	b480      	push	{r7}
 8003398:	b085      	sub	sp, #20
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	460b      	mov	r3, r1
 80033a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033a8:	887a      	ldrh	r2, [r7, #2]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4013      	ands	r3, r2
 80033ae:	041a      	lsls	r2, r3, #16
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	43d9      	mvns	r1, r3
 80033b4:	887b      	ldrh	r3, [r7, #2]
 80033b6:	400b      	ands	r3, r1
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	611a      	str	r2, [r3, #16]
}
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr

080033c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033d2:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033d4:	695a      	ldr	r2, [r3, #20]
 80033d6:	88fb      	ldrh	r3, [r7, #6]
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d006      	beq.n	80033ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033de:	4a05      	ldr	r2, [pc, #20]	; (80033f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fe fc2c 	bl	8001c44 <HAL_GPIO_EXTI_Callback>
  }
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40010400 	.word	0x40010400

080033f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e12b      	b.n	8003662 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7fe fd98 	bl	8001f54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2224      	movs	r2, #36	; 0x24
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0201 	bic.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800344a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800345a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800345c:	f000 ffea 	bl	8004434 <HAL_RCC_GetPCLK1Freq>
 8003460:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	4a81      	ldr	r2, [pc, #516]	; (800366c <HAL_I2C_Init+0x274>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d807      	bhi.n	800347c <HAL_I2C_Init+0x84>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4a80      	ldr	r2, [pc, #512]	; (8003670 <HAL_I2C_Init+0x278>)
 8003470:	4293      	cmp	r3, r2
 8003472:	bf94      	ite	ls
 8003474:	2301      	movls	r3, #1
 8003476:	2300      	movhi	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	e006      	b.n	800348a <HAL_I2C_Init+0x92>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4a7d      	ldr	r2, [pc, #500]	; (8003674 <HAL_I2C_Init+0x27c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	bf94      	ite	ls
 8003484:	2301      	movls	r3, #1
 8003486:	2300      	movhi	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e0e7      	b.n	8003662 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	4a78      	ldr	r2, [pc, #480]	; (8003678 <HAL_I2C_Init+0x280>)
 8003496:	fba2 2303 	umull	r2, r3, r2, r3
 800349a:	0c9b      	lsrs	r3, r3, #18
 800349c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4a6a      	ldr	r2, [pc, #424]	; (800366c <HAL_I2C_Init+0x274>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d802      	bhi.n	80034cc <HAL_I2C_Init+0xd4>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	3301      	adds	r3, #1
 80034ca:	e009      	b.n	80034e0 <HAL_I2C_Init+0xe8>
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034d2:	fb02 f303 	mul.w	r3, r2, r3
 80034d6:	4a69      	ldr	r2, [pc, #420]	; (800367c <HAL_I2C_Init+0x284>)
 80034d8:	fba2 2303 	umull	r2, r3, r2, r3
 80034dc:	099b      	lsrs	r3, r3, #6
 80034de:	3301      	adds	r3, #1
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6812      	ldr	r2, [r2, #0]
 80034e4:	430b      	orrs	r3, r1
 80034e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	495c      	ldr	r1, [pc, #368]	; (800366c <HAL_I2C_Init+0x274>)
 80034fc:	428b      	cmp	r3, r1
 80034fe:	d819      	bhi.n	8003534 <HAL_I2C_Init+0x13c>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	1e59      	subs	r1, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	fbb1 f3f3 	udiv	r3, r1, r3
 800350e:	1c59      	adds	r1, r3, #1
 8003510:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003514:	400b      	ands	r3, r1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <HAL_I2C_Init+0x138>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	1e59      	subs	r1, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	fbb1 f3f3 	udiv	r3, r1, r3
 8003528:	3301      	adds	r3, #1
 800352a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800352e:	e051      	b.n	80035d4 <HAL_I2C_Init+0x1dc>
 8003530:	2304      	movs	r3, #4
 8003532:	e04f      	b.n	80035d4 <HAL_I2C_Init+0x1dc>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d111      	bne.n	8003560 <HAL_I2C_Init+0x168>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	1e58      	subs	r0, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6859      	ldr	r1, [r3, #4]
 8003544:	460b      	mov	r3, r1
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	440b      	add	r3, r1
 800354a:	fbb0 f3f3 	udiv	r3, r0, r3
 800354e:	3301      	adds	r3, #1
 8003550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003554:	2b00      	cmp	r3, #0
 8003556:	bf0c      	ite	eq
 8003558:	2301      	moveq	r3, #1
 800355a:	2300      	movne	r3, #0
 800355c:	b2db      	uxtb	r3, r3
 800355e:	e012      	b.n	8003586 <HAL_I2C_Init+0x18e>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	1e58      	subs	r0, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6859      	ldr	r1, [r3, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	0099      	lsls	r1, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	fbb0 f3f3 	udiv	r3, r0, r3
 8003576:	3301      	adds	r3, #1
 8003578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800357c:	2b00      	cmp	r3, #0
 800357e:	bf0c      	ite	eq
 8003580:	2301      	moveq	r3, #1
 8003582:	2300      	movne	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <HAL_I2C_Init+0x196>
 800358a:	2301      	movs	r3, #1
 800358c:	e022      	b.n	80035d4 <HAL_I2C_Init+0x1dc>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10e      	bne.n	80035b4 <HAL_I2C_Init+0x1bc>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1e58      	subs	r0, r3, #1
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6859      	ldr	r1, [r3, #4]
 800359e:	460b      	mov	r3, r1
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	440b      	add	r3, r1
 80035a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80035a8:	3301      	adds	r3, #1
 80035aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035b2:	e00f      	b.n	80035d4 <HAL_I2C_Init+0x1dc>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	1e58      	subs	r0, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6859      	ldr	r1, [r3, #4]
 80035bc:	460b      	mov	r3, r1
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	0099      	lsls	r1, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ca:	3301      	adds	r3, #1
 80035cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	6809      	ldr	r1, [r1, #0]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69da      	ldr	r2, [r3, #28]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003602:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6911      	ldr	r1, [r2, #16]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	68d2      	ldr	r2, [r2, #12]
 800360e:	4311      	orrs	r1, r2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	430b      	orrs	r3, r1
 8003616:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695a      	ldr	r2, [r3, #20]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2220      	movs	r2, #32
 800364e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	000186a0 	.word	0x000186a0
 8003670:	001e847f 	.word	0x001e847f
 8003674:	003d08ff 	.word	0x003d08ff
 8003678:	431bde83 	.word	0x431bde83
 800367c:	10624dd3 	.word	0x10624dd3

08003680 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af02      	add	r7, sp, #8
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	607a      	str	r2, [r7, #4]
 800368a:	461a      	mov	r2, r3
 800368c:	460b      	mov	r3, r1
 800368e:	817b      	strh	r3, [r7, #10]
 8003690:	4613      	mov	r3, r2
 8003692:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003694:	f7fe fde0 	bl	8002258 <HAL_GetTick>
 8003698:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	f040 80e0 	bne.w	8003868 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	2319      	movs	r3, #25
 80036ae:	2201      	movs	r2, #1
 80036b0:	4970      	ldr	r1, [pc, #448]	; (8003874 <HAL_I2C_Master_Transmit+0x1f4>)
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f964 	bl	8003980 <I2C_WaitOnFlagUntilTimeout>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80036be:	2302      	movs	r3, #2
 80036c0:	e0d3      	b.n	800386a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_I2C_Master_Transmit+0x50>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e0cc      	b.n	800386a <HAL_I2C_Master_Transmit+0x1ea>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d007      	beq.n	80036f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f042 0201 	orr.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003704:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2221      	movs	r2, #33	; 0x21
 800370a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2210      	movs	r2, #16
 8003712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	893a      	ldrh	r2, [r7, #8]
 8003726:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4a50      	ldr	r2, [pc, #320]	; (8003878 <HAL_I2C_Master_Transmit+0x1f8>)
 8003736:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003738:	8979      	ldrh	r1, [r7, #10]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	6a3a      	ldr	r2, [r7, #32]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f89c 	bl	800387c <I2C_MasterRequestWrite>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e08d      	b.n	800386a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800374e:	2300      	movs	r3, #0
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003764:	e066      	b.n	8003834 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	6a39      	ldr	r1, [r7, #32]
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 f9de 	bl	8003b2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00d      	beq.n	8003792 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	2b04      	cmp	r3, #4
 800377c:	d107      	bne.n	800378e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e06b      	b.n	800386a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	781a      	ldrb	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d11b      	bne.n	8003808 <HAL_I2C_Master_Transmit+0x188>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d017      	beq.n	8003808 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	781a      	ldrb	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	6a39      	ldr	r1, [r7, #32]
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f9ce 	bl	8003bae <I2C_WaitOnBTFFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00d      	beq.n	8003834 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	2b04      	cmp	r3, #4
 800381e:	d107      	bne.n	8003830 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800382e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e01a      	b.n	800386a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003838:	2b00      	cmp	r3, #0
 800383a:	d194      	bne.n	8003766 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800384a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	e000      	b.n	800386a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003868:	2302      	movs	r3, #2
  }
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	00100002 	.word	0x00100002
 8003878:	ffff0000 	.word	0xffff0000

0800387c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b088      	sub	sp, #32
 8003880:	af02      	add	r7, sp, #8
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	607a      	str	r2, [r7, #4]
 8003886:	603b      	str	r3, [r7, #0]
 8003888:	460b      	mov	r3, r1
 800388a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2b08      	cmp	r3, #8
 8003896:	d006      	beq.n	80038a6 <I2C_MasterRequestWrite+0x2a>
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d003      	beq.n	80038a6 <I2C_MasterRequestWrite+0x2a>
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038a4:	d108      	bne.n	80038b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	e00b      	b.n	80038d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038bc:	2b12      	cmp	r3, #18
 80038be:	d107      	bne.n	80038d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f84f 	bl	8003980 <I2C_WaitOnFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00d      	beq.n	8003904 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038f6:	d103      	bne.n	8003900 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e035      	b.n	8003970 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800390c:	d108      	bne.n	8003920 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800390e:	897b      	ldrh	r3, [r7, #10]
 8003910:	b2db      	uxtb	r3, r3
 8003912:	461a      	mov	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800391c:	611a      	str	r2, [r3, #16]
 800391e:	e01b      	b.n	8003958 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003920:	897b      	ldrh	r3, [r7, #10]
 8003922:	11db      	asrs	r3, r3, #7
 8003924:	b2db      	uxtb	r3, r3
 8003926:	f003 0306 	and.w	r3, r3, #6
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f063 030f 	orn	r3, r3, #15
 8003930:	b2da      	uxtb	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	490e      	ldr	r1, [pc, #56]	; (8003978 <I2C_MasterRequestWrite+0xfc>)
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f875 	bl	8003a2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e010      	b.n	8003970 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800394e:	897b      	ldrh	r3, [r7, #10]
 8003950:	b2da      	uxtb	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	4907      	ldr	r1, [pc, #28]	; (800397c <I2C_MasterRequestWrite+0x100>)
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f865 	bl	8003a2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	00010008 	.word	0x00010008
 800397c:	00010002 	.word	0x00010002

08003980 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	603b      	str	r3, [r7, #0]
 800398c:	4613      	mov	r3, r2
 800398e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003990:	e025      	b.n	80039de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003998:	d021      	beq.n	80039de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800399a:	f7fe fc5d 	bl	8002258 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d302      	bcc.n	80039b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d116      	bne.n	80039de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	f043 0220 	orr.w	r2, r3, #32
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e023      	b.n	8003a26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	0c1b      	lsrs	r3, r3, #16
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d10d      	bne.n	8003a04 <I2C_WaitOnFlagUntilTimeout+0x84>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	43da      	mvns	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	4013      	ands	r3, r2
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	bf0c      	ite	eq
 80039fa:	2301      	moveq	r3, #1
 80039fc:	2300      	movne	r3, #0
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	461a      	mov	r2, r3
 8003a02:	e00c      	b.n	8003a1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	43da      	mvns	r2, r3
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	bf0c      	ite	eq
 8003a16:	2301      	moveq	r3, #1
 8003a18:	2300      	movne	r3, #0
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	79fb      	ldrb	r3, [r7, #7]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d0b6      	beq.n	8003992 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b084      	sub	sp, #16
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	60f8      	str	r0, [r7, #12]
 8003a36:	60b9      	str	r1, [r7, #8]
 8003a38:	607a      	str	r2, [r7, #4]
 8003a3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a3c:	e051      	b.n	8003ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4c:	d123      	bne.n	8003a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f043 0204 	orr.w	r2, r3, #4
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e046      	b.n	8003b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9c:	d021      	beq.n	8003ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a9e:	f7fe fbdb 	bl	8002258 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d302      	bcc.n	8003ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d116      	bne.n	8003ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	f043 0220 	orr.w	r2, r3, #32
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e020      	b.n	8003b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	0c1b      	lsrs	r3, r3, #16
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d10c      	bne.n	8003b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	43da      	mvns	r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	4013      	ands	r3, r2
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	bf14      	ite	ne
 8003afe:	2301      	movne	r3, #1
 8003b00:	2300      	moveq	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	e00b      	b.n	8003b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	43da      	mvns	r2, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	4013      	ands	r3, r2
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	bf14      	ite	ne
 8003b18:	2301      	movne	r3, #1
 8003b1a:	2300      	moveq	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d18d      	bne.n	8003a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b38:	e02d      	b.n	8003b96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 f878 	bl	8003c30 <I2C_IsAcknowledgeFailed>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e02d      	b.n	8003ba6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d021      	beq.n	8003b96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b52:	f7fe fb81 	bl	8002258 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d302      	bcc.n	8003b68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d116      	bne.n	8003b96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f043 0220 	orr.w	r2, r3, #32
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e007      	b.n	8003ba6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba0:	2b80      	cmp	r3, #128	; 0x80
 8003ba2:	d1ca      	bne.n	8003b3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b084      	sub	sp, #16
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bba:	e02d      	b.n	8003c18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 f837 	bl	8003c30 <I2C_IsAcknowledgeFailed>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e02d      	b.n	8003c28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd2:	d021      	beq.n	8003c18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd4:	f7fe fb40 	bl	8002258 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d302      	bcc.n	8003bea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d116      	bne.n	8003c18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	f043 0220 	orr.w	r2, r3, #32
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e007      	b.n	8003c28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d1ca      	bne.n	8003bbc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c46:	d11b      	bne.n	8003c80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	f043 0204 	orr.w	r2, r3, #4
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e000      	b.n	8003c82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr

08003c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e26c      	b.n	8004178 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 8087 	beq.w	8003dba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cac:	4b92      	ldr	r3, [pc, #584]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 030c 	and.w	r3, r3, #12
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d00c      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cb8:	4b8f      	ldr	r3, [pc, #572]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 030c 	and.w	r3, r3, #12
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d112      	bne.n	8003cea <HAL_RCC_OscConfig+0x5e>
 8003cc4:	4b8c      	ldr	r3, [pc, #560]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd0:	d10b      	bne.n	8003cea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd2:	4b89      	ldr	r3, [pc, #548]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d06c      	beq.n	8003db8 <HAL_RCC_OscConfig+0x12c>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d168      	bne.n	8003db8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e246      	b.n	8004178 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf2:	d106      	bne.n	8003d02 <HAL_RCC_OscConfig+0x76>
 8003cf4:	4b80      	ldr	r3, [pc, #512]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a7f      	ldr	r2, [pc, #508]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cfe:	6013      	str	r3, [r2, #0]
 8003d00:	e02e      	b.n	8003d60 <HAL_RCC_OscConfig+0xd4>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10c      	bne.n	8003d24 <HAL_RCC_OscConfig+0x98>
 8003d0a:	4b7b      	ldr	r3, [pc, #492]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a7a      	ldr	r2, [pc, #488]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	4b78      	ldr	r3, [pc, #480]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a77      	ldr	r2, [pc, #476]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	e01d      	b.n	8003d60 <HAL_RCC_OscConfig+0xd4>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d2c:	d10c      	bne.n	8003d48 <HAL_RCC_OscConfig+0xbc>
 8003d2e:	4b72      	ldr	r3, [pc, #456]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a71      	ldr	r2, [pc, #452]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	4b6f      	ldr	r3, [pc, #444]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a6e      	ldr	r2, [pc, #440]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	e00b      	b.n	8003d60 <HAL_RCC_OscConfig+0xd4>
 8003d48:	4b6b      	ldr	r3, [pc, #428]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a6a      	ldr	r2, [pc, #424]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	4b68      	ldr	r3, [pc, #416]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a67      	ldr	r2, [pc, #412]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d013      	beq.n	8003d90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d68:	f7fe fa76 	bl	8002258 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d70:	f7fe fa72 	bl	8002258 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b64      	cmp	r3, #100	; 0x64
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e1fa      	b.n	8004178 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d82:	4b5d      	ldr	r3, [pc, #372]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0xe4>
 8003d8e:	e014      	b.n	8003dba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d90:	f7fe fa62 	bl	8002258 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d98:	f7fe fa5e 	bl	8002258 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b64      	cmp	r3, #100	; 0x64
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e1e6      	b.n	8004178 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003daa:	4b53      	ldr	r3, [pc, #332]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x10c>
 8003db6:	e000      	b.n	8003dba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d063      	beq.n	8003e8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dc6:	4b4c      	ldr	r3, [pc, #304]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f003 030c 	and.w	r3, r3, #12
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00b      	beq.n	8003dea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003dd2:	4b49      	ldr	r3, [pc, #292]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f003 030c 	and.w	r3, r3, #12
 8003dda:	2b08      	cmp	r3, #8
 8003ddc:	d11c      	bne.n	8003e18 <HAL_RCC_OscConfig+0x18c>
 8003dde:	4b46      	ldr	r3, [pc, #280]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d116      	bne.n	8003e18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dea:	4b43      	ldr	r3, [pc, #268]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d005      	beq.n	8003e02 <HAL_RCC_OscConfig+0x176>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d001      	beq.n	8003e02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e1ba      	b.n	8004178 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e02:	4b3d      	ldr	r3, [pc, #244]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	4939      	ldr	r1, [pc, #228]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e16:	e03a      	b.n	8003e8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d020      	beq.n	8003e62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e20:	4b36      	ldr	r3, [pc, #216]	; (8003efc <HAL_RCC_OscConfig+0x270>)
 8003e22:	2201      	movs	r2, #1
 8003e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e26:	f7fe fa17 	bl	8002258 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e2e:	f7fe fa13 	bl	8002258 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e19b      	b.n	8004178 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e40:	4b2d      	ldr	r3, [pc, #180]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0f0      	beq.n	8003e2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e4c:	4b2a      	ldr	r3, [pc, #168]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	4927      	ldr	r1, [pc, #156]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	600b      	str	r3, [r1, #0]
 8003e60:	e015      	b.n	8003e8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e62:	4b26      	ldr	r3, [pc, #152]	; (8003efc <HAL_RCC_OscConfig+0x270>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7fe f9f6 	bl	8002258 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e70:	f7fe f9f2 	bl	8002258 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e17a      	b.n	8004178 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e82:	4b1d      	ldr	r3, [pc, #116]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f0      	bne.n	8003e70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d03a      	beq.n	8003f10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d019      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ea2:	4b17      	ldr	r3, [pc, #92]	; (8003f00 <HAL_RCC_OscConfig+0x274>)
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea8:	f7fe f9d6 	bl	8002258 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eb0:	f7fe f9d2 	bl	8002258 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e15a      	b.n	8004178 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0f0      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ece:	2001      	movs	r0, #1
 8003ed0:	f000 fac4 	bl	800445c <RCC_Delay>
 8003ed4:	e01c      	b.n	8003f10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ed6:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <HAL_RCC_OscConfig+0x274>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003edc:	f7fe f9bc 	bl	8002258 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee2:	e00f      	b.n	8003f04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee4:	f7fe f9b8 	bl	8002258 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d908      	bls.n	8003f04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e140      	b.n	8004178 <HAL_RCC_OscConfig+0x4ec>
 8003ef6:	bf00      	nop
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	42420000 	.word	0x42420000
 8003f00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f04:	4b9e      	ldr	r3, [pc, #632]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1e9      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 80a6 	beq.w	800406a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f22:	4b97      	ldr	r3, [pc, #604]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10d      	bne.n	8003f4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f2e:	4b94      	ldr	r3, [pc, #592]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	4a93      	ldr	r2, [pc, #588]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 8003f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f38:	61d3      	str	r3, [r2, #28]
 8003f3a:	4b91      	ldr	r3, [pc, #580]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f42:	60bb      	str	r3, [r7, #8]
 8003f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f46:	2301      	movs	r3, #1
 8003f48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4a:	4b8e      	ldr	r3, [pc, #568]	; (8004184 <HAL_RCC_OscConfig+0x4f8>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d118      	bne.n	8003f88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f56:	4b8b      	ldr	r3, [pc, #556]	; (8004184 <HAL_RCC_OscConfig+0x4f8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a8a      	ldr	r2, [pc, #552]	; (8004184 <HAL_RCC_OscConfig+0x4f8>)
 8003f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f62:	f7fe f979 	bl	8002258 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f6a:	f7fe f975 	bl	8002258 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b64      	cmp	r3, #100	; 0x64
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e0fd      	b.n	8004178 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7c:	4b81      	ldr	r3, [pc, #516]	; (8004184 <HAL_RCC_OscConfig+0x4f8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f0      	beq.n	8003f6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d106      	bne.n	8003f9e <HAL_RCC_OscConfig+0x312>
 8003f90:	4b7b      	ldr	r3, [pc, #492]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	4a7a      	ldr	r2, [pc, #488]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	6213      	str	r3, [r2, #32]
 8003f9c:	e02d      	b.n	8003ffa <HAL_RCC_OscConfig+0x36e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10c      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x334>
 8003fa6:	4b76      	ldr	r3, [pc, #472]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	4a75      	ldr	r2, [pc, #468]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 8003fac:	f023 0301 	bic.w	r3, r3, #1
 8003fb0:	6213      	str	r3, [r2, #32]
 8003fb2:	4b73      	ldr	r3, [pc, #460]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	4a72      	ldr	r2, [pc, #456]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 8003fb8:	f023 0304 	bic.w	r3, r3, #4
 8003fbc:	6213      	str	r3, [r2, #32]
 8003fbe:	e01c      	b.n	8003ffa <HAL_RCC_OscConfig+0x36e>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	2b05      	cmp	r3, #5
 8003fc6:	d10c      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x356>
 8003fc8:	4b6d      	ldr	r3, [pc, #436]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	4a6c      	ldr	r2, [pc, #432]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 8003fce:	f043 0304 	orr.w	r3, r3, #4
 8003fd2:	6213      	str	r3, [r2, #32]
 8003fd4:	4b6a      	ldr	r3, [pc, #424]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	4a69      	ldr	r2, [pc, #420]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 8003fda:	f043 0301 	orr.w	r3, r3, #1
 8003fde:	6213      	str	r3, [r2, #32]
 8003fe0:	e00b      	b.n	8003ffa <HAL_RCC_OscConfig+0x36e>
 8003fe2:	4b67      	ldr	r3, [pc, #412]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	4a66      	ldr	r2, [pc, #408]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 8003fe8:	f023 0301 	bic.w	r3, r3, #1
 8003fec:	6213      	str	r3, [r2, #32]
 8003fee:	4b64      	ldr	r3, [pc, #400]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	4a63      	ldr	r2, [pc, #396]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 8003ff4:	f023 0304 	bic.w	r3, r3, #4
 8003ff8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d015      	beq.n	800402e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004002:	f7fe f929 	bl	8002258 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004008:	e00a      	b.n	8004020 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800400a:	f7fe f925 	bl	8002258 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	f241 3288 	movw	r2, #5000	; 0x1388
 8004018:	4293      	cmp	r3, r2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e0ab      	b.n	8004178 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004020:	4b57      	ldr	r3, [pc, #348]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0ee      	beq.n	800400a <HAL_RCC_OscConfig+0x37e>
 800402c:	e014      	b.n	8004058 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800402e:	f7fe f913 	bl	8002258 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004034:	e00a      	b.n	800404c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004036:	f7fe f90f 	bl	8002258 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	f241 3288 	movw	r2, #5000	; 0x1388
 8004044:	4293      	cmp	r3, r2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e095      	b.n	8004178 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800404c:	4b4c      	ldr	r3, [pc, #304]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1ee      	bne.n	8004036 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004058:	7dfb      	ldrb	r3, [r7, #23]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d105      	bne.n	800406a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800405e:	4b48      	ldr	r3, [pc, #288]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	4a47      	ldr	r2, [pc, #284]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 8004064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004068:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 8081 	beq.w	8004176 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004074:	4b42      	ldr	r3, [pc, #264]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f003 030c 	and.w	r3, r3, #12
 800407c:	2b08      	cmp	r3, #8
 800407e:	d061      	beq.n	8004144 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	2b02      	cmp	r3, #2
 8004086:	d146      	bne.n	8004116 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004088:	4b3f      	ldr	r3, [pc, #252]	; (8004188 <HAL_RCC_OscConfig+0x4fc>)
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408e:	f7fe f8e3 	bl	8002258 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004096:	f7fe f8df 	bl	8002258 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e067      	b.n	8004178 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040a8:	4b35      	ldr	r3, [pc, #212]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1f0      	bne.n	8004096 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040bc:	d108      	bne.n	80040d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80040be:	4b30      	ldr	r3, [pc, #192]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	492d      	ldr	r1, [pc, #180]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040d0:	4b2b      	ldr	r3, [pc, #172]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a19      	ldr	r1, [r3, #32]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	430b      	orrs	r3, r1
 80040e2:	4927      	ldr	r1, [pc, #156]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040e8:	4b27      	ldr	r3, [pc, #156]	; (8004188 <HAL_RCC_OscConfig+0x4fc>)
 80040ea:	2201      	movs	r2, #1
 80040ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ee:	f7fe f8b3 	bl	8002258 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f6:	f7fe f8af 	bl	8002258 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e037      	b.n	8004178 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004108:	4b1d      	ldr	r3, [pc, #116]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0f0      	beq.n	80040f6 <HAL_RCC_OscConfig+0x46a>
 8004114:	e02f      	b.n	8004176 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004116:	4b1c      	ldr	r3, [pc, #112]	; (8004188 <HAL_RCC_OscConfig+0x4fc>)
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411c:	f7fe f89c 	bl	8002258 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004124:	f7fe f898 	bl	8002258 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e020      	b.n	8004178 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004136:	4b12      	ldr	r3, [pc, #72]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_OscConfig+0x498>
 8004142:	e018      	b.n	8004176 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d101      	bne.n	8004150 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e013      	b.n	8004178 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004150:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <HAL_RCC_OscConfig+0x4f4>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	429a      	cmp	r2, r3
 8004162:	d106      	bne.n	8004172 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800416e:	429a      	cmp	r2, r3
 8004170:	d001      	beq.n	8004176 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e000      	b.n	8004178 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40021000 	.word	0x40021000
 8004184:	40007000 	.word	0x40007000
 8004188:	42420060 	.word	0x42420060

0800418c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e0d0      	b.n	8004342 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041a0:	4b6a      	ldr	r3, [pc, #424]	; (800434c <HAL_RCC_ClockConfig+0x1c0>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d910      	bls.n	80041d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ae:	4b67      	ldr	r3, [pc, #412]	; (800434c <HAL_RCC_ClockConfig+0x1c0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f023 0207 	bic.w	r2, r3, #7
 80041b6:	4965      	ldr	r1, [pc, #404]	; (800434c <HAL_RCC_ClockConfig+0x1c0>)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041be:	4b63      	ldr	r3, [pc, #396]	; (800434c <HAL_RCC_ClockConfig+0x1c0>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d001      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0b8      	b.n	8004342 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d020      	beq.n	800421e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d005      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041e8:	4b59      	ldr	r3, [pc, #356]	; (8004350 <HAL_RCC_ClockConfig+0x1c4>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	4a58      	ldr	r2, [pc, #352]	; (8004350 <HAL_RCC_ClockConfig+0x1c4>)
 80041ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004200:	4b53      	ldr	r3, [pc, #332]	; (8004350 <HAL_RCC_ClockConfig+0x1c4>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	4a52      	ldr	r2, [pc, #328]	; (8004350 <HAL_RCC_ClockConfig+0x1c4>)
 8004206:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800420a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800420c:	4b50      	ldr	r3, [pc, #320]	; (8004350 <HAL_RCC_ClockConfig+0x1c4>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	494d      	ldr	r1, [pc, #308]	; (8004350 <HAL_RCC_ClockConfig+0x1c4>)
 800421a:	4313      	orrs	r3, r2
 800421c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d040      	beq.n	80042ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d107      	bne.n	8004242 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004232:	4b47      	ldr	r3, [pc, #284]	; (8004350 <HAL_RCC_ClockConfig+0x1c4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d115      	bne.n	800426a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e07f      	b.n	8004342 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d107      	bne.n	800425a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800424a:	4b41      	ldr	r3, [pc, #260]	; (8004350 <HAL_RCC_ClockConfig+0x1c4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d109      	bne.n	800426a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e073      	b.n	8004342 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800425a:	4b3d      	ldr	r3, [pc, #244]	; (8004350 <HAL_RCC_ClockConfig+0x1c4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e06b      	b.n	8004342 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800426a:	4b39      	ldr	r3, [pc, #228]	; (8004350 <HAL_RCC_ClockConfig+0x1c4>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f023 0203 	bic.w	r2, r3, #3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	4936      	ldr	r1, [pc, #216]	; (8004350 <HAL_RCC_ClockConfig+0x1c4>)
 8004278:	4313      	orrs	r3, r2
 800427a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800427c:	f7fd ffec 	bl	8002258 <HAL_GetTick>
 8004280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004282:	e00a      	b.n	800429a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004284:	f7fd ffe8 	bl	8002258 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004292:	4293      	cmp	r3, r2
 8004294:	d901      	bls.n	800429a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e053      	b.n	8004342 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800429a:	4b2d      	ldr	r3, [pc, #180]	; (8004350 <HAL_RCC_ClockConfig+0x1c4>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f003 020c 	and.w	r2, r3, #12
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d1eb      	bne.n	8004284 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042ac:	4b27      	ldr	r3, [pc, #156]	; (800434c <HAL_RCC_ClockConfig+0x1c0>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d210      	bcs.n	80042dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ba:	4b24      	ldr	r3, [pc, #144]	; (800434c <HAL_RCC_ClockConfig+0x1c0>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f023 0207 	bic.w	r2, r3, #7
 80042c2:	4922      	ldr	r1, [pc, #136]	; (800434c <HAL_RCC_ClockConfig+0x1c0>)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ca:	4b20      	ldr	r3, [pc, #128]	; (800434c <HAL_RCC_ClockConfig+0x1c0>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d001      	beq.n	80042dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e032      	b.n	8004342 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d008      	beq.n	80042fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042e8:	4b19      	ldr	r3, [pc, #100]	; (8004350 <HAL_RCC_ClockConfig+0x1c4>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	4916      	ldr	r1, [pc, #88]	; (8004350 <HAL_RCC_ClockConfig+0x1c4>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d009      	beq.n	800431a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004306:	4b12      	ldr	r3, [pc, #72]	; (8004350 <HAL_RCC_ClockConfig+0x1c4>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	490e      	ldr	r1, [pc, #56]	; (8004350 <HAL_RCC_ClockConfig+0x1c4>)
 8004316:	4313      	orrs	r3, r2
 8004318:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800431a:	f000 f821 	bl	8004360 <HAL_RCC_GetSysClockFreq>
 800431e:	4602      	mov	r2, r0
 8004320:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <HAL_RCC_ClockConfig+0x1c4>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	091b      	lsrs	r3, r3, #4
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	490a      	ldr	r1, [pc, #40]	; (8004354 <HAL_RCC_ClockConfig+0x1c8>)
 800432c:	5ccb      	ldrb	r3, [r1, r3]
 800432e:	fa22 f303 	lsr.w	r3, r2, r3
 8004332:	4a09      	ldr	r2, [pc, #36]	; (8004358 <HAL_RCC_ClockConfig+0x1cc>)
 8004334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004336:	4b09      	ldr	r3, [pc, #36]	; (800435c <HAL_RCC_ClockConfig+0x1d0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f7fd ff4a 	bl	80021d4 <HAL_InitTick>

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40022000 	.word	0x40022000
 8004350:	40021000 	.word	0x40021000
 8004354:	08005b04 	.word	0x08005b04
 8004358:	200000c0 	.word	0x200000c0
 800435c:	200000c4 	.word	0x200000c4

08004360 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004360:	b490      	push	{r4, r7}
 8004362:	b08a      	sub	sp, #40	; 0x28
 8004364:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004366:	4b2a      	ldr	r3, [pc, #168]	; (8004410 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004368:	1d3c      	adds	r4, r7, #4
 800436a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800436c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004370:	f240 2301 	movw	r3, #513	; 0x201
 8004374:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004376:	2300      	movs	r3, #0
 8004378:	61fb      	str	r3, [r7, #28]
 800437a:	2300      	movs	r3, #0
 800437c:	61bb      	str	r3, [r7, #24]
 800437e:	2300      	movs	r3, #0
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800438a:	4b22      	ldr	r3, [pc, #136]	; (8004414 <HAL_RCC_GetSysClockFreq+0xb4>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f003 030c 	and.w	r3, r3, #12
 8004396:	2b04      	cmp	r3, #4
 8004398:	d002      	beq.n	80043a0 <HAL_RCC_GetSysClockFreq+0x40>
 800439a:	2b08      	cmp	r3, #8
 800439c:	d003      	beq.n	80043a6 <HAL_RCC_GetSysClockFreq+0x46>
 800439e:	e02d      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043a0:	4b1d      	ldr	r3, [pc, #116]	; (8004418 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043a2:	623b      	str	r3, [r7, #32]
      break;
 80043a4:	e02d      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	0c9b      	lsrs	r3, r3, #18
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80043b2:	4413      	add	r3, r2
 80043b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80043b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d013      	beq.n	80043ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80043c4:	4b13      	ldr	r3, [pc, #76]	; (8004414 <HAL_RCC_GetSysClockFreq+0xb4>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	0c5b      	lsrs	r3, r3, #17
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80043d2:	4413      	add	r3, r2
 80043d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80043d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	4a0e      	ldr	r2, [pc, #56]	; (8004418 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043de:	fb02 f203 	mul.w	r2, r2, r3
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e8:	627b      	str	r3, [r7, #36]	; 0x24
 80043ea:	e004      	b.n	80043f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	4a0b      	ldr	r2, [pc, #44]	; (800441c <HAL_RCC_GetSysClockFreq+0xbc>)
 80043f0:	fb02 f303 	mul.w	r3, r2, r3
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	623b      	str	r3, [r7, #32]
      break;
 80043fa:	e002      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043fc:	4b06      	ldr	r3, [pc, #24]	; (8004418 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043fe:	623b      	str	r3, [r7, #32]
      break;
 8004400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004402:	6a3b      	ldr	r3, [r7, #32]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3728      	adds	r7, #40	; 0x28
 8004408:	46bd      	mov	sp, r7
 800440a:	bc90      	pop	{r4, r7}
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	08005a1c 	.word	0x08005a1c
 8004414:	40021000 	.word	0x40021000
 8004418:	007a1200 	.word	0x007a1200
 800441c:	003d0900 	.word	0x003d0900

08004420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004424:	4b02      	ldr	r3, [pc, #8]	; (8004430 <HAL_RCC_GetHCLKFreq+0x10>)
 8004426:	681b      	ldr	r3, [r3, #0]
}
 8004428:	4618      	mov	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr
 8004430:	200000c0 	.word	0x200000c0

08004434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004438:	f7ff fff2 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 800443c:	4602      	mov	r2, r0
 800443e:	4b05      	ldr	r3, [pc, #20]	; (8004454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	0a1b      	lsrs	r3, r3, #8
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	4903      	ldr	r1, [pc, #12]	; (8004458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800444a:	5ccb      	ldrb	r3, [r1, r3]
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004450:	4618      	mov	r0, r3
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40021000 	.word	0x40021000
 8004458:	08005b14 	.word	0x08005b14

0800445c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004464:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <RCC_Delay+0x34>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a0a      	ldr	r2, [pc, #40]	; (8004494 <RCC_Delay+0x38>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	0a5b      	lsrs	r3, r3, #9
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	fb02 f303 	mul.w	r3, r2, r3
 8004476:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004478:	bf00      	nop
  }
  while (Delay --);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	1e5a      	subs	r2, r3, #1
 800447e:	60fa      	str	r2, [r7, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1f9      	bne.n	8004478 <RCC_Delay+0x1c>
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr
 8004490:	200000c0 	.word	0x200000c0
 8004494:	10624dd3 	.word	0x10624dd3

08004498 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	613b      	str	r3, [r7, #16]
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d07d      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80044b4:	2300      	movs	r3, #0
 80044b6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044b8:	4b4f      	ldr	r3, [pc, #316]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10d      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c4:	4b4c      	ldr	r3, [pc, #304]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	4a4b      	ldr	r2, [pc, #300]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ce:	61d3      	str	r3, [r2, #28]
 80044d0:	4b49      	ldr	r3, [pc, #292]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044dc:	2301      	movs	r3, #1
 80044de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e0:	4b46      	ldr	r3, [pc, #280]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d118      	bne.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ec:	4b43      	ldr	r3, [pc, #268]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a42      	ldr	r2, [pc, #264]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044f8:	f7fd feae 	bl	8002258 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fe:	e008      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004500:	f7fd feaa 	bl	8002258 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b64      	cmp	r3, #100	; 0x64
 800450c:	d901      	bls.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e06d      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004512:	4b3a      	ldr	r3, [pc, #232]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800451e:	4b36      	ldr	r3, [pc, #216]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004526:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d02e      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	429a      	cmp	r2, r3
 800453a:	d027      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800453c:	4b2e      	ldr	r3, [pc, #184]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004544:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004546:	4b2e      	ldr	r3, [pc, #184]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004548:	2201      	movs	r2, #1
 800454a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800454c:	4b2c      	ldr	r3, [pc, #176]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004552:	4a29      	ldr	r2, [pc, #164]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d014      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004562:	f7fd fe79 	bl	8002258 <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004568:	e00a      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456a:	f7fd fe75 	bl	8002258 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f241 3288 	movw	r2, #5000	; 0x1388
 8004578:	4293      	cmp	r3, r2
 800457a:	d901      	bls.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e036      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004580:	4b1d      	ldr	r3, [pc, #116]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0ee      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800458c:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	4917      	ldr	r1, [pc, #92]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800459a:	4313      	orrs	r3, r2
 800459c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800459e:	7dfb      	ldrb	r3, [r7, #23]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d105      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a4:	4b14      	ldr	r3, [pc, #80]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	4a13      	ldr	r2, [pc, #76]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045bc:	4b0e      	ldr	r3, [pc, #56]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	490b      	ldr	r1, [pc, #44]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0310 	and.w	r3, r3, #16
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d008      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045da:	4b07      	ldr	r3, [pc, #28]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	4904      	ldr	r1, [pc, #16]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40021000 	.word	0x40021000
 80045fc:	40007000 	.word	0x40007000
 8004600:	42420440 	.word	0x42420440

08004604 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e041      	b.n	800469a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fd fce4 	bl	8001ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3304      	adds	r3, #4
 8004640:	4619      	mov	r1, r3
 8004642:	4610      	mov	r0, r2
 8004644:	f000 fa98 	bl	8004b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d001      	beq.n	80046bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e035      	b.n	8004728 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a16      	ldr	r2, [pc, #88]	; (8004734 <HAL_TIM_Base_Start_IT+0x90>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d009      	beq.n	80046f2 <HAL_TIM_Base_Start_IT+0x4e>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e6:	d004      	beq.n	80046f2 <HAL_TIM_Base_Start_IT+0x4e>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a12      	ldr	r2, [pc, #72]	; (8004738 <HAL_TIM_Base_Start_IT+0x94>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d111      	bne.n	8004716 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2b06      	cmp	r3, #6
 8004702:	d010      	beq.n	8004726 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0201 	orr.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004714:	e007      	b.n	8004726 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f042 0201 	orr.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	bc80      	pop	{r7}
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	40012c00 	.word	0x40012c00
 8004738:	40000400 	.word	0x40000400

0800473c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0201 	bic.w	r2, r2, #1
 8004752:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6a1a      	ldr	r2, [r3, #32]
 800475a:	f241 1311 	movw	r3, #4369	; 0x1111
 800475e:	4013      	ands	r3, r2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10f      	bne.n	8004784 <HAL_TIM_Base_Stop_IT+0x48>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6a1a      	ldr	r2, [r3, #32]
 800476a:	f240 4344 	movw	r3, #1092	; 0x444
 800476e:	4013      	ands	r3, r2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d107      	bne.n	8004784 <HAL_TIM_Base_Stop_IT+0x48>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0201 	bic.w	r2, r2, #1
 8004782:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr

08004798 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d122      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d11b      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f06f 0202 	mvn.w	r2, #2
 80047c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f9b1 	bl	8004b42 <HAL_TIM_IC_CaptureCallback>
 80047e0:	e005      	b.n	80047ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f9a4 	bl	8004b30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f9b3 	bl	8004b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d122      	bne.n	8004848 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b04      	cmp	r3, #4
 800480e:	d11b      	bne.n	8004848 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f06f 0204 	mvn.w	r2, #4
 8004818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2202      	movs	r2, #2
 800481e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f987 	bl	8004b42 <HAL_TIM_IC_CaptureCallback>
 8004834:	e005      	b.n	8004842 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f97a 	bl	8004b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f989 	bl	8004b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b08      	cmp	r3, #8
 8004854:	d122      	bne.n	800489c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f003 0308 	and.w	r3, r3, #8
 8004860:	2b08      	cmp	r3, #8
 8004862:	d11b      	bne.n	800489c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f06f 0208 	mvn.w	r2, #8
 800486c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2204      	movs	r2, #4
 8004872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f95d 	bl	8004b42 <HAL_TIM_IC_CaptureCallback>
 8004888:	e005      	b.n	8004896 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f950 	bl	8004b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f95f 	bl	8004b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f003 0310 	and.w	r3, r3, #16
 80048a6:	2b10      	cmp	r3, #16
 80048a8:	d122      	bne.n	80048f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f003 0310 	and.w	r3, r3, #16
 80048b4:	2b10      	cmp	r3, #16
 80048b6:	d11b      	bne.n	80048f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0210 	mvn.w	r2, #16
 80048c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2208      	movs	r2, #8
 80048c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f933 	bl	8004b42 <HAL_TIM_IC_CaptureCallback>
 80048dc:	e005      	b.n	80048ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f926 	bl	8004b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f935 	bl	8004b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d10e      	bne.n	800491c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b01      	cmp	r3, #1
 800490a:	d107      	bne.n	800491c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f06f 0201 	mvn.w	r2, #1
 8004914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7fd f9dc 	bl	8001cd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004926:	2b80      	cmp	r3, #128	; 0x80
 8004928:	d10e      	bne.n	8004948 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004934:	2b80      	cmp	r3, #128	; 0x80
 8004936:	d107      	bne.n	8004948 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fa67 	bl	8004e16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004952:	2b40      	cmp	r3, #64	; 0x40
 8004954:	d10e      	bne.n	8004974 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004960:	2b40      	cmp	r3, #64	; 0x40
 8004962:	d107      	bne.n	8004974 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800496c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f8f9 	bl	8004b66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f003 0320 	and.w	r3, r3, #32
 800497e:	2b20      	cmp	r3, #32
 8004980:	d10e      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b20      	cmp	r3, #32
 800498e:	d107      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0220 	mvn.w	r2, #32
 8004998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fa32 	bl	8004e04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049a0:	bf00      	nop
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d101      	bne.n	80049c0 <HAL_TIM_ConfigClockSource+0x18>
 80049bc:	2302      	movs	r3, #2
 80049be:	e0b3      	b.n	8004b28 <HAL_TIM_ConfigClockSource+0x180>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049f8:	d03e      	beq.n	8004a78 <HAL_TIM_ConfigClockSource+0xd0>
 80049fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049fe:	f200 8087 	bhi.w	8004b10 <HAL_TIM_ConfigClockSource+0x168>
 8004a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a06:	f000 8085 	beq.w	8004b14 <HAL_TIM_ConfigClockSource+0x16c>
 8004a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a0e:	d87f      	bhi.n	8004b10 <HAL_TIM_ConfigClockSource+0x168>
 8004a10:	2b70      	cmp	r3, #112	; 0x70
 8004a12:	d01a      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0xa2>
 8004a14:	2b70      	cmp	r3, #112	; 0x70
 8004a16:	d87b      	bhi.n	8004b10 <HAL_TIM_ConfigClockSource+0x168>
 8004a18:	2b60      	cmp	r3, #96	; 0x60
 8004a1a:	d050      	beq.n	8004abe <HAL_TIM_ConfigClockSource+0x116>
 8004a1c:	2b60      	cmp	r3, #96	; 0x60
 8004a1e:	d877      	bhi.n	8004b10 <HAL_TIM_ConfigClockSource+0x168>
 8004a20:	2b50      	cmp	r3, #80	; 0x50
 8004a22:	d03c      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0xf6>
 8004a24:	2b50      	cmp	r3, #80	; 0x50
 8004a26:	d873      	bhi.n	8004b10 <HAL_TIM_ConfigClockSource+0x168>
 8004a28:	2b40      	cmp	r3, #64	; 0x40
 8004a2a:	d058      	beq.n	8004ade <HAL_TIM_ConfigClockSource+0x136>
 8004a2c:	2b40      	cmp	r3, #64	; 0x40
 8004a2e:	d86f      	bhi.n	8004b10 <HAL_TIM_ConfigClockSource+0x168>
 8004a30:	2b30      	cmp	r3, #48	; 0x30
 8004a32:	d064      	beq.n	8004afe <HAL_TIM_ConfigClockSource+0x156>
 8004a34:	2b30      	cmp	r3, #48	; 0x30
 8004a36:	d86b      	bhi.n	8004b10 <HAL_TIM_ConfigClockSource+0x168>
 8004a38:	2b20      	cmp	r3, #32
 8004a3a:	d060      	beq.n	8004afe <HAL_TIM_ConfigClockSource+0x156>
 8004a3c:	2b20      	cmp	r3, #32
 8004a3e:	d867      	bhi.n	8004b10 <HAL_TIM_ConfigClockSource+0x168>
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d05c      	beq.n	8004afe <HAL_TIM_ConfigClockSource+0x156>
 8004a44:	2b10      	cmp	r3, #16
 8004a46:	d05a      	beq.n	8004afe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004a48:	e062      	b.n	8004b10 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6818      	ldr	r0, [r3, #0]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	6899      	ldr	r1, [r3, #8]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f000 f95c 	bl	8004d16 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	609a      	str	r2, [r3, #8]
      break;
 8004a76:	e04e      	b.n	8004b16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6818      	ldr	r0, [r3, #0]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	6899      	ldr	r1, [r3, #8]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f000 f945 	bl	8004d16 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a9a:	609a      	str	r2, [r3, #8]
      break;
 8004a9c:	e03b      	b.n	8004b16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6818      	ldr	r0, [r3, #0]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	6859      	ldr	r1, [r3, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f000 f8bc 	bl	8004c28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2150      	movs	r1, #80	; 0x50
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 f913 	bl	8004ce2 <TIM_ITRx_SetConfig>
      break;
 8004abc:	e02b      	b.n	8004b16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6818      	ldr	r0, [r3, #0]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	6859      	ldr	r1, [r3, #4]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	461a      	mov	r2, r3
 8004acc:	f000 f8da 	bl	8004c84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2160      	movs	r1, #96	; 0x60
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 f903 	bl	8004ce2 <TIM_ITRx_SetConfig>
      break;
 8004adc:	e01b      	b.n	8004b16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6818      	ldr	r0, [r3, #0]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	6859      	ldr	r1, [r3, #4]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	461a      	mov	r2, r3
 8004aec:	f000 f89c 	bl	8004c28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2140      	movs	r1, #64	; 0x40
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 f8f3 	bl	8004ce2 <TIM_ITRx_SetConfig>
      break;
 8004afc:	e00b      	b.n	8004b16 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4619      	mov	r1, r3
 8004b08:	4610      	mov	r0, r2
 8004b0a:	f000 f8ea 	bl	8004ce2 <TIM_ITRx_SetConfig>
        break;
 8004b0e:	e002      	b.n	8004b16 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b10:	bf00      	nop
 8004b12:	e000      	b.n	8004b16 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bc80      	pop	{r7}
 8004b40:	4770      	bx	lr

08004b42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bc80      	pop	{r7}
 8004b52:	4770      	bx	lr

08004b54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bc80      	pop	{r7}
 8004b64:	4770      	bx	lr

08004b66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr

08004b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a25      	ldr	r2, [pc, #148]	; (8004c20 <TIM_Base_SetConfig+0xa8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d007      	beq.n	8004ba0 <TIM_Base_SetConfig+0x28>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b96:	d003      	beq.n	8004ba0 <TIM_Base_SetConfig+0x28>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a22      	ldr	r2, [pc, #136]	; (8004c24 <TIM_Base_SetConfig+0xac>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d108      	bne.n	8004bb2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a1a      	ldr	r2, [pc, #104]	; (8004c20 <TIM_Base_SetConfig+0xa8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d007      	beq.n	8004bca <TIM_Base_SetConfig+0x52>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc0:	d003      	beq.n	8004bca <TIM_Base_SetConfig+0x52>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a17      	ldr	r2, [pc, #92]	; (8004c24 <TIM_Base_SetConfig+0xac>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d108      	bne.n	8004bdc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a07      	ldr	r2, [pc, #28]	; (8004c20 <TIM_Base_SetConfig+0xa8>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d103      	bne.n	8004c10 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	691a      	ldr	r2, [r3, #16]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	615a      	str	r2, [r3, #20]
}
 8004c16:	bf00      	nop
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr
 8004c20:	40012c00 	.word	0x40012c00
 8004c24:	40000400 	.word	0x40000400

08004c28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	f023 0201 	bic.w	r2, r3, #1
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f023 030a 	bic.w	r3, r3, #10
 8004c64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	621a      	str	r2, [r3, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr

08004c84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	f023 0210 	bic.w	r2, r3, #16
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	031b      	lsls	r3, r3, #12
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cc0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	621a      	str	r2, [r3, #32]
}
 8004cd8:	bf00      	nop
 8004cda:	371c      	adds	r7, #28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bc80      	pop	{r7}
 8004ce0:	4770      	bx	lr

08004ce2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b085      	sub	sp, #20
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f043 0307 	orr.w	r3, r3, #7
 8004d04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	609a      	str	r2, [r3, #8]
}
 8004d0c:	bf00      	nop
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bc80      	pop	{r7}
 8004d14:	4770      	bx	lr

08004d16 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b087      	sub	sp, #28
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	60f8      	str	r0, [r7, #12]
 8004d1e:	60b9      	str	r1, [r7, #8]
 8004d20:	607a      	str	r2, [r7, #4]
 8004d22:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d30:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	021a      	lsls	r2, r3, #8
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	609a      	str	r2, [r3, #8]
}
 8004d4a:	bf00      	nop
 8004d4c:	371c      	adds	r7, #28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr

08004d54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d101      	bne.n	8004d6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	e041      	b.n	8004df0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a14      	ldr	r2, [pc, #80]	; (8004dfc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d009      	beq.n	8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db8:	d004      	beq.n	8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a10      	ldr	r2, [pc, #64]	; (8004e00 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d10c      	bne.n	8004dde <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bc80      	pop	{r7}
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40012c00 	.word	0x40012c00
 8004e00:	40000400 	.word	0x40000400

08004e04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bc80      	pop	{r7}
 8004e14:	4770      	bx	lr

08004e16 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bc80      	pop	{r7}
 8004e26:	4770      	bx	lr

08004e28 <__errno>:
 8004e28:	4b01      	ldr	r3, [pc, #4]	; (8004e30 <__errno+0x8>)
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	200000cc 	.word	0x200000cc

08004e34 <__libc_init_array>:
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	2600      	movs	r6, #0
 8004e38:	4d0c      	ldr	r5, [pc, #48]	; (8004e6c <__libc_init_array+0x38>)
 8004e3a:	4c0d      	ldr	r4, [pc, #52]	; (8004e70 <__libc_init_array+0x3c>)
 8004e3c:	1b64      	subs	r4, r4, r5
 8004e3e:	10a4      	asrs	r4, r4, #2
 8004e40:	42a6      	cmp	r6, r4
 8004e42:	d109      	bne.n	8004e58 <__libc_init_array+0x24>
 8004e44:	f000 fc5c 	bl	8005700 <_init>
 8004e48:	2600      	movs	r6, #0
 8004e4a:	4d0a      	ldr	r5, [pc, #40]	; (8004e74 <__libc_init_array+0x40>)
 8004e4c:	4c0a      	ldr	r4, [pc, #40]	; (8004e78 <__libc_init_array+0x44>)
 8004e4e:	1b64      	subs	r4, r4, r5
 8004e50:	10a4      	asrs	r4, r4, #2
 8004e52:	42a6      	cmp	r6, r4
 8004e54:	d105      	bne.n	8004e62 <__libc_init_array+0x2e>
 8004e56:	bd70      	pop	{r4, r5, r6, pc}
 8004e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5c:	4798      	blx	r3
 8004e5e:	3601      	adds	r6, #1
 8004e60:	e7ee      	b.n	8004e40 <__libc_init_array+0xc>
 8004e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e66:	4798      	blx	r3
 8004e68:	3601      	adds	r6, #1
 8004e6a:	e7f2      	b.n	8004e52 <__libc_init_array+0x1e>
 8004e6c:	08005b50 	.word	0x08005b50
 8004e70:	08005b50 	.word	0x08005b50
 8004e74:	08005b50 	.word	0x08005b50
 8004e78:	08005b54 	.word	0x08005b54

08004e7c <memset>:
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	4402      	add	r2, r0
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d100      	bne.n	8004e86 <memset+0xa>
 8004e84:	4770      	bx	lr
 8004e86:	f803 1b01 	strb.w	r1, [r3], #1
 8004e8a:	e7f9      	b.n	8004e80 <memset+0x4>

08004e8c <siprintf>:
 8004e8c:	b40e      	push	{r1, r2, r3}
 8004e8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e92:	b500      	push	{lr}
 8004e94:	b09c      	sub	sp, #112	; 0x70
 8004e96:	ab1d      	add	r3, sp, #116	; 0x74
 8004e98:	9002      	str	r0, [sp, #8]
 8004e9a:	9006      	str	r0, [sp, #24]
 8004e9c:	9107      	str	r1, [sp, #28]
 8004e9e:	9104      	str	r1, [sp, #16]
 8004ea0:	4808      	ldr	r0, [pc, #32]	; (8004ec4 <siprintf+0x38>)
 8004ea2:	4909      	ldr	r1, [pc, #36]	; (8004ec8 <siprintf+0x3c>)
 8004ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ea8:	9105      	str	r1, [sp, #20]
 8004eaa:	6800      	ldr	r0, [r0, #0]
 8004eac:	a902      	add	r1, sp, #8
 8004eae:	9301      	str	r3, [sp, #4]
 8004eb0:	f000 f868 	bl	8004f84 <_svfiprintf_r>
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	9b02      	ldr	r3, [sp, #8]
 8004eb8:	701a      	strb	r2, [r3, #0]
 8004eba:	b01c      	add	sp, #112	; 0x70
 8004ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ec0:	b003      	add	sp, #12
 8004ec2:	4770      	bx	lr
 8004ec4:	200000cc 	.word	0x200000cc
 8004ec8:	ffff0208 	.word	0xffff0208

08004ecc <__ssputs_r>:
 8004ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed0:	688e      	ldr	r6, [r1, #8]
 8004ed2:	4682      	mov	sl, r0
 8004ed4:	429e      	cmp	r6, r3
 8004ed6:	460c      	mov	r4, r1
 8004ed8:	4690      	mov	r8, r2
 8004eda:	461f      	mov	r7, r3
 8004edc:	d838      	bhi.n	8004f50 <__ssputs_r+0x84>
 8004ede:	898a      	ldrh	r2, [r1, #12]
 8004ee0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ee4:	d032      	beq.n	8004f4c <__ssputs_r+0x80>
 8004ee6:	6825      	ldr	r5, [r4, #0]
 8004ee8:	6909      	ldr	r1, [r1, #16]
 8004eea:	3301      	adds	r3, #1
 8004eec:	eba5 0901 	sub.w	r9, r5, r1
 8004ef0:	6965      	ldr	r5, [r4, #20]
 8004ef2:	444b      	add	r3, r9
 8004ef4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ef8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004efc:	106d      	asrs	r5, r5, #1
 8004efe:	429d      	cmp	r5, r3
 8004f00:	bf38      	it	cc
 8004f02:	461d      	movcc	r5, r3
 8004f04:	0553      	lsls	r3, r2, #21
 8004f06:	d531      	bpl.n	8004f6c <__ssputs_r+0xa0>
 8004f08:	4629      	mov	r1, r5
 8004f0a:	f000 fb53 	bl	80055b4 <_malloc_r>
 8004f0e:	4606      	mov	r6, r0
 8004f10:	b950      	cbnz	r0, 8004f28 <__ssputs_r+0x5c>
 8004f12:	230c      	movs	r3, #12
 8004f14:	f04f 30ff 	mov.w	r0, #4294967295
 8004f18:	f8ca 3000 	str.w	r3, [sl]
 8004f1c:	89a3      	ldrh	r3, [r4, #12]
 8004f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f22:	81a3      	strh	r3, [r4, #12]
 8004f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f28:	464a      	mov	r2, r9
 8004f2a:	6921      	ldr	r1, [r4, #16]
 8004f2c:	f000 face 	bl	80054cc <memcpy>
 8004f30:	89a3      	ldrh	r3, [r4, #12]
 8004f32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f3a:	81a3      	strh	r3, [r4, #12]
 8004f3c:	6126      	str	r6, [r4, #16]
 8004f3e:	444e      	add	r6, r9
 8004f40:	6026      	str	r6, [r4, #0]
 8004f42:	463e      	mov	r6, r7
 8004f44:	6165      	str	r5, [r4, #20]
 8004f46:	eba5 0509 	sub.w	r5, r5, r9
 8004f4a:	60a5      	str	r5, [r4, #8]
 8004f4c:	42be      	cmp	r6, r7
 8004f4e:	d900      	bls.n	8004f52 <__ssputs_r+0x86>
 8004f50:	463e      	mov	r6, r7
 8004f52:	4632      	mov	r2, r6
 8004f54:	4641      	mov	r1, r8
 8004f56:	6820      	ldr	r0, [r4, #0]
 8004f58:	f000 fac6 	bl	80054e8 <memmove>
 8004f5c:	68a3      	ldr	r3, [r4, #8]
 8004f5e:	6822      	ldr	r2, [r4, #0]
 8004f60:	1b9b      	subs	r3, r3, r6
 8004f62:	4432      	add	r2, r6
 8004f64:	2000      	movs	r0, #0
 8004f66:	60a3      	str	r3, [r4, #8]
 8004f68:	6022      	str	r2, [r4, #0]
 8004f6a:	e7db      	b.n	8004f24 <__ssputs_r+0x58>
 8004f6c:	462a      	mov	r2, r5
 8004f6e:	f000 fb7b 	bl	8005668 <_realloc_r>
 8004f72:	4606      	mov	r6, r0
 8004f74:	2800      	cmp	r0, #0
 8004f76:	d1e1      	bne.n	8004f3c <__ssputs_r+0x70>
 8004f78:	4650      	mov	r0, sl
 8004f7a:	6921      	ldr	r1, [r4, #16]
 8004f7c:	f000 face 	bl	800551c <_free_r>
 8004f80:	e7c7      	b.n	8004f12 <__ssputs_r+0x46>
	...

08004f84 <_svfiprintf_r>:
 8004f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f88:	4698      	mov	r8, r3
 8004f8a:	898b      	ldrh	r3, [r1, #12]
 8004f8c:	4607      	mov	r7, r0
 8004f8e:	061b      	lsls	r3, r3, #24
 8004f90:	460d      	mov	r5, r1
 8004f92:	4614      	mov	r4, r2
 8004f94:	b09d      	sub	sp, #116	; 0x74
 8004f96:	d50e      	bpl.n	8004fb6 <_svfiprintf_r+0x32>
 8004f98:	690b      	ldr	r3, [r1, #16]
 8004f9a:	b963      	cbnz	r3, 8004fb6 <_svfiprintf_r+0x32>
 8004f9c:	2140      	movs	r1, #64	; 0x40
 8004f9e:	f000 fb09 	bl	80055b4 <_malloc_r>
 8004fa2:	6028      	str	r0, [r5, #0]
 8004fa4:	6128      	str	r0, [r5, #16]
 8004fa6:	b920      	cbnz	r0, 8004fb2 <_svfiprintf_r+0x2e>
 8004fa8:	230c      	movs	r3, #12
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb0:	e0d1      	b.n	8005156 <_svfiprintf_r+0x1d2>
 8004fb2:	2340      	movs	r3, #64	; 0x40
 8004fb4:	616b      	str	r3, [r5, #20]
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8004fba:	2320      	movs	r3, #32
 8004fbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fc0:	2330      	movs	r3, #48	; 0x30
 8004fc2:	f04f 0901 	mov.w	r9, #1
 8004fc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005170 <_svfiprintf_r+0x1ec>
 8004fce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fd2:	4623      	mov	r3, r4
 8004fd4:	469a      	mov	sl, r3
 8004fd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fda:	b10a      	cbz	r2, 8004fe0 <_svfiprintf_r+0x5c>
 8004fdc:	2a25      	cmp	r2, #37	; 0x25
 8004fde:	d1f9      	bne.n	8004fd4 <_svfiprintf_r+0x50>
 8004fe0:	ebba 0b04 	subs.w	fp, sl, r4
 8004fe4:	d00b      	beq.n	8004ffe <_svfiprintf_r+0x7a>
 8004fe6:	465b      	mov	r3, fp
 8004fe8:	4622      	mov	r2, r4
 8004fea:	4629      	mov	r1, r5
 8004fec:	4638      	mov	r0, r7
 8004fee:	f7ff ff6d 	bl	8004ecc <__ssputs_r>
 8004ff2:	3001      	adds	r0, #1
 8004ff4:	f000 80aa 	beq.w	800514c <_svfiprintf_r+0x1c8>
 8004ff8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ffa:	445a      	add	r2, fp
 8004ffc:	9209      	str	r2, [sp, #36]	; 0x24
 8004ffe:	f89a 3000 	ldrb.w	r3, [sl]
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 80a2 	beq.w	800514c <_svfiprintf_r+0x1c8>
 8005008:	2300      	movs	r3, #0
 800500a:	f04f 32ff 	mov.w	r2, #4294967295
 800500e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005012:	f10a 0a01 	add.w	sl, sl, #1
 8005016:	9304      	str	r3, [sp, #16]
 8005018:	9307      	str	r3, [sp, #28]
 800501a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800501e:	931a      	str	r3, [sp, #104]	; 0x68
 8005020:	4654      	mov	r4, sl
 8005022:	2205      	movs	r2, #5
 8005024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005028:	4851      	ldr	r0, [pc, #324]	; (8005170 <_svfiprintf_r+0x1ec>)
 800502a:	f000 fa41 	bl	80054b0 <memchr>
 800502e:	9a04      	ldr	r2, [sp, #16]
 8005030:	b9d8      	cbnz	r0, 800506a <_svfiprintf_r+0xe6>
 8005032:	06d0      	lsls	r0, r2, #27
 8005034:	bf44      	itt	mi
 8005036:	2320      	movmi	r3, #32
 8005038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800503c:	0711      	lsls	r1, r2, #28
 800503e:	bf44      	itt	mi
 8005040:	232b      	movmi	r3, #43	; 0x2b
 8005042:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005046:	f89a 3000 	ldrb.w	r3, [sl]
 800504a:	2b2a      	cmp	r3, #42	; 0x2a
 800504c:	d015      	beq.n	800507a <_svfiprintf_r+0xf6>
 800504e:	4654      	mov	r4, sl
 8005050:	2000      	movs	r0, #0
 8005052:	f04f 0c0a 	mov.w	ip, #10
 8005056:	9a07      	ldr	r2, [sp, #28]
 8005058:	4621      	mov	r1, r4
 800505a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800505e:	3b30      	subs	r3, #48	; 0x30
 8005060:	2b09      	cmp	r3, #9
 8005062:	d94e      	bls.n	8005102 <_svfiprintf_r+0x17e>
 8005064:	b1b0      	cbz	r0, 8005094 <_svfiprintf_r+0x110>
 8005066:	9207      	str	r2, [sp, #28]
 8005068:	e014      	b.n	8005094 <_svfiprintf_r+0x110>
 800506a:	eba0 0308 	sub.w	r3, r0, r8
 800506e:	fa09 f303 	lsl.w	r3, r9, r3
 8005072:	4313      	orrs	r3, r2
 8005074:	46a2      	mov	sl, r4
 8005076:	9304      	str	r3, [sp, #16]
 8005078:	e7d2      	b.n	8005020 <_svfiprintf_r+0x9c>
 800507a:	9b03      	ldr	r3, [sp, #12]
 800507c:	1d19      	adds	r1, r3, #4
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	9103      	str	r1, [sp, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	bfbb      	ittet	lt
 8005086:	425b      	neglt	r3, r3
 8005088:	f042 0202 	orrlt.w	r2, r2, #2
 800508c:	9307      	strge	r3, [sp, #28]
 800508e:	9307      	strlt	r3, [sp, #28]
 8005090:	bfb8      	it	lt
 8005092:	9204      	strlt	r2, [sp, #16]
 8005094:	7823      	ldrb	r3, [r4, #0]
 8005096:	2b2e      	cmp	r3, #46	; 0x2e
 8005098:	d10c      	bne.n	80050b4 <_svfiprintf_r+0x130>
 800509a:	7863      	ldrb	r3, [r4, #1]
 800509c:	2b2a      	cmp	r3, #42	; 0x2a
 800509e:	d135      	bne.n	800510c <_svfiprintf_r+0x188>
 80050a0:	9b03      	ldr	r3, [sp, #12]
 80050a2:	3402      	adds	r4, #2
 80050a4:	1d1a      	adds	r2, r3, #4
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	9203      	str	r2, [sp, #12]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	bfb8      	it	lt
 80050ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80050b2:	9305      	str	r3, [sp, #20]
 80050b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005180 <_svfiprintf_r+0x1fc>
 80050b8:	2203      	movs	r2, #3
 80050ba:	4650      	mov	r0, sl
 80050bc:	7821      	ldrb	r1, [r4, #0]
 80050be:	f000 f9f7 	bl	80054b0 <memchr>
 80050c2:	b140      	cbz	r0, 80050d6 <_svfiprintf_r+0x152>
 80050c4:	2340      	movs	r3, #64	; 0x40
 80050c6:	eba0 000a 	sub.w	r0, r0, sl
 80050ca:	fa03 f000 	lsl.w	r0, r3, r0
 80050ce:	9b04      	ldr	r3, [sp, #16]
 80050d0:	3401      	adds	r4, #1
 80050d2:	4303      	orrs	r3, r0
 80050d4:	9304      	str	r3, [sp, #16]
 80050d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050da:	2206      	movs	r2, #6
 80050dc:	4825      	ldr	r0, [pc, #148]	; (8005174 <_svfiprintf_r+0x1f0>)
 80050de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050e2:	f000 f9e5 	bl	80054b0 <memchr>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	d038      	beq.n	800515c <_svfiprintf_r+0x1d8>
 80050ea:	4b23      	ldr	r3, [pc, #140]	; (8005178 <_svfiprintf_r+0x1f4>)
 80050ec:	bb1b      	cbnz	r3, 8005136 <_svfiprintf_r+0x1b2>
 80050ee:	9b03      	ldr	r3, [sp, #12]
 80050f0:	3307      	adds	r3, #7
 80050f2:	f023 0307 	bic.w	r3, r3, #7
 80050f6:	3308      	adds	r3, #8
 80050f8:	9303      	str	r3, [sp, #12]
 80050fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050fc:	4433      	add	r3, r6
 80050fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005100:	e767      	b.n	8004fd2 <_svfiprintf_r+0x4e>
 8005102:	460c      	mov	r4, r1
 8005104:	2001      	movs	r0, #1
 8005106:	fb0c 3202 	mla	r2, ip, r2, r3
 800510a:	e7a5      	b.n	8005058 <_svfiprintf_r+0xd4>
 800510c:	2300      	movs	r3, #0
 800510e:	f04f 0c0a 	mov.w	ip, #10
 8005112:	4619      	mov	r1, r3
 8005114:	3401      	adds	r4, #1
 8005116:	9305      	str	r3, [sp, #20]
 8005118:	4620      	mov	r0, r4
 800511a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800511e:	3a30      	subs	r2, #48	; 0x30
 8005120:	2a09      	cmp	r2, #9
 8005122:	d903      	bls.n	800512c <_svfiprintf_r+0x1a8>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0c5      	beq.n	80050b4 <_svfiprintf_r+0x130>
 8005128:	9105      	str	r1, [sp, #20]
 800512a:	e7c3      	b.n	80050b4 <_svfiprintf_r+0x130>
 800512c:	4604      	mov	r4, r0
 800512e:	2301      	movs	r3, #1
 8005130:	fb0c 2101 	mla	r1, ip, r1, r2
 8005134:	e7f0      	b.n	8005118 <_svfiprintf_r+0x194>
 8005136:	ab03      	add	r3, sp, #12
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	462a      	mov	r2, r5
 800513c:	4638      	mov	r0, r7
 800513e:	4b0f      	ldr	r3, [pc, #60]	; (800517c <_svfiprintf_r+0x1f8>)
 8005140:	a904      	add	r1, sp, #16
 8005142:	f3af 8000 	nop.w
 8005146:	1c42      	adds	r2, r0, #1
 8005148:	4606      	mov	r6, r0
 800514a:	d1d6      	bne.n	80050fa <_svfiprintf_r+0x176>
 800514c:	89ab      	ldrh	r3, [r5, #12]
 800514e:	065b      	lsls	r3, r3, #25
 8005150:	f53f af2c 	bmi.w	8004fac <_svfiprintf_r+0x28>
 8005154:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005156:	b01d      	add	sp, #116	; 0x74
 8005158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800515c:	ab03      	add	r3, sp, #12
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	462a      	mov	r2, r5
 8005162:	4638      	mov	r0, r7
 8005164:	4b05      	ldr	r3, [pc, #20]	; (800517c <_svfiprintf_r+0x1f8>)
 8005166:	a904      	add	r1, sp, #16
 8005168:	f000 f87c 	bl	8005264 <_printf_i>
 800516c:	e7eb      	b.n	8005146 <_svfiprintf_r+0x1c2>
 800516e:	bf00      	nop
 8005170:	08005b1c 	.word	0x08005b1c
 8005174:	08005b26 	.word	0x08005b26
 8005178:	00000000 	.word	0x00000000
 800517c:	08004ecd 	.word	0x08004ecd
 8005180:	08005b22 	.word	0x08005b22

08005184 <_printf_common>:
 8005184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005188:	4616      	mov	r6, r2
 800518a:	4699      	mov	r9, r3
 800518c:	688a      	ldr	r2, [r1, #8]
 800518e:	690b      	ldr	r3, [r1, #16]
 8005190:	4607      	mov	r7, r0
 8005192:	4293      	cmp	r3, r2
 8005194:	bfb8      	it	lt
 8005196:	4613      	movlt	r3, r2
 8005198:	6033      	str	r3, [r6, #0]
 800519a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800519e:	460c      	mov	r4, r1
 80051a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051a4:	b10a      	cbz	r2, 80051aa <_printf_common+0x26>
 80051a6:	3301      	adds	r3, #1
 80051a8:	6033      	str	r3, [r6, #0]
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	0699      	lsls	r1, r3, #26
 80051ae:	bf42      	ittt	mi
 80051b0:	6833      	ldrmi	r3, [r6, #0]
 80051b2:	3302      	addmi	r3, #2
 80051b4:	6033      	strmi	r3, [r6, #0]
 80051b6:	6825      	ldr	r5, [r4, #0]
 80051b8:	f015 0506 	ands.w	r5, r5, #6
 80051bc:	d106      	bne.n	80051cc <_printf_common+0x48>
 80051be:	f104 0a19 	add.w	sl, r4, #25
 80051c2:	68e3      	ldr	r3, [r4, #12]
 80051c4:	6832      	ldr	r2, [r6, #0]
 80051c6:	1a9b      	subs	r3, r3, r2
 80051c8:	42ab      	cmp	r3, r5
 80051ca:	dc28      	bgt.n	800521e <_printf_common+0x9a>
 80051cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051d0:	1e13      	subs	r3, r2, #0
 80051d2:	6822      	ldr	r2, [r4, #0]
 80051d4:	bf18      	it	ne
 80051d6:	2301      	movne	r3, #1
 80051d8:	0692      	lsls	r2, r2, #26
 80051da:	d42d      	bmi.n	8005238 <_printf_common+0xb4>
 80051dc:	4649      	mov	r1, r9
 80051de:	4638      	mov	r0, r7
 80051e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051e4:	47c0      	blx	r8
 80051e6:	3001      	adds	r0, #1
 80051e8:	d020      	beq.n	800522c <_printf_common+0xa8>
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	68e5      	ldr	r5, [r4, #12]
 80051ee:	f003 0306 	and.w	r3, r3, #6
 80051f2:	2b04      	cmp	r3, #4
 80051f4:	bf18      	it	ne
 80051f6:	2500      	movne	r5, #0
 80051f8:	6832      	ldr	r2, [r6, #0]
 80051fa:	f04f 0600 	mov.w	r6, #0
 80051fe:	68a3      	ldr	r3, [r4, #8]
 8005200:	bf08      	it	eq
 8005202:	1aad      	subeq	r5, r5, r2
 8005204:	6922      	ldr	r2, [r4, #16]
 8005206:	bf08      	it	eq
 8005208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800520c:	4293      	cmp	r3, r2
 800520e:	bfc4      	itt	gt
 8005210:	1a9b      	subgt	r3, r3, r2
 8005212:	18ed      	addgt	r5, r5, r3
 8005214:	341a      	adds	r4, #26
 8005216:	42b5      	cmp	r5, r6
 8005218:	d11a      	bne.n	8005250 <_printf_common+0xcc>
 800521a:	2000      	movs	r0, #0
 800521c:	e008      	b.n	8005230 <_printf_common+0xac>
 800521e:	2301      	movs	r3, #1
 8005220:	4652      	mov	r2, sl
 8005222:	4649      	mov	r1, r9
 8005224:	4638      	mov	r0, r7
 8005226:	47c0      	blx	r8
 8005228:	3001      	adds	r0, #1
 800522a:	d103      	bne.n	8005234 <_printf_common+0xb0>
 800522c:	f04f 30ff 	mov.w	r0, #4294967295
 8005230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005234:	3501      	adds	r5, #1
 8005236:	e7c4      	b.n	80051c2 <_printf_common+0x3e>
 8005238:	2030      	movs	r0, #48	; 0x30
 800523a:	18e1      	adds	r1, r4, r3
 800523c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005246:	4422      	add	r2, r4
 8005248:	3302      	adds	r3, #2
 800524a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800524e:	e7c5      	b.n	80051dc <_printf_common+0x58>
 8005250:	2301      	movs	r3, #1
 8005252:	4622      	mov	r2, r4
 8005254:	4649      	mov	r1, r9
 8005256:	4638      	mov	r0, r7
 8005258:	47c0      	blx	r8
 800525a:	3001      	adds	r0, #1
 800525c:	d0e6      	beq.n	800522c <_printf_common+0xa8>
 800525e:	3601      	adds	r6, #1
 8005260:	e7d9      	b.n	8005216 <_printf_common+0x92>
	...

08005264 <_printf_i>:
 8005264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005268:	460c      	mov	r4, r1
 800526a:	7e27      	ldrb	r7, [r4, #24]
 800526c:	4691      	mov	r9, r2
 800526e:	2f78      	cmp	r7, #120	; 0x78
 8005270:	4680      	mov	r8, r0
 8005272:	469a      	mov	sl, r3
 8005274:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005276:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800527a:	d807      	bhi.n	800528c <_printf_i+0x28>
 800527c:	2f62      	cmp	r7, #98	; 0x62
 800527e:	d80a      	bhi.n	8005296 <_printf_i+0x32>
 8005280:	2f00      	cmp	r7, #0
 8005282:	f000 80d9 	beq.w	8005438 <_printf_i+0x1d4>
 8005286:	2f58      	cmp	r7, #88	; 0x58
 8005288:	f000 80a4 	beq.w	80053d4 <_printf_i+0x170>
 800528c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005290:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005294:	e03a      	b.n	800530c <_printf_i+0xa8>
 8005296:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800529a:	2b15      	cmp	r3, #21
 800529c:	d8f6      	bhi.n	800528c <_printf_i+0x28>
 800529e:	a001      	add	r0, pc, #4	; (adr r0, 80052a4 <_printf_i+0x40>)
 80052a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80052a4:	080052fd 	.word	0x080052fd
 80052a8:	08005311 	.word	0x08005311
 80052ac:	0800528d 	.word	0x0800528d
 80052b0:	0800528d 	.word	0x0800528d
 80052b4:	0800528d 	.word	0x0800528d
 80052b8:	0800528d 	.word	0x0800528d
 80052bc:	08005311 	.word	0x08005311
 80052c0:	0800528d 	.word	0x0800528d
 80052c4:	0800528d 	.word	0x0800528d
 80052c8:	0800528d 	.word	0x0800528d
 80052cc:	0800528d 	.word	0x0800528d
 80052d0:	0800541f 	.word	0x0800541f
 80052d4:	08005341 	.word	0x08005341
 80052d8:	08005401 	.word	0x08005401
 80052dc:	0800528d 	.word	0x0800528d
 80052e0:	0800528d 	.word	0x0800528d
 80052e4:	08005441 	.word	0x08005441
 80052e8:	0800528d 	.word	0x0800528d
 80052ec:	08005341 	.word	0x08005341
 80052f0:	0800528d 	.word	0x0800528d
 80052f4:	0800528d 	.word	0x0800528d
 80052f8:	08005409 	.word	0x08005409
 80052fc:	680b      	ldr	r3, [r1, #0]
 80052fe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005302:	1d1a      	adds	r2, r3, #4
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	600a      	str	r2, [r1, #0]
 8005308:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800530c:	2301      	movs	r3, #1
 800530e:	e0a4      	b.n	800545a <_printf_i+0x1f6>
 8005310:	6825      	ldr	r5, [r4, #0]
 8005312:	6808      	ldr	r0, [r1, #0]
 8005314:	062e      	lsls	r6, r5, #24
 8005316:	f100 0304 	add.w	r3, r0, #4
 800531a:	d50a      	bpl.n	8005332 <_printf_i+0xce>
 800531c:	6805      	ldr	r5, [r0, #0]
 800531e:	600b      	str	r3, [r1, #0]
 8005320:	2d00      	cmp	r5, #0
 8005322:	da03      	bge.n	800532c <_printf_i+0xc8>
 8005324:	232d      	movs	r3, #45	; 0x2d
 8005326:	426d      	negs	r5, r5
 8005328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800532c:	230a      	movs	r3, #10
 800532e:	485e      	ldr	r0, [pc, #376]	; (80054a8 <_printf_i+0x244>)
 8005330:	e019      	b.n	8005366 <_printf_i+0x102>
 8005332:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005336:	6805      	ldr	r5, [r0, #0]
 8005338:	600b      	str	r3, [r1, #0]
 800533a:	bf18      	it	ne
 800533c:	b22d      	sxthne	r5, r5
 800533e:	e7ef      	b.n	8005320 <_printf_i+0xbc>
 8005340:	680b      	ldr	r3, [r1, #0]
 8005342:	6825      	ldr	r5, [r4, #0]
 8005344:	1d18      	adds	r0, r3, #4
 8005346:	6008      	str	r0, [r1, #0]
 8005348:	0628      	lsls	r0, r5, #24
 800534a:	d501      	bpl.n	8005350 <_printf_i+0xec>
 800534c:	681d      	ldr	r5, [r3, #0]
 800534e:	e002      	b.n	8005356 <_printf_i+0xf2>
 8005350:	0669      	lsls	r1, r5, #25
 8005352:	d5fb      	bpl.n	800534c <_printf_i+0xe8>
 8005354:	881d      	ldrh	r5, [r3, #0]
 8005356:	2f6f      	cmp	r7, #111	; 0x6f
 8005358:	bf0c      	ite	eq
 800535a:	2308      	moveq	r3, #8
 800535c:	230a      	movne	r3, #10
 800535e:	4852      	ldr	r0, [pc, #328]	; (80054a8 <_printf_i+0x244>)
 8005360:	2100      	movs	r1, #0
 8005362:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005366:	6866      	ldr	r6, [r4, #4]
 8005368:	2e00      	cmp	r6, #0
 800536a:	bfa8      	it	ge
 800536c:	6821      	ldrge	r1, [r4, #0]
 800536e:	60a6      	str	r6, [r4, #8]
 8005370:	bfa4      	itt	ge
 8005372:	f021 0104 	bicge.w	r1, r1, #4
 8005376:	6021      	strge	r1, [r4, #0]
 8005378:	b90d      	cbnz	r5, 800537e <_printf_i+0x11a>
 800537a:	2e00      	cmp	r6, #0
 800537c:	d04d      	beq.n	800541a <_printf_i+0x1b6>
 800537e:	4616      	mov	r6, r2
 8005380:	fbb5 f1f3 	udiv	r1, r5, r3
 8005384:	fb03 5711 	mls	r7, r3, r1, r5
 8005388:	5dc7      	ldrb	r7, [r0, r7]
 800538a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800538e:	462f      	mov	r7, r5
 8005390:	42bb      	cmp	r3, r7
 8005392:	460d      	mov	r5, r1
 8005394:	d9f4      	bls.n	8005380 <_printf_i+0x11c>
 8005396:	2b08      	cmp	r3, #8
 8005398:	d10b      	bne.n	80053b2 <_printf_i+0x14e>
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	07df      	lsls	r7, r3, #31
 800539e:	d508      	bpl.n	80053b2 <_printf_i+0x14e>
 80053a0:	6923      	ldr	r3, [r4, #16]
 80053a2:	6861      	ldr	r1, [r4, #4]
 80053a4:	4299      	cmp	r1, r3
 80053a6:	bfde      	ittt	le
 80053a8:	2330      	movle	r3, #48	; 0x30
 80053aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053b2:	1b92      	subs	r2, r2, r6
 80053b4:	6122      	str	r2, [r4, #16]
 80053b6:	464b      	mov	r3, r9
 80053b8:	4621      	mov	r1, r4
 80053ba:	4640      	mov	r0, r8
 80053bc:	f8cd a000 	str.w	sl, [sp]
 80053c0:	aa03      	add	r2, sp, #12
 80053c2:	f7ff fedf 	bl	8005184 <_printf_common>
 80053c6:	3001      	adds	r0, #1
 80053c8:	d14c      	bne.n	8005464 <_printf_i+0x200>
 80053ca:	f04f 30ff 	mov.w	r0, #4294967295
 80053ce:	b004      	add	sp, #16
 80053d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d4:	4834      	ldr	r0, [pc, #208]	; (80054a8 <_printf_i+0x244>)
 80053d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053da:	680e      	ldr	r6, [r1, #0]
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	f856 5b04 	ldr.w	r5, [r6], #4
 80053e2:	061f      	lsls	r7, r3, #24
 80053e4:	600e      	str	r6, [r1, #0]
 80053e6:	d514      	bpl.n	8005412 <_printf_i+0x1ae>
 80053e8:	07d9      	lsls	r1, r3, #31
 80053ea:	bf44      	itt	mi
 80053ec:	f043 0320 	orrmi.w	r3, r3, #32
 80053f0:	6023      	strmi	r3, [r4, #0]
 80053f2:	b91d      	cbnz	r5, 80053fc <_printf_i+0x198>
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	f023 0320 	bic.w	r3, r3, #32
 80053fa:	6023      	str	r3, [r4, #0]
 80053fc:	2310      	movs	r3, #16
 80053fe:	e7af      	b.n	8005360 <_printf_i+0xfc>
 8005400:	6823      	ldr	r3, [r4, #0]
 8005402:	f043 0320 	orr.w	r3, r3, #32
 8005406:	6023      	str	r3, [r4, #0]
 8005408:	2378      	movs	r3, #120	; 0x78
 800540a:	4828      	ldr	r0, [pc, #160]	; (80054ac <_printf_i+0x248>)
 800540c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005410:	e7e3      	b.n	80053da <_printf_i+0x176>
 8005412:	065e      	lsls	r6, r3, #25
 8005414:	bf48      	it	mi
 8005416:	b2ad      	uxthmi	r5, r5
 8005418:	e7e6      	b.n	80053e8 <_printf_i+0x184>
 800541a:	4616      	mov	r6, r2
 800541c:	e7bb      	b.n	8005396 <_printf_i+0x132>
 800541e:	680b      	ldr	r3, [r1, #0]
 8005420:	6826      	ldr	r6, [r4, #0]
 8005422:	1d1d      	adds	r5, r3, #4
 8005424:	6960      	ldr	r0, [r4, #20]
 8005426:	600d      	str	r5, [r1, #0]
 8005428:	0635      	lsls	r5, r6, #24
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	d501      	bpl.n	8005432 <_printf_i+0x1ce>
 800542e:	6018      	str	r0, [r3, #0]
 8005430:	e002      	b.n	8005438 <_printf_i+0x1d4>
 8005432:	0671      	lsls	r1, r6, #25
 8005434:	d5fb      	bpl.n	800542e <_printf_i+0x1ca>
 8005436:	8018      	strh	r0, [r3, #0]
 8005438:	2300      	movs	r3, #0
 800543a:	4616      	mov	r6, r2
 800543c:	6123      	str	r3, [r4, #16]
 800543e:	e7ba      	b.n	80053b6 <_printf_i+0x152>
 8005440:	680b      	ldr	r3, [r1, #0]
 8005442:	1d1a      	adds	r2, r3, #4
 8005444:	600a      	str	r2, [r1, #0]
 8005446:	681e      	ldr	r6, [r3, #0]
 8005448:	2100      	movs	r1, #0
 800544a:	4630      	mov	r0, r6
 800544c:	6862      	ldr	r2, [r4, #4]
 800544e:	f000 f82f 	bl	80054b0 <memchr>
 8005452:	b108      	cbz	r0, 8005458 <_printf_i+0x1f4>
 8005454:	1b80      	subs	r0, r0, r6
 8005456:	6060      	str	r0, [r4, #4]
 8005458:	6863      	ldr	r3, [r4, #4]
 800545a:	6123      	str	r3, [r4, #16]
 800545c:	2300      	movs	r3, #0
 800545e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005462:	e7a8      	b.n	80053b6 <_printf_i+0x152>
 8005464:	4632      	mov	r2, r6
 8005466:	4649      	mov	r1, r9
 8005468:	4640      	mov	r0, r8
 800546a:	6923      	ldr	r3, [r4, #16]
 800546c:	47d0      	blx	sl
 800546e:	3001      	adds	r0, #1
 8005470:	d0ab      	beq.n	80053ca <_printf_i+0x166>
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	079b      	lsls	r3, r3, #30
 8005476:	d413      	bmi.n	80054a0 <_printf_i+0x23c>
 8005478:	68e0      	ldr	r0, [r4, #12]
 800547a:	9b03      	ldr	r3, [sp, #12]
 800547c:	4298      	cmp	r0, r3
 800547e:	bfb8      	it	lt
 8005480:	4618      	movlt	r0, r3
 8005482:	e7a4      	b.n	80053ce <_printf_i+0x16a>
 8005484:	2301      	movs	r3, #1
 8005486:	4632      	mov	r2, r6
 8005488:	4649      	mov	r1, r9
 800548a:	4640      	mov	r0, r8
 800548c:	47d0      	blx	sl
 800548e:	3001      	adds	r0, #1
 8005490:	d09b      	beq.n	80053ca <_printf_i+0x166>
 8005492:	3501      	adds	r5, #1
 8005494:	68e3      	ldr	r3, [r4, #12]
 8005496:	9903      	ldr	r1, [sp, #12]
 8005498:	1a5b      	subs	r3, r3, r1
 800549a:	42ab      	cmp	r3, r5
 800549c:	dcf2      	bgt.n	8005484 <_printf_i+0x220>
 800549e:	e7eb      	b.n	8005478 <_printf_i+0x214>
 80054a0:	2500      	movs	r5, #0
 80054a2:	f104 0619 	add.w	r6, r4, #25
 80054a6:	e7f5      	b.n	8005494 <_printf_i+0x230>
 80054a8:	08005b2d 	.word	0x08005b2d
 80054ac:	08005b3e 	.word	0x08005b3e

080054b0 <memchr>:
 80054b0:	4603      	mov	r3, r0
 80054b2:	b510      	push	{r4, lr}
 80054b4:	b2c9      	uxtb	r1, r1
 80054b6:	4402      	add	r2, r0
 80054b8:	4293      	cmp	r3, r2
 80054ba:	4618      	mov	r0, r3
 80054bc:	d101      	bne.n	80054c2 <memchr+0x12>
 80054be:	2000      	movs	r0, #0
 80054c0:	e003      	b.n	80054ca <memchr+0x1a>
 80054c2:	7804      	ldrb	r4, [r0, #0]
 80054c4:	3301      	adds	r3, #1
 80054c6:	428c      	cmp	r4, r1
 80054c8:	d1f6      	bne.n	80054b8 <memchr+0x8>
 80054ca:	bd10      	pop	{r4, pc}

080054cc <memcpy>:
 80054cc:	440a      	add	r2, r1
 80054ce:	4291      	cmp	r1, r2
 80054d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80054d4:	d100      	bne.n	80054d8 <memcpy+0xc>
 80054d6:	4770      	bx	lr
 80054d8:	b510      	push	{r4, lr}
 80054da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054de:	4291      	cmp	r1, r2
 80054e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054e4:	d1f9      	bne.n	80054da <memcpy+0xe>
 80054e6:	bd10      	pop	{r4, pc}

080054e8 <memmove>:
 80054e8:	4288      	cmp	r0, r1
 80054ea:	b510      	push	{r4, lr}
 80054ec:	eb01 0402 	add.w	r4, r1, r2
 80054f0:	d902      	bls.n	80054f8 <memmove+0x10>
 80054f2:	4284      	cmp	r4, r0
 80054f4:	4623      	mov	r3, r4
 80054f6:	d807      	bhi.n	8005508 <memmove+0x20>
 80054f8:	1e43      	subs	r3, r0, #1
 80054fa:	42a1      	cmp	r1, r4
 80054fc:	d008      	beq.n	8005510 <memmove+0x28>
 80054fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005502:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005506:	e7f8      	b.n	80054fa <memmove+0x12>
 8005508:	4601      	mov	r1, r0
 800550a:	4402      	add	r2, r0
 800550c:	428a      	cmp	r2, r1
 800550e:	d100      	bne.n	8005512 <memmove+0x2a>
 8005510:	bd10      	pop	{r4, pc}
 8005512:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005516:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800551a:	e7f7      	b.n	800550c <memmove+0x24>

0800551c <_free_r>:
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	4605      	mov	r5, r0
 8005520:	2900      	cmp	r1, #0
 8005522:	d043      	beq.n	80055ac <_free_r+0x90>
 8005524:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005528:	1f0c      	subs	r4, r1, #4
 800552a:	2b00      	cmp	r3, #0
 800552c:	bfb8      	it	lt
 800552e:	18e4      	addlt	r4, r4, r3
 8005530:	f000 f8d0 	bl	80056d4 <__malloc_lock>
 8005534:	4a1e      	ldr	r2, [pc, #120]	; (80055b0 <_free_r+0x94>)
 8005536:	6813      	ldr	r3, [r2, #0]
 8005538:	4610      	mov	r0, r2
 800553a:	b933      	cbnz	r3, 800554a <_free_r+0x2e>
 800553c:	6063      	str	r3, [r4, #4]
 800553e:	6014      	str	r4, [r2, #0]
 8005540:	4628      	mov	r0, r5
 8005542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005546:	f000 b8cb 	b.w	80056e0 <__malloc_unlock>
 800554a:	42a3      	cmp	r3, r4
 800554c:	d90a      	bls.n	8005564 <_free_r+0x48>
 800554e:	6821      	ldr	r1, [r4, #0]
 8005550:	1862      	adds	r2, r4, r1
 8005552:	4293      	cmp	r3, r2
 8005554:	bf01      	itttt	eq
 8005556:	681a      	ldreq	r2, [r3, #0]
 8005558:	685b      	ldreq	r3, [r3, #4]
 800555a:	1852      	addeq	r2, r2, r1
 800555c:	6022      	streq	r2, [r4, #0]
 800555e:	6063      	str	r3, [r4, #4]
 8005560:	6004      	str	r4, [r0, #0]
 8005562:	e7ed      	b.n	8005540 <_free_r+0x24>
 8005564:	461a      	mov	r2, r3
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	b10b      	cbz	r3, 800556e <_free_r+0x52>
 800556a:	42a3      	cmp	r3, r4
 800556c:	d9fa      	bls.n	8005564 <_free_r+0x48>
 800556e:	6811      	ldr	r1, [r2, #0]
 8005570:	1850      	adds	r0, r2, r1
 8005572:	42a0      	cmp	r0, r4
 8005574:	d10b      	bne.n	800558e <_free_r+0x72>
 8005576:	6820      	ldr	r0, [r4, #0]
 8005578:	4401      	add	r1, r0
 800557a:	1850      	adds	r0, r2, r1
 800557c:	4283      	cmp	r3, r0
 800557e:	6011      	str	r1, [r2, #0]
 8005580:	d1de      	bne.n	8005540 <_free_r+0x24>
 8005582:	6818      	ldr	r0, [r3, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	4401      	add	r1, r0
 8005588:	6011      	str	r1, [r2, #0]
 800558a:	6053      	str	r3, [r2, #4]
 800558c:	e7d8      	b.n	8005540 <_free_r+0x24>
 800558e:	d902      	bls.n	8005596 <_free_r+0x7a>
 8005590:	230c      	movs	r3, #12
 8005592:	602b      	str	r3, [r5, #0]
 8005594:	e7d4      	b.n	8005540 <_free_r+0x24>
 8005596:	6820      	ldr	r0, [r4, #0]
 8005598:	1821      	adds	r1, r4, r0
 800559a:	428b      	cmp	r3, r1
 800559c:	bf01      	itttt	eq
 800559e:	6819      	ldreq	r1, [r3, #0]
 80055a0:	685b      	ldreq	r3, [r3, #4]
 80055a2:	1809      	addeq	r1, r1, r0
 80055a4:	6021      	streq	r1, [r4, #0]
 80055a6:	6063      	str	r3, [r4, #4]
 80055a8:	6054      	str	r4, [r2, #4]
 80055aa:	e7c9      	b.n	8005540 <_free_r+0x24>
 80055ac:	bd38      	pop	{r3, r4, r5, pc}
 80055ae:	bf00      	nop
 80055b0:	200001a8 	.word	0x200001a8

080055b4 <_malloc_r>:
 80055b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b6:	1ccd      	adds	r5, r1, #3
 80055b8:	f025 0503 	bic.w	r5, r5, #3
 80055bc:	3508      	adds	r5, #8
 80055be:	2d0c      	cmp	r5, #12
 80055c0:	bf38      	it	cc
 80055c2:	250c      	movcc	r5, #12
 80055c4:	2d00      	cmp	r5, #0
 80055c6:	4606      	mov	r6, r0
 80055c8:	db01      	blt.n	80055ce <_malloc_r+0x1a>
 80055ca:	42a9      	cmp	r1, r5
 80055cc:	d903      	bls.n	80055d6 <_malloc_r+0x22>
 80055ce:	230c      	movs	r3, #12
 80055d0:	6033      	str	r3, [r6, #0]
 80055d2:	2000      	movs	r0, #0
 80055d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055d6:	f000 f87d 	bl	80056d4 <__malloc_lock>
 80055da:	4921      	ldr	r1, [pc, #132]	; (8005660 <_malloc_r+0xac>)
 80055dc:	680a      	ldr	r2, [r1, #0]
 80055de:	4614      	mov	r4, r2
 80055e0:	b99c      	cbnz	r4, 800560a <_malloc_r+0x56>
 80055e2:	4f20      	ldr	r7, [pc, #128]	; (8005664 <_malloc_r+0xb0>)
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	b923      	cbnz	r3, 80055f2 <_malloc_r+0x3e>
 80055e8:	4621      	mov	r1, r4
 80055ea:	4630      	mov	r0, r6
 80055ec:	f000 f862 	bl	80056b4 <_sbrk_r>
 80055f0:	6038      	str	r0, [r7, #0]
 80055f2:	4629      	mov	r1, r5
 80055f4:	4630      	mov	r0, r6
 80055f6:	f000 f85d 	bl	80056b4 <_sbrk_r>
 80055fa:	1c43      	adds	r3, r0, #1
 80055fc:	d123      	bne.n	8005646 <_malloc_r+0x92>
 80055fe:	230c      	movs	r3, #12
 8005600:	4630      	mov	r0, r6
 8005602:	6033      	str	r3, [r6, #0]
 8005604:	f000 f86c 	bl	80056e0 <__malloc_unlock>
 8005608:	e7e3      	b.n	80055d2 <_malloc_r+0x1e>
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	1b5b      	subs	r3, r3, r5
 800560e:	d417      	bmi.n	8005640 <_malloc_r+0x8c>
 8005610:	2b0b      	cmp	r3, #11
 8005612:	d903      	bls.n	800561c <_malloc_r+0x68>
 8005614:	6023      	str	r3, [r4, #0]
 8005616:	441c      	add	r4, r3
 8005618:	6025      	str	r5, [r4, #0]
 800561a:	e004      	b.n	8005626 <_malloc_r+0x72>
 800561c:	6863      	ldr	r3, [r4, #4]
 800561e:	42a2      	cmp	r2, r4
 8005620:	bf0c      	ite	eq
 8005622:	600b      	streq	r3, [r1, #0]
 8005624:	6053      	strne	r3, [r2, #4]
 8005626:	4630      	mov	r0, r6
 8005628:	f000 f85a 	bl	80056e0 <__malloc_unlock>
 800562c:	f104 000b 	add.w	r0, r4, #11
 8005630:	1d23      	adds	r3, r4, #4
 8005632:	f020 0007 	bic.w	r0, r0, #7
 8005636:	1ac2      	subs	r2, r0, r3
 8005638:	d0cc      	beq.n	80055d4 <_malloc_r+0x20>
 800563a:	1a1b      	subs	r3, r3, r0
 800563c:	50a3      	str	r3, [r4, r2]
 800563e:	e7c9      	b.n	80055d4 <_malloc_r+0x20>
 8005640:	4622      	mov	r2, r4
 8005642:	6864      	ldr	r4, [r4, #4]
 8005644:	e7cc      	b.n	80055e0 <_malloc_r+0x2c>
 8005646:	1cc4      	adds	r4, r0, #3
 8005648:	f024 0403 	bic.w	r4, r4, #3
 800564c:	42a0      	cmp	r0, r4
 800564e:	d0e3      	beq.n	8005618 <_malloc_r+0x64>
 8005650:	1a21      	subs	r1, r4, r0
 8005652:	4630      	mov	r0, r6
 8005654:	f000 f82e 	bl	80056b4 <_sbrk_r>
 8005658:	3001      	adds	r0, #1
 800565a:	d1dd      	bne.n	8005618 <_malloc_r+0x64>
 800565c:	e7cf      	b.n	80055fe <_malloc_r+0x4a>
 800565e:	bf00      	nop
 8005660:	200001a8 	.word	0x200001a8
 8005664:	200001ac 	.word	0x200001ac

08005668 <_realloc_r>:
 8005668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566a:	4607      	mov	r7, r0
 800566c:	4614      	mov	r4, r2
 800566e:	460e      	mov	r6, r1
 8005670:	b921      	cbnz	r1, 800567c <_realloc_r+0x14>
 8005672:	4611      	mov	r1, r2
 8005674:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005678:	f7ff bf9c 	b.w	80055b4 <_malloc_r>
 800567c:	b922      	cbnz	r2, 8005688 <_realloc_r+0x20>
 800567e:	f7ff ff4d 	bl	800551c <_free_r>
 8005682:	4625      	mov	r5, r4
 8005684:	4628      	mov	r0, r5
 8005686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005688:	f000 f830 	bl	80056ec <_malloc_usable_size_r>
 800568c:	42a0      	cmp	r0, r4
 800568e:	d20f      	bcs.n	80056b0 <_realloc_r+0x48>
 8005690:	4621      	mov	r1, r4
 8005692:	4638      	mov	r0, r7
 8005694:	f7ff ff8e 	bl	80055b4 <_malloc_r>
 8005698:	4605      	mov	r5, r0
 800569a:	2800      	cmp	r0, #0
 800569c:	d0f2      	beq.n	8005684 <_realloc_r+0x1c>
 800569e:	4631      	mov	r1, r6
 80056a0:	4622      	mov	r2, r4
 80056a2:	f7ff ff13 	bl	80054cc <memcpy>
 80056a6:	4631      	mov	r1, r6
 80056a8:	4638      	mov	r0, r7
 80056aa:	f7ff ff37 	bl	800551c <_free_r>
 80056ae:	e7e9      	b.n	8005684 <_realloc_r+0x1c>
 80056b0:	4635      	mov	r5, r6
 80056b2:	e7e7      	b.n	8005684 <_realloc_r+0x1c>

080056b4 <_sbrk_r>:
 80056b4:	b538      	push	{r3, r4, r5, lr}
 80056b6:	2300      	movs	r3, #0
 80056b8:	4d05      	ldr	r5, [pc, #20]	; (80056d0 <_sbrk_r+0x1c>)
 80056ba:	4604      	mov	r4, r0
 80056bc:	4608      	mov	r0, r1
 80056be:	602b      	str	r3, [r5, #0]
 80056c0:	f7fc fd10 	bl	80020e4 <_sbrk>
 80056c4:	1c43      	adds	r3, r0, #1
 80056c6:	d102      	bne.n	80056ce <_sbrk_r+0x1a>
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	b103      	cbz	r3, 80056ce <_sbrk_r+0x1a>
 80056cc:	6023      	str	r3, [r4, #0]
 80056ce:	bd38      	pop	{r3, r4, r5, pc}
 80056d0:	200002c4 	.word	0x200002c4

080056d4 <__malloc_lock>:
 80056d4:	4801      	ldr	r0, [pc, #4]	; (80056dc <__malloc_lock+0x8>)
 80056d6:	f000 b811 	b.w	80056fc <__retarget_lock_acquire_recursive>
 80056da:	bf00      	nop
 80056dc:	200002cc 	.word	0x200002cc

080056e0 <__malloc_unlock>:
 80056e0:	4801      	ldr	r0, [pc, #4]	; (80056e8 <__malloc_unlock+0x8>)
 80056e2:	f000 b80c 	b.w	80056fe <__retarget_lock_release_recursive>
 80056e6:	bf00      	nop
 80056e8:	200002cc 	.word	0x200002cc

080056ec <_malloc_usable_size_r>:
 80056ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056f0:	1f18      	subs	r0, r3, #4
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	bfbc      	itt	lt
 80056f6:	580b      	ldrlt	r3, [r1, r0]
 80056f8:	18c0      	addlt	r0, r0, r3
 80056fa:	4770      	bx	lr

080056fc <__retarget_lock_acquire_recursive>:
 80056fc:	4770      	bx	lr

080056fe <__retarget_lock_release_recursive>:
 80056fe:	4770      	bx	lr

08005700 <_init>:
 8005700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005702:	bf00      	nop
 8005704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005706:	bc08      	pop	{r3}
 8005708:	469e      	mov	lr, r3
 800570a:	4770      	bx	lr

0800570c <_fini>:
 800570c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570e:	bf00      	nop
 8005710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005712:	bc08      	pop	{r3}
 8005714:	469e      	mov	lr, r3
 8005716:	4770      	bx	lr

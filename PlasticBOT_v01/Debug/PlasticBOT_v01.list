
PlasticBOT_v01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005680  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  0800578c  0800578c  0001578c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c5c  08005c5c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005c5c  08005c5c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c5c  08005c5c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c5c  08005c5c  00015c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c60  08005c60  00015c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000078  08005cdc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08005cdc  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f637  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002223  00000000  00000000  0002f6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00031900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  000327b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187a7  00000000  00000000  00033580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f05  00000000  00000000  0004bd27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ec14  00000000  00000000  0005cc2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eb840  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004338  00000000  00000000  000eb894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08005774 	.word	0x08005774

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08005774 	.word	0x08005774

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af02      	add	r7, sp, #8
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	f023 030f 	bic.w	r3, r3, #15
 8000744:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	011b      	lsls	r3, r3, #4
 800074a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	f043 030c 	orr.w	r3, r3, #12
 8000752:	b2db      	uxtb	r3, r3
 8000754:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	f043 0308 	orr.w	r3, r3, #8
 800075c:	b2db      	uxtb	r3, r3
 800075e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000760:	7bbb      	ldrb	r3, [r7, #14]
 8000762:	f043 030c 	orr.w	r3, r3, #12
 8000766:	b2db      	uxtb	r3, r3
 8000768:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800076a:	7bbb      	ldrb	r3, [r7, #14]
 800076c:	f043 0308 	orr.w	r3, r3, #8
 8000770:	b2db      	uxtb	r3, r3
 8000772:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000774:	f107 0208 	add.w	r2, r7, #8
 8000778:	2364      	movs	r3, #100	; 0x64
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	2304      	movs	r3, #4
 800077e:	214e      	movs	r1, #78	; 0x4e
 8000780:	4803      	ldr	r0, [pc, #12]	; (8000790 <lcd_send_cmd+0x5c>)
 8000782:	f002 ffb7 	bl	80036f4 <HAL_I2C_Master_Transmit>
}
 8000786:	bf00      	nop
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	2000011c 	.word	0x2000011c

08000794 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af02      	add	r7, sp, #8
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	f023 030f 	bic.w	r3, r3, #15
 80007a4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	f043 030d 	orr.w	r3, r3, #13
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	f043 0309 	orr.w	r3, r3, #9
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80007c0:	7bbb      	ldrb	r3, [r7, #14]
 80007c2:	f043 030d 	orr.w	r3, r3, #13
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80007ca:	7bbb      	ldrb	r3, [r7, #14]
 80007cc:	f043 0309 	orr.w	r3, r3, #9
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80007d4:	f107 0208 	add.w	r2, r7, #8
 80007d8:	2364      	movs	r3, #100	; 0x64
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	2304      	movs	r3, #4
 80007de:	214e      	movs	r1, #78	; 0x4e
 80007e0:	4803      	ldr	r0, [pc, #12]	; (80007f0 <lcd_send_data+0x5c>)
 80007e2:	f002 ff87 	bl	80036f4 <HAL_I2C_Master_Transmit>
}
 80007e6:	bf00      	nop
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	2000011c 	.word	0x2000011c

080007f4 <lcd_init>:
		lcd_send_data (' ');
	}
}

void lcd_init (void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80007f8:	2032      	movs	r0, #50	; 0x32
 80007fa:	f001 fd71 	bl	80022e0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80007fe:	2030      	movs	r0, #48	; 0x30
 8000800:	f7ff ff98 	bl	8000734 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000804:	2005      	movs	r0, #5
 8000806:	f001 fd6b 	bl	80022e0 <HAL_Delay>
	lcd_send_cmd (0x30);
 800080a:	2030      	movs	r0, #48	; 0x30
 800080c:	f7ff ff92 	bl	8000734 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000810:	2001      	movs	r0, #1
 8000812:	f001 fd65 	bl	80022e0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000816:	2030      	movs	r0, #48	; 0x30
 8000818:	f7ff ff8c 	bl	8000734 <lcd_send_cmd>
	HAL_Delay(10);
 800081c:	200a      	movs	r0, #10
 800081e:	f001 fd5f 	bl	80022e0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000822:	2020      	movs	r0, #32
 8000824:	f7ff ff86 	bl	8000734 <lcd_send_cmd>
	HAL_Delay(10);
 8000828:	200a      	movs	r0, #10
 800082a:	f001 fd59 	bl	80022e0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800082e:	2028      	movs	r0, #40	; 0x28
 8000830:	f7ff ff80 	bl	8000734 <lcd_send_cmd>
	HAL_Delay(1);
 8000834:	2001      	movs	r0, #1
 8000836:	f001 fd53 	bl	80022e0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800083a:	2008      	movs	r0, #8
 800083c:	f7ff ff7a 	bl	8000734 <lcd_send_cmd>
	HAL_Delay(1);
 8000840:	2001      	movs	r0, #1
 8000842:	f001 fd4d 	bl	80022e0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000846:	2001      	movs	r0, #1
 8000848:	f7ff ff74 	bl	8000734 <lcd_send_cmd>
	HAL_Delay(1);
 800084c:	2001      	movs	r0, #1
 800084e:	f001 fd47 	bl	80022e0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000852:	2006      	movs	r0, #6
 8000854:	f7ff ff6e 	bl	8000734 <lcd_send_cmd>
	HAL_Delay(1);
 8000858:	2001      	movs	r0, #1
 800085a:	f001 fd41 	bl	80022e0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800085e:	200c      	movs	r0, #12
 8000860:	f7ff ff68 	bl	8000734 <lcd_send_cmd>
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}

08000868 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000870:	e006      	b.n	8000880 <lcd_send_string+0x18>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	607a      	str	r2, [r7, #4]
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff ff8a 	bl	8000794 <lcd_send_data>
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1f4      	bne.n	8000872 <lcd_send_string+0xa>
}
 8000888:	bf00      	nop
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	static uint32_t previousTick = 0;
	uint32_t currentTick = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089e:	f001 fcbd 	bl	800221c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a2:	f000 f859 	bl	8000958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a6:	f000 f989 	bl	8000bbc <MX_GPIO_Init>
  MX_DMA_Init();
 80008aa:	f000 f969 	bl	8000b80 <MX_DMA_Init>
  MX_ADC1_Init();
 80008ae:	f000 f8af 	bl	8000a10 <MX_ADC1_Init>
  MX_I2C1_Init();
 80008b2:	f000 f8eb 	bl	8000a8c <MX_I2C1_Init>
  MX_TIM2_Init();
 80008b6:	f000 f917 	bl	8000ae8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80008ba:	f7ff ff9b 	bl	80007f4 <lcd_init>
  PresentacionLCD();
 80008be:	f000 fa13 	bl	8000ce8 <PresentacionLCD>
  PetConv_Init(&PETfilConv1);
 80008c2:	481d      	ldr	r0, [pc, #116]	; (8000938 <main+0xa4>)
 80008c4:	f000 fa2e 	bl	8000d24 <PetConv_Init>
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  HAL_TIM_Base_Start_IT(&htim2);
 80008c8:	481c      	ldr	r0, [pc, #112]	; (800093c <main+0xa8>)
 80008ca:	f003 ff25 	bl	8004718 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(g_btnPressed != NoPressed)
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <main+0xac>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d014      	beq.n	8000900 <main+0x6c>
	  {
		  updateDataGUI(indexes,&g_btnPressed,&PETfilConv1,&currentScreen,&g_velocidad_Col1);
 80008d6:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <main+0xb0>)
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <main+0xb4>)
 80008dc:	4a16      	ldr	r2, [pc, #88]	; (8000938 <main+0xa4>)
 80008de:	4918      	ldr	r1, [pc, #96]	; (8000940 <main+0xac>)
 80008e0:	481a      	ldr	r0, [pc, #104]	; (800094c <main+0xb8>)
 80008e2:	f000 faef 	bl	8000ec4 <updateDataGUI>
		  updateLCD(&PETfilConv1,&currentScreen);
 80008e6:	4918      	ldr	r1, [pc, #96]	; (8000948 <main+0xb4>)
 80008e8:	4813      	ldr	r0, [pc, #76]	; (8000938 <main+0xa4>)
 80008ea:	f000 fdff 	bl	80014ec <updateLCD>
		  updateCursor(indexes,&PETfilConv1,&currentScreen,&g_velocidad_Col1);
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <main+0xb0>)
 80008f0:	4a15      	ldr	r2, [pc, #84]	; (8000948 <main+0xb4>)
 80008f2:	4911      	ldr	r1, [pc, #68]	; (8000938 <main+0xa4>)
 80008f4:	4815      	ldr	r0, [pc, #84]	; (800094c <main+0xb8>)
 80008f6:	f000 ffa7 	bl	8001848 <updateCursor>
		  g_btnPressed = NoPressed;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <main+0xac>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
	  }

	  Control_ON_OFF(&PETfilConv1);
 8000900:	480d      	ldr	r0, [pc, #52]	; (8000938 <main+0xa4>)
 8000902:	f001 fa93 	bl	8001e2c <Control_ON_OFF>
	  ControlAlarms(&g_alarmFil,&PETfilConv1);
 8000906:	490c      	ldr	r1, [pc, #48]	; (8000938 <main+0xa4>)
 8000908:	4811      	ldr	r0, [pc, #68]	; (8000950 <main+0xbc>)
 800090a:	f000 fa5d 	bl	8000dc8 <ControlAlarms>
	  currentTick = HAL_GetTick();
 800090e:	f001 fcdd 	bl	80022cc <HAL_GetTick>
 8000912:	6078      	str	r0, [r7, #4]
	  if((currentTick - previousTick > 1000) && (currentScreen == pantallaWorkingScreen))
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <main+0xc0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	1ad3      	subs	r3, r2, r3
 800091c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000920:	d9d5      	bls.n	80008ce <main+0x3a>
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <main+0xb4>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d1d1      	bne.n	80008ce <main+0x3a>
	  {
		  printCurrentTemp(&PETfilConv1);
 800092a:	4803      	ldr	r0, [pc, #12]	; (8000938 <main+0xa4>)
 800092c:	f000 ff66 	bl	80017fc <printCurrentTemp>
		  previousTick = currentTick;
 8000930:	4a08      	ldr	r2, [pc, #32]	; (8000954 <main+0xc0>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6013      	str	r3, [r2, #0]
	  if(g_btnPressed != NoPressed)
 8000936:	e7ca      	b.n	80008ce <main+0x3a>
 8000938:	200000a0 	.word	0x200000a0
 800093c:	200001f4 	.word	0x200001f4
 8000940:	20000000 	.word	0x20000000
 8000944:	20000098 	.word	0x20000098
 8000948:	200000f4 	.word	0x200000f4
 800094c:	200000d4 	.word	0x200000d4
 8000950:	2000009c 	.word	0x2000009c
 8000954:	200000f8 	.word	0x200000f8

08000958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b094      	sub	sp, #80	; 0x50
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000962:	2228      	movs	r2, #40	; 0x28
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f004 fac2 	bl	8004ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000988:	2301      	movs	r3, #1
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800098c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000996:	2301      	movs	r3, #1
 8000998:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099a:	2302      	movs	r3, #2
 800099c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 80009a4:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 80009a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ae:	4618      	mov	r0, r3
 80009b0:	f003 f9a6 	bl	8003d00 <HAL_RCC_OscConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80009ba:	f001 fa6b 	bl	8001e94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009be:	230f      	movs	r3, #15
 80009c0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c2:	2302      	movs	r3, #2
 80009c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2102      	movs	r1, #2
 80009da:	4618      	mov	r0, r3
 80009dc:	f003 fc10 	bl	8004200 <HAL_RCC_ClockConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x92>
  {
    Error_Handler();
 80009e6:	f001 fa55 	bl	8001e94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009ea:	2302      	movs	r3, #2
 80009ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80009ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009f2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	4618      	mov	r0, r3
 80009f8:	f003 fd88 	bl	800450c <HAL_RCCEx_PeriphCLKConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a02:	f001 fa47 	bl	8001e94 <Error_Handler>
  }
}
 8000a06:	bf00      	nop
 8000a08:	3750      	adds	r7, #80	; 0x50
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a22:	4a19      	ldr	r2, [pc, #100]	; (8000a88 <MX_ADC1_Init+0x78>)
 8000a24:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a32:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a3a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a3e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a40:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a4c:	480d      	ldr	r0, [pc, #52]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a4e:	f001 fc6b 	bl	8002328 <HAL_ADC_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a58:	f001 fa1c 	bl	8001e94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a60:	2301      	movs	r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a6e:	f001 fe2d 	bl	80026cc <HAL_ADC_ConfigChannel>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a78:	f001 fa0c 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000178 	.word	0x20000178
 8000a88:	40012400 	.word	0x40012400

08000a8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <MX_I2C1_Init+0x50>)
 8000a92:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <MX_I2C1_Init+0x54>)
 8000a94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_I2C1_Init+0x50>)
 8000a98:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <MX_I2C1_Init+0x58>)
 8000a9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_I2C1_Init+0x50>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_I2C1_Init+0x50>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_I2C1_Init+0x50>)
 8000aaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab0:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <MX_I2C1_Init+0x50>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_I2C1_Init+0x50>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000abc:	4b07      	ldr	r3, [pc, #28]	; (8000adc <MX_I2C1_Init+0x50>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_I2C1_Init+0x50>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ac8:	4804      	ldr	r0, [pc, #16]	; (8000adc <MX_I2C1_Init+0x50>)
 8000aca:	f002 fccf 	bl	800346c <HAL_I2C_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ad4:	f001 f9de 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	2000011c 	.word	0x2000011c
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	000186a0 	.word	0x000186a0

08000ae8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aee:	f107 0308 	add.w	r3, r7, #8
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000afc:	463b      	mov	r3, r7
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <MX_TIM2_Init+0x94>)
 8000b06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 56000-1;
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <MX_TIM2_Init+0x94>)
 8000b0e:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 8000b12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b14:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <MX_TIM2_Init+0x94>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7-1;
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <MX_TIM2_Init+0x94>)
 8000b1c:	2206      	movs	r2, #6
 8000b1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b20:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <MX_TIM2_Init+0x94>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <MX_TIM2_Init+0x94>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b2c:	4813      	ldr	r0, [pc, #76]	; (8000b7c <MX_TIM2_Init+0x94>)
 8000b2e:	f003 fda3 	bl	8004678 <HAL_TIM_Base_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b38:	f001 f9ac 	bl	8001e94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b42:	f107 0308 	add.w	r3, r7, #8
 8000b46:	4619      	mov	r1, r3
 8000b48:	480c      	ldr	r0, [pc, #48]	; (8000b7c <MX_TIM2_Init+0x94>)
 8000b4a:	f003 ff67 	bl	8004a1c <HAL_TIM_ConfigClockSource>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b54:	f001 f99e 	bl	8001e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b60:	463b      	mov	r3, r7
 8000b62:	4619      	mov	r1, r3
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_TIM2_Init+0x94>)
 8000b66:	f004 f92f 	bl	8004dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b70:	f001 f990 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200001f4 	.word	0x200001f4

08000b80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <MX_DMA_Init+0x38>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <MX_DMA_Init+0x38>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6153      	str	r3, [r2, #20]
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_DMA_Init+0x38>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	200b      	movs	r0, #11
 8000ba4:	f002 f863 	bl	8002c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ba8:	200b      	movs	r0, #11
 8000baa:	f002 f87c 	bl	8002ca6 <HAL_NVIC_EnableIRQ>

}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40021000 	.word	0x40021000

08000bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	f107 0310 	add.w	r3, r7, #16
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd0:	4b3f      	ldr	r3, [pc, #252]	; (8000cd0 <MX_GPIO_Init+0x114>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	4a3e      	ldr	r2, [pc, #248]	; (8000cd0 <MX_GPIO_Init+0x114>)
 8000bd6:	f043 0310 	orr.w	r3, r3, #16
 8000bda:	6193      	str	r3, [r2, #24]
 8000bdc:	4b3c      	ldr	r3, [pc, #240]	; (8000cd0 <MX_GPIO_Init+0x114>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f003 0310 	and.w	r3, r3, #16
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be8:	4b39      	ldr	r3, [pc, #228]	; (8000cd0 <MX_GPIO_Init+0x114>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a38      	ldr	r2, [pc, #224]	; (8000cd0 <MX_GPIO_Init+0x114>)
 8000bee:	f043 0320 	orr.w	r3, r3, #32
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b36      	ldr	r3, [pc, #216]	; (8000cd0 <MX_GPIO_Init+0x114>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f003 0320 	and.w	r3, r3, #32
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	4b33      	ldr	r3, [pc, #204]	; (8000cd0 <MX_GPIO_Init+0x114>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a32      	ldr	r2, [pc, #200]	; (8000cd0 <MX_GPIO_Init+0x114>)
 8000c06:	f043 0304 	orr.w	r3, r3, #4
 8000c0a:	6193      	str	r3, [r2, #24]
 8000c0c:	4b30      	ldr	r3, [pc, #192]	; (8000cd0 <MX_GPIO_Init+0x114>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f003 0304 	and.w	r3, r3, #4
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c18:	4b2d      	ldr	r3, [pc, #180]	; (8000cd0 <MX_GPIO_Init+0x114>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	4a2c      	ldr	r2, [pc, #176]	; (8000cd0 <MX_GPIO_Init+0x114>)
 8000c1e:	f043 0308 	orr.w	r3, r3, #8
 8000c22:	6193      	str	r3, [r2, #24]
 8000c24:	4b2a      	ldr	r3, [pc, #168]	; (8000cd0 <MX_GPIO_Init+0x114>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f003 0308 	and.w	r3, r3, #8
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RESET_MOTOR1_Pin|PASOS_MOTOR1_Pin|Led_Pin, GPIO_PIN_RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	f248 0105 	movw	r1, #32773	; 0x8005
 8000c36:	4827      	ldr	r0, [pc, #156]	; (8000cd4 <MX_GPIO_Init+0x118>)
 8000c38:	f002 fbcf 	bl	80033da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|CALENTADOR1_Pin, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000c42:	4825      	ldr	r0, [pc, #148]	; (8000cd8 <MX_GPIO_Init+0x11c>)
 8000c44:	f002 fbc9 	bl	80033da <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RotaryDT_Pin RotaryCLK_Pin Button_Pin */
  GPIO_InitStruct.Pin = RotaryDT_Pin|RotaryCLK_Pin|Button_Pin;
 8000c48:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c4e:	4b23      	ldr	r3, [pc, #140]	; (8000cdc <MX_GPIO_Init+0x120>)
 8000c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4820      	ldr	r0, [pc, #128]	; (8000ce0 <MX_GPIO_Init+0x124>)
 8000c5e:	f002 fa2b 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_MOTOR1_Pin PASOS_MOTOR1_Pin Led_Pin */
  GPIO_InitStruct.Pin = RESET_MOTOR1_Pin|PASOS_MOTOR1_Pin|Led_Pin;
 8000c62:	f248 0305 	movw	r3, #32773	; 0x8005
 8000c66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2302      	movs	r3, #2
 8000c72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0310 	add.w	r3, r7, #16
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4816      	ldr	r0, [pc, #88]	; (8000cd4 <MX_GPIO_Init+0x118>)
 8000c7c:	f002 fa1c 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Pin CALENTADOR1_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|CALENTADOR1_Pin;
 8000c80:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c92:	f107 0310 	add.w	r3, r7, #16
 8000c96:	4619      	mov	r1, r3
 8000c98:	480f      	ldr	r0, [pc, #60]	; (8000cd8 <MX_GPIO_Init+0x11c>)
 8000c9a:	f002 fa0d 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Detector_fil_Pin */
  GPIO_InitStruct.Pin = Detector_fil_Pin;
 8000c9e:	2308      	movs	r3, #8
 8000ca0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <MX_GPIO_Init+0x128>)
 8000ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Detector_fil_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 0310 	add.w	r3, r7, #16
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4809      	ldr	r0, [pc, #36]	; (8000cd8 <MX_GPIO_Init+0x11c>)
 8000cb2:	f002 fa01 	bl	80030b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2101      	movs	r1, #1
 8000cba:	2028      	movs	r0, #40	; 0x28
 8000cbc:	f001 ffd7 	bl	8002c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cc0:	2028      	movs	r0, #40	; 0x28
 8000cc2:	f001 fff0 	bl	8002ca6 <HAL_NVIC_EnableIRQ>

}
 8000cc6:	bf00      	nop
 8000cc8:	3720      	adds	r7, #32
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	40010800 	.word	0x40010800
 8000cd8:	40010c00 	.word	0x40010c00
 8000cdc:	10110000 	.word	0x10110000
 8000ce0:	40011000 	.word	0x40011000
 8000ce4:	10210000 	.word	0x10210000

08000ce8 <PresentacionLCD>:

/* USER CODE BEGIN 4 */

void PresentacionLCD(void)
{
 8000ce8:	b590      	push	{r4, r7, lr}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 char *screenStart[] = {
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <PresentacionLCD+0x38>)
 8000cf0:	463c      	mov	r4, r7
 8000cf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		"                    ",
		"   CFP nro 8 SMATA  "
	};


	clearScreen();
 8000cf8:	f000 ff58 	bl	8001bac <clearScreen>
	HAL_Delay(100);
 8000cfc:	2064      	movs	r0, #100	; 0x64
 8000cfe:	f001 faef 	bl	80022e0 <HAL_Delay>
	printScreen(screenStart);
 8000d02:	463b      	mov	r3, r7
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 ff21 	bl	8001b4c <printScreen>
	HAL_Delay(4000);
 8000d0a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000d0e:	f001 fae7 	bl	80022e0 <HAL_Delay>
	clearScreen();
 8000d12:	f000 ff4b 	bl	8001bac <clearScreen>
}
 8000d16:	bf00      	nop
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd90      	pop	{r4, r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	08005a2c 	.word	0x08005a2c

08000d24 <PetConv_Init>:

void PetConv_Init(PETfilConv *_petFilConv)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	//_petFilConv -> filDetector_state = false;	//false = detector de filamento DESHABILITADO | true = detector de filamento HABILITADO
	_petFilConv -> lightAlarm_state = false;	//false = alarma luminica DESHABILITADA | true = alarma luminica HABILITADA
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	705a      	strb	r2, [r3, #1]
	_petFilConv -> soundAlarm_state = false;	//false = alarma sonora DESHABILITADA | true = alarma sonora HABILITADA
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
	_petFilConv -> col_state = false;			//false = motor del colector DESHABILITADO | true = motor del colector HABILITADO
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	709a      	strb	r2, [r3, #2]
	//_petFilConv -> velocidad_Col = APAGADO;		// APAGADO = 0 mm/min | VELOCIDAD 1 = 300 mm/min | | VELOCIDAD 2 = 400 mm/min | VELOCIDAD 3 = 500 mm/min
	_petFilConv -> currentExtTemp = 0;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	605a      	str	r2, [r3, #4]
	_petFilConv -> previousSetExtTemp = 25;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2219      	movs	r2, #25
 8000d48:	609a      	str	r2, [r3, #8]
	_petFilConv -> setExtTemp = 25;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2219      	movs	r2, #25
 8000d4e:	60da      	str	r2, [r3, #12]
	_petFilConv -> PID_d = 0;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f04f 0200 	mov.w	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
	_petFilConv -> PID_error = 0;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f04f 0200 	mov.w	r2, #0
 8000d5e:	61da      	str	r2, [r3, #28]
	_petFilConv -> PID_i = 0;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f04f 0200 	mov.w	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
	_petFilConv -> PID_p = 0;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f04f 0200 	mov.w	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
	_petFilConv -> elapsedTime = 0;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f04f 0200 	mov.w	r2, #0
 8000d76:	625a      	str	r2, [r3, #36]	; 0x24
	_petFilConv -> factor_cor = 20;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2214      	movs	r2, #20
 8000d7c:	631a      	str	r2, [r3, #48]	; 0x30
	_petFilConv -> previous_error = 0;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f04f 0200 	mov.w	r2, #0
 8000d84:	621a      	str	r2, [r3, #32]
	_petFilConv -> time = HAL_GetTick();
 8000d86:	f001 faa1 	bl	80022cc <HAL_GetTick>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fa93 	bl	80002b8 <__aeabi_ui2f>
 8000d92:	4602      	mov	r2, r0
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	629a      	str	r2, [r3, #40]	; 0x28
	_petFilConv -> timePrev = 0;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f04f 0200 	mov.w	r2, #0
 8000d9e:	62da      	str	r2, [r3, #44]	; 0x2c

	//deshabilito MOTOR COL 1
	HAL_GPIO_WritePin(GPIOA, RESET_MOTOR1_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2101      	movs	r1, #1
 8000da4:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <PetConv_Init+0x9c>)
 8000da6:	f002 fb18 	bl	80033da <HAL_GPIO_WritePin>
	//deshabilito CALENTADOR 1
	HAL_GPIO_WritePin(GPIOB, CALENTADOR1_Pin, GPIO_PIN_SET);
 8000daa:	2201      	movs	r2, #1
 8000dac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <PetConv_Init+0xa0>)
 8000db2:	f002 fb12 	bl	80033da <HAL_GPIO_WritePin>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40010800 	.word	0x40010800
 8000dc4:	40010c00 	.word	0x40010c00

08000dc8 <ControlAlarms>:

void ControlAlarms(bool *_sensorFil , PETfilConv *_petFilConv)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
	if(*_sensorFil)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d024      	beq.n	8000e24 <ControlAlarms+0x5c>
	{
		if(_petFilConv -> lightAlarm_state)	HAL_GPIO_WritePin(GPIOA, Led_Pin, GPIO_PIN_SET);	//si alarma visual esta activada, enciende led
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	785b      	ldrb	r3, [r3, #1]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d006      	beq.n	8000df0 <ControlAlarms+0x28>
 8000de2:	2201      	movs	r2, #1
 8000de4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000de8:	4810      	ldr	r0, [pc, #64]	; (8000e2c <ControlAlarms+0x64>)
 8000dea:	f002 faf6 	bl	80033da <HAL_GPIO_WritePin>
 8000dee:	e005      	b.n	8000dfc <ControlAlarms+0x34>
		else	HAL_GPIO_WritePin(GPIOA, Led_Pin, GPIO_PIN_RESET);	//si alarma visual esta desactivada, apaga led
 8000df0:	2200      	movs	r2, #0
 8000df2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000df6:	480d      	ldr	r0, [pc, #52]	; (8000e2c <ControlAlarms+0x64>)
 8000df8:	f002 faef 	bl	80033da <HAL_GPIO_WritePin>
		if(_petFilConv -> soundAlarm_state) HAL_GPIO_WritePin(GPIOB, Buzzer_Pin, GPIO_PIN_SET);	//si alarma visual esta activada, enciende buzzer
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d006      	beq.n	8000e12 <ControlAlarms+0x4a>
 8000e04:	2201      	movs	r2, #1
 8000e06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e0a:	4809      	ldr	r0, [pc, #36]	; (8000e30 <ControlAlarms+0x68>)
 8000e0c:	f002 fae5 	bl	80033da <HAL_GPIO_WritePin>
 8000e10:	e005      	b.n	8000e1e <ControlAlarms+0x56>
		else HAL_GPIO_WritePin(GPIOB, Buzzer_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e18:	4805      	ldr	r0, [pc, #20]	; (8000e30 <ControlAlarms+0x68>)
 8000e1a:	f002 fade 	bl	80033da <HAL_GPIO_WritePin>
		*_sensorFil = false;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
	}
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40010800 	.word	0x40010800
 8000e30:	40010c00 	.word	0x40010c00

08000e34 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80fb      	strh	r3, [r7, #6]
	static uint32_t previousTick;
	uint32_t currentTick = HAL_GetTick();
 8000e3e:	f001 fa45 	bl	80022cc <HAL_GetTick>
 8000e42:	60f8      	str	r0, [r7, #12]
	//Rotate encoder CCKW or CKW
	if(currentTick - previousTick > 300)
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <HAL_GPIO_EXTI_Callback+0x80>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000e50:	d92b      	bls.n	8000eaa <HAL_GPIO_EXTI_Callback+0x76>
	{
		if(GPIO_Pin == RotaryDT_Pin)			g_btnPressed = Left;
 8000e52:	88fb      	ldrh	r3, [r7, #6]
 8000e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e58:	d103      	bne.n	8000e62 <HAL_GPIO_EXTI_Callback+0x2e>
 8000e5a:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <HAL_GPIO_EXTI_Callback+0x84>)
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	e020      	b.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x70>
		else if(GPIO_Pin == RotaryCLK_Pin)		g_btnPressed = Right;
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e68:	d103      	bne.n	8000e72 <HAL_GPIO_EXTI_Callback+0x3e>
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <HAL_GPIO_EXTI_Callback+0x84>)
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	e018      	b.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x70>
		else if(GPIO_Pin == Button_Pin)			g_btnPressed = Ok;
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e78:	d103      	bne.n	8000e82 <HAL_GPIO_EXTI_Callback+0x4e>
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <HAL_GPIO_EXTI_Callback+0x84>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	e010      	b.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x70>
		else if(GPIO_Pin == Detector_fil_Pin)
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	2b08      	cmp	r3, #8
 8000e86:	d10d      	bne.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x70>
		{
			if(HAL_GPIO_ReadPin(GPIOB, Detector_fil_Pin)) g_alarmFil = true;
 8000e88:	2108      	movs	r1, #8
 8000e8a:	480c      	ldr	r0, [pc, #48]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x88>)
 8000e8c:	f002 fa8e 	bl	80033ac <HAL_GPIO_ReadPin>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_EXTI_Callback+0x6a>
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	701a      	strb	r2, [r3, #0]
 8000e9c:	e002      	b.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x70>
			else g_alarmFil = false;
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]

		}

		previousTick = currentTick;
 8000ea4:	4a03      	ldr	r2, [pc, #12]	; (8000eb4 <HAL_GPIO_EXTI_Callback+0x80>)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6013      	str	r3, [r2, #0]
	}
}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200000fc 	.word	0x200000fc
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	40010c00 	.word	0x40010c00
 8000ec0:	2000009c 	.word	0x2000009c

08000ec4 <updateDataGUI>:


void updateDataGUI(uint32_t *_indexes , uint32_t *_btn , PETfilConv *_petFilConv , uint32_t *currentScreen , uint32_t *_vel_col)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
 8000ed0:	603b      	str	r3, [r7, #0]
	if(*_btn != NoPressed)
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f000 82f1 	beq.w	80014be <updateDataGUI+0x5fa>
	{
			if(*_btn == Ok)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	f040 814a 	bne.w	800117a <updateDataGUI+0x2b6>
			{
				switch(*currentScreen)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b1f      	cmp	r3, #31
 8000eec:	f200 82e9 	bhi.w	80014c2 <updateDataGUI+0x5fe>
 8000ef0:	a201      	add	r2, pc, #4	; (adr r2, 8000ef8 <updateDataGUI+0x34>)
 8000ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef6:	bf00      	nop
 8000ef8:	08000f79 	.word	0x08000f79
 8000efc:	080014c3 	.word	0x080014c3
 8000f00:	08000ff9 	.word	0x08000ff9
 8000f04:	0800101f 	.word	0x0800101f
 8000f08:	08001045 	.word	0x08001045
 8000f0c:	080010a9 	.word	0x080010a9
 8000f10:	0800115b 	.word	0x0800115b
 8000f14:	08001163 	.word	0x08001163
 8000f18:	0800116b 	.word	0x0800116b
 8000f1c:	080014c3 	.word	0x080014c3
 8000f20:	080014c3 	.word	0x080014c3
 8000f24:	08000f89 	.word	0x08000f89
 8000f28:	08000fd3 	.word	0x08000fd3
 8000f2c:	080014c3 	.word	0x080014c3
 8000f30:	080014c3 	.word	0x080014c3
 8000f34:	080014c3 	.word	0x080014c3
 8000f38:	080014c3 	.word	0x080014c3
 8000f3c:	080014c3 	.word	0x080014c3
 8000f40:	080014c3 	.word	0x080014c3
 8000f44:	080014c3 	.word	0x080014c3
 8000f48:	080014c3 	.word	0x080014c3
 8000f4c:	080014c3 	.word	0x080014c3
 8000f50:	080014c3 	.word	0x080014c3
 8000f54:	080014c3 	.word	0x080014c3
 8000f58:	080014c3 	.word	0x080014c3
 8000f5c:	080014c3 	.word	0x080014c3
 8000f60:	080014c3 	.word	0x080014c3
 8000f64:	080014c3 	.word	0x080014c3
 8000f68:	080014c3 	.word	0x080014c3
 8000f6c:	080014c3 	.word	0x080014c3
 8000f70:	080014c3 	.word	0x080014c3
 8000f74:	080010bd 	.word	0x080010bd
				{
					case pantallaWorkingScreen:	//pantalla de trabajo
						*currentScreen = pantallaMainMenu_part1;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	220b      	movs	r2, #11
 8000f7c:	601a      	str	r2, [r3, #0]
						_indexes[cont_item_PrinMenu] = 0;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
					break;
 8000f86:	e2ad      	b.n	80014e4 <updateDataGUI+0x620>

					case pantallaMainMenu_part1: //menu principal (parte 1)
						if(_indexes[cont_item_PrinMenu] == 0) *currentScreen = pantallaWorkingScreen;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d103      	bne.n	8000f9a <updateDataGUI+0xd6>
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
						else if(_indexes[cont_item_PrinMenu] == 1) *currentScreen = pantallaSubMenuExtrusores;
						else if(_indexes[cont_item_PrinMenu] == 2) *currentScreen = pantallaSubMenuColectoresFil;
						else if(_indexes[cont_item_PrinMenu] == 3) *currentScreen = pantallaSubMenuAlarmas;
					break;
 8000f98:	e295      	b.n	80014c6 <updateDataGUI+0x602>
						else if(_indexes[cont_item_PrinMenu] == 1) *currentScreen = pantallaSubMenuExtrusores;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d103      	bne.n	8000fac <updateDataGUI+0xe8>
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	601a      	str	r2, [r3, #0]
					break;
 8000faa:	e28c      	b.n	80014c6 <updateDataGUI+0x602>
						else if(_indexes[cont_item_PrinMenu] == 2) *currentScreen = pantallaSubMenuColectoresFil;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	3304      	adds	r3, #4
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d103      	bne.n	8000fbe <updateDataGUI+0xfa>
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	2203      	movs	r2, #3
 8000fba:	601a      	str	r2, [r3, #0]
					break;
 8000fbc:	e283      	b.n	80014c6 <updateDataGUI+0x602>
						else if(_indexes[cont_item_PrinMenu] == 3) *currentScreen = pantallaSubMenuAlarmas;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	f040 827e 	bne.w	80014c6 <updateDataGUI+0x602>
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	2204      	movs	r2, #4
 8000fce:	601a      	str	r2, [r3, #0]
					break;
 8000fd0:	e279      	b.n	80014c6 <updateDataGUI+0x602>

					case pantallaMainMenu_part2: //menu principal (parte 2)
						if(_indexes[cont_item_PrinMenu] == 4) *currentScreen = pantallaSubMenuHistorial;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b04      	cmp	r3, #4
 8000fda:	d103      	bne.n	8000fe4 <updateDataGUI+0x120>
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	2205      	movs	r2, #5
 8000fe0:	601a      	str	r2, [r3, #0]
						else if(_indexes[cont_item_PrinMenu] == 5) *currentScreen = pantallaSubMenuAcercaDe_part1;
					break;
 8000fe2:	e272      	b.n	80014ca <updateDataGUI+0x606>
						else if(_indexes[cont_item_PrinMenu] == 5) *currentScreen = pantallaSubMenuAcercaDe_part1;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	3304      	adds	r3, #4
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b05      	cmp	r3, #5
 8000fec:	f040 826d 	bne.w	80014ca <updateDataGUI+0x606>
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	2206      	movs	r2, #6
 8000ff4:	601a      	str	r2, [r3, #0]
					break;
 8000ff6:	e268      	b.n	80014ca <updateDataGUI+0x606>

					case pantallaSubMenuExtrusores: //sub EXTRUSORES
						if(_indexes[cont_item_SubMenuExtrusores] == 0) *currentScreen = pantallaMainMenu_part1;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	3308      	adds	r3, #8
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d103      	bne.n	800100a <updateDataGUI+0x146>
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	220b      	movs	r2, #11
 8001006:	601a      	str	r2, [r3, #0]
						else if (_indexes[cont_item_SubMenuExtrusores] == 1) *currentScreen = pantallaSubmenuSetTempExt;
					break;
 8001008:	e261      	b.n	80014ce <updateDataGUI+0x60a>
						else if (_indexes[cont_item_SubMenuExtrusores] == 1) *currentScreen = pantallaSubmenuSetTempExt;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	3308      	adds	r3, #8
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b01      	cmp	r3, #1
 8001012:	f040 825c 	bne.w	80014ce <updateDataGUI+0x60a>
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	2208      	movs	r2, #8
 800101a:	601a      	str	r2, [r3, #0]
					break;
 800101c:	e257      	b.n	80014ce <updateDataGUI+0x60a>

					case pantallaSubMenuColectoresFil:	//sub COLECTORES fil.
						if(_indexes[cont_item_SubMenuColectores] == 0) *currentScreen = pantallaMainMenu_part1;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	330c      	adds	r3, #12
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d103      	bne.n	8001030 <updateDataGUI+0x16c>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	220b      	movs	r2, #11
 800102c:	601a      	str	r2, [r3, #0]
						else if(_indexes[cont_item_SubMenuColectores] == 1)	*currentScreen = pantallaSubMenuSelVelocidadColFil;
					break;
 800102e:	e250      	b.n	80014d2 <updateDataGUI+0x60e>
						else if(_indexes[cont_item_SubMenuColectores] == 1)	*currentScreen = pantallaSubMenuSelVelocidadColFil;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	330c      	adds	r3, #12
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b01      	cmp	r3, #1
 8001038:	f040 824b 	bne.w	80014d2 <updateDataGUI+0x60e>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	221f      	movs	r2, #31
 8001040:	601a      	str	r2, [r3, #0]
					break;
 8001042:	e246      	b.n	80014d2 <updateDataGUI+0x60e>

					case pantallaSubMenuAlarmas:	//sub menu ALARMAS
						if(_indexes[cont_item_SubMenuAlarmas] == 0) *currentScreen = pantallaMainMenu_part1;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3310      	adds	r3, #16
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d103      	bne.n	8001056 <updateDataGUI+0x192>
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	220b      	movs	r2, #11
 8001052:	601a      	str	r2, [r3, #0]
							//changeAlarms = true;
						}

						//if((_petFilConv -> soundAlarm_state == true)||(_petFilConv -> lightAlarm_state == true))	_petFilConv -> filDetector_state = true;
						//else _petFilConv -> filDetector_state = false;
					break;
 8001054:	e23f      	b.n	80014d6 <updateDataGUI+0x612>
						else if(_indexes[cont_item_SubMenuAlarmas] == 1)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	3310      	adds	r3, #16
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d10e      	bne.n	800107e <updateDataGUI+0x1ba>
							if(_petFilConv -> lightAlarm_state == false)	_petFilConv -> lightAlarm_state = true;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	785b      	ldrb	r3, [r3, #1]
 8001064:	f083 0301 	eor.w	r3, r3, #1
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <updateDataGUI+0x1b2>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2201      	movs	r2, #1
 8001072:	705a      	strb	r2, [r3, #1]
					break;
 8001074:	e22f      	b.n	80014d6 <updateDataGUI+0x612>
							else	_petFilConv -> lightAlarm_state = false;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	705a      	strb	r2, [r3, #1]
					break;
 800107c:	e22b      	b.n	80014d6 <updateDataGUI+0x612>
						else if(_indexes[cont_item_SubMenuAlarmas] == 2)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	3310      	adds	r3, #16
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b02      	cmp	r3, #2
 8001086:	f040 8226 	bne.w	80014d6 <updateDataGUI+0x612>
							if(_petFilConv -> soundAlarm_state == false)	_petFilConv -> soundAlarm_state = true;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	f083 0301 	eor.w	r3, r3, #1
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <updateDataGUI+0x1dc>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2201      	movs	r2, #1
 800109c:	701a      	strb	r2, [r3, #0]
					break;
 800109e:	e21a      	b.n	80014d6 <updateDataGUI+0x612>
							else	_petFilConv -> soundAlarm_state = false;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
					break;
 80010a6:	e216      	b.n	80014d6 <updateDataGUI+0x612>

					case pantallaSubMenuHistorial:	//sub HISTORIAL
						if(_indexes[cont_item_SubMenuHistorial] == 0) *currentScreen = pantallaMainMenu_part2;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	3314      	adds	r3, #20
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f040 8213 	bne.w	80014da <updateDataGUI+0x616>
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	220c      	movs	r2, #12
 80010b8:	601a      	str	r2, [r3, #0]
						else{} //borra el valor acumulador del extrusor
					break;
 80010ba:	e20e      	b.n	80014da <updateDataGUI+0x616>

					case pantallaSubMenuSelVelocidadColFil:	//sub selector velocidad

						if(_indexes[cont_item_SubMenuSelVelCol] == 0)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	331c      	adds	r3, #28
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10d      	bne.n	80010e2 <updateDataGUI+0x21e>
						{
							if(*_vel_col != APAGADO)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d041      	beq.n	8001152 <updateDataGUI+0x28e>
							{
								*_vel_col = APAGADO;
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
								_petFilConv -> col_state = false;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	709a      	strb	r2, [r3, #2]
								ControlMotor(_petFilConv);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 fd70 	bl	8001bc0 <ControlMotor>
 80010e0:	e037      	b.n	8001152 <updateDataGUI+0x28e>
							}
						}

						else if(_indexes[cont_item_SubMenuSelVelCol] == 1)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	331c      	adds	r3, #28
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d10d      	bne.n	8001108 <updateDataGUI+0x244>
						{
							if(*_vel_col != VELOCIDAD_1)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d02e      	beq.n	8001152 <updateDataGUI+0x28e>
							{
								*_vel_col = VELOCIDAD_1;
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	2201      	movs	r2, #1
 80010f8:	601a      	str	r2, [r3, #0]
								_petFilConv -> col_state = true;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2201      	movs	r2, #1
 80010fe:	709a      	strb	r2, [r3, #2]
								ControlMotor(_petFilConv);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f000 fd5d 	bl	8001bc0 <ControlMotor>
 8001106:	e024      	b.n	8001152 <updateDataGUI+0x28e>
							}
						}

						else if(_indexes[cont_item_SubMenuSelVelCol] == 2)
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	331c      	adds	r3, #28
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d10d      	bne.n	800112e <updateDataGUI+0x26a>
						{
							if(*_vel_col != VELOCIDAD_2)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d01b      	beq.n	8001152 <updateDataGUI+0x28e>
							{
								*_vel_col = VELOCIDAD_2;
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	2202      	movs	r2, #2
 800111e:	601a      	str	r2, [r3, #0]
								_petFilConv -> col_state = true;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	709a      	strb	r2, [r3, #2]
								ControlMotor(_petFilConv);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f000 fd4a 	bl	8001bc0 <ControlMotor>
 800112c:	e011      	b.n	8001152 <updateDataGUI+0x28e>
							}
						}
						else if(_indexes[cont_item_SubMenuSelVelCol] == 3)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	331c      	adds	r3, #28
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b03      	cmp	r3, #3
 8001136:	d10c      	bne.n	8001152 <updateDataGUI+0x28e>
						{
							if(*_vel_col != VELOCIDAD_3)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b03      	cmp	r3, #3
 800113e:	d008      	beq.n	8001152 <updateDataGUI+0x28e>
							{
								*_vel_col = VELOCIDAD_3;
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	2203      	movs	r2, #3
 8001144:	601a      	str	r2, [r3, #0]
								_petFilConv -> col_state = true;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	709a      	strb	r2, [r3, #2]
								ControlMotor(_petFilConv);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 fd37 	bl	8001bc0 <ControlMotor>
							}
						}

						*currentScreen = pantallaSubMenuColectoresFil;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	2203      	movs	r2, #3
 8001156:	601a      	str	r2, [r3, #0]
					break;
 8001158:	e1c4      	b.n	80014e4 <updateDataGUI+0x620>

					case pantallaSubMenuAcercaDe_part1:	//sub menu ACERCA DE...
						*currentScreen = pantallaMainMenu_part2;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	220c      	movs	r2, #12
 800115e:	601a      	str	r2, [r3, #0]
					break;
 8001160:	e1c0      	b.n	80014e4 <updateDataGUI+0x620>

					case pantallaSubMenuAcercaDe_part2:	//sub menu ACERCA DE...
						*currentScreen = pantallaMainMenu_part2;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	220c      	movs	r2, #12
 8001166:	601a      	str	r2, [r3, #0]
					break;
 8001168:	e1bc      	b.n	80014e4 <updateDataGUI+0x620>

					case pantallaSubmenuSetTempExt:	//menu seteo de temperatura COLECTORES
						_petFilConv -> setExtTemp = _petFilConv -> previousSetExtTemp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	60da      	str	r2, [r3, #12]
						*currentScreen = pantallaSubMenuExtrusores;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	2202      	movs	r2, #2
 8001176:	601a      	str	r2, [r3, #0]
					break;
 8001178:	e1b4      	b.n	80014e4 <updateDataGUI+0x620>

					default: break;
				}
			}

			else if(*_btn == Left)
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b02      	cmp	r3, #2
 8001180:	f040 80a6 	bne.w	80012d0 <updateDataGUI+0x40c>
			{
					switch(*currentScreen)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b1f      	cmp	r3, #31
 800118a:	f200 8088 	bhi.w	800129e <updateDataGUI+0x3da>
 800118e:	a201      	add	r2, pc, #4	; (adr r2, 8001194 <updateDataGUI+0x2d0>)
 8001190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001194:	080014df 	.word	0x080014df
 8001198:	0800129f 	.word	0x0800129f
 800119c:	0800129f 	.word	0x0800129f
 80011a0:	0800129f 	.word	0x0800129f
 80011a4:	0800129f 	.word	0x0800129f
 80011a8:	0800129f 	.word	0x0800129f
 80011ac:	0800129f 	.word	0x0800129f
 80011b0:	0800127b 	.word	0x0800127b
 80011b4:	08001283 	.word	0x08001283
 80011b8:	0800129f 	.word	0x0800129f
 80011bc:	0800129f 	.word	0x0800129f
 80011c0:	08001215 	.word	0x08001215
 80011c4:	08001235 	.word	0x08001235
 80011c8:	0800129f 	.word	0x0800129f
 80011cc:	0800129f 	.word	0x0800129f
 80011d0:	0800129f 	.word	0x0800129f
 80011d4:	0800129f 	.word	0x0800129f
 80011d8:	0800129f 	.word	0x0800129f
 80011dc:	0800129f 	.word	0x0800129f
 80011e0:	0800129f 	.word	0x0800129f
 80011e4:	0800129f 	.word	0x0800129f
 80011e8:	0800129f 	.word	0x0800129f
 80011ec:	0800129f 	.word	0x0800129f
 80011f0:	0800129f 	.word	0x0800129f
 80011f4:	0800129f 	.word	0x0800129f
 80011f8:	0800129f 	.word	0x0800129f
 80011fc:	0800129f 	.word	0x0800129f
 8001200:	0800129f 	.word	0x0800129f
 8001204:	0800129f 	.word	0x0800129f
 8001208:	0800129f 	.word	0x0800129f
 800120c:	0800129f 	.word	0x0800129f
 8001210:	0800125b 	.word	0x0800125b
						case pantallaWorkingScreen:	//pantalla de trabajo
							//NADA
						break;

						case pantallaMainMenu_part1:
							if(_indexes[cont_item_PrinMenu] == 0) _indexes[cont_item_PrinMenu] = 0;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3304      	adds	r3, #4
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d104      	bne.n	8001228 <updateDataGUI+0x364>
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	3304      	adds	r3, #4
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
							else	_indexes[cont_item_PrinMenu]--;
						break;
 8001226:	e15d      	b.n	80014e4 <updateDataGUI+0x620>
							else	_indexes[cont_item_PrinMenu]--;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	3304      	adds	r3, #4
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	3a01      	subs	r2, #1
 8001230:	601a      	str	r2, [r3, #0]
						break;
 8001232:	e157      	b.n	80014e4 <updateDataGUI+0x620>

						case pantallaMainMenu_part2:
							if(_indexes[cont_item_PrinMenu] <= 4)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	3304      	adds	r3, #4
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b04      	cmp	r3, #4
 800123c:	d807      	bhi.n	800124e <updateDataGUI+0x38a>
							{
								*currentScreen = pantallaMainMenu_part1;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	220b      	movs	r2, #11
 8001242:	601a      	str	r2, [r3, #0]
								_indexes[cont_item_PrinMenu] = 3;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	3304      	adds	r3, #4
 8001248:	2203      	movs	r2, #3
 800124a:	601a      	str	r2, [r3, #0]
							}
							else	_indexes[cont_item_PrinMenu]--;
						break;
 800124c:	e14a      	b.n	80014e4 <updateDataGUI+0x620>
							else	_indexes[cont_item_PrinMenu]--;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	3304      	adds	r3, #4
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	3a01      	subs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]
						break;
 8001258:	e144      	b.n	80014e4 <updateDataGUI+0x620>

						case pantallaSubMenuSelVelocidadColFil:
							if(_indexes[cont_item_SubMenuSelVelCol] == 0) _indexes[cont_item_SubMenuSelVelCol] = 0;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	331c      	adds	r3, #28
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d104      	bne.n	800126e <updateDataGUI+0x3aa>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	331c      	adds	r3, #28
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
							else	_indexes[cont_item_SubMenuSelVelCol]--;
						break;
 800126c:	e13a      	b.n	80014e4 <updateDataGUI+0x620>
							else	_indexes[cont_item_SubMenuSelVelCol]--;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	331c      	adds	r3, #28
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	3a01      	subs	r2, #1
 8001276:	601a      	str	r2, [r3, #0]
						break;
 8001278:	e134      	b.n	80014e4 <updateDataGUI+0x620>

						case pantallaSubMenuAcercaDe_part2:	*currentScreen = pantallaSubMenuAcercaDe_part1;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	2206      	movs	r2, #6
 800127e:	601a      	str	r2, [r3, #0]
						break;
 8001280:	e130      	b.n	80014e4 <updateDataGUI+0x620>
						case pantallaSubmenuSetTempExt:


						//	if(_petFilConv -> setExtTemp == 0)	_petFilConv -> setExtTemp = 0;
						//	else _petFilConv -> setExtTemp--;
							if(_petFilConv -> previousSetExtTemp == 0) _petFilConv -> previousSetExtTemp = 0;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d103      	bne.n	8001292 <updateDataGUI+0x3ce>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
							else _petFilConv -> previousSetExtTemp--;
						break;
 8001290:	e128      	b.n	80014e4 <updateDataGUI+0x620>
							else _petFilConv -> previousSetExtTemp--;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	1e5a      	subs	r2, r3, #1
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	609a      	str	r2, [r3, #8]
						break;
 800129c:	e122      	b.n	80014e4 <updateDataGUI+0x620>

						default:
							if(_indexes[*currentScreen] == 0) _indexes[*currentScreen] = 0;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	4413      	add	r3, r2
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d107      	bne.n	80012be <updateDataGUI+0x3fa>
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]

						default: break;
					}
			}
	}
}
 80012bc:	e112      	b.n	80014e4 <updateDataGUI+0x620>
							else _indexes[*currentScreen]--;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	3a01      	subs	r2, #1
 80012cc:	601a      	str	r2, [r3, #0]
}
 80012ce:	e109      	b.n	80014e4 <updateDataGUI+0x620>
			else if (*_btn == Right)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	f040 80f2 	bne.w	80014be <updateDataGUI+0x5fa>
					switch(*currentScreen)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b1f      	cmp	r3, #31
 80012e0:	f200 80ff 	bhi.w	80014e2 <updateDataGUI+0x61e>
 80012e4:	a201      	add	r2, pc, #4	; (adr r2, 80012ec <updateDataGUI+0x428>)
 80012e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ea:	bf00      	nop
 80012ec:	080014e3 	.word	0x080014e3
 80012f0:	080014e3 	.word	0x080014e3
 80012f4:	080013b3 	.word	0x080013b3
 80012f8:	080013e5 	.word	0x080013e5
 80012fc:	08001437 	.word	0x08001437
 8001300:	08001469 	.word	0x08001469
 8001304:	0800149b 	.word	0x0800149b
 8001308:	080014e3 	.word	0x080014e3
 800130c:	080014a3 	.word	0x080014a3
 8001310:	080014e3 	.word	0x080014e3
 8001314:	080014e3 	.word	0x080014e3
 8001318:	0800136d 	.word	0x0800136d
 800131c:	08001393 	.word	0x08001393
 8001320:	080014e3 	.word	0x080014e3
 8001324:	080014e3 	.word	0x080014e3
 8001328:	080014e3 	.word	0x080014e3
 800132c:	080014e3 	.word	0x080014e3
 8001330:	080014e3 	.word	0x080014e3
 8001334:	080014e3 	.word	0x080014e3
 8001338:	080014e3 	.word	0x080014e3
 800133c:	080014e3 	.word	0x080014e3
 8001340:	080014e3 	.word	0x080014e3
 8001344:	080014e3 	.word	0x080014e3
 8001348:	080014e3 	.word	0x080014e3
 800134c:	080014e3 	.word	0x080014e3
 8001350:	080014e3 	.word	0x080014e3
 8001354:	080014e3 	.word	0x080014e3
 8001358:	080014e3 	.word	0x080014e3
 800135c:	080014e3 	.word	0x080014e3
 8001360:	080014e3 	.word	0x080014e3
 8001364:	080014e3 	.word	0x080014e3
 8001368:	08001417 	.word	0x08001417
							if(_indexes[cont_item_PrinMenu] >= 3)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	3304      	adds	r3, #4
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b02      	cmp	r3, #2
 8001374:	d907      	bls.n	8001386 <updateDataGUI+0x4c2>
								*currentScreen = pantallaMainMenu_part2;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	220c      	movs	r2, #12
 800137a:	601a      	str	r2, [r3, #0]
								_indexes[cont_item_PrinMenu] = 4;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3304      	adds	r3, #4
 8001380:	2204      	movs	r2, #4
 8001382:	601a      	str	r2, [r3, #0]
						break;
 8001384:	e0ae      	b.n	80014e4 <updateDataGUI+0x620>
							else	_indexes[cont_item_PrinMenu]++;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3304      	adds	r3, #4
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	3201      	adds	r2, #1
 800138e:	601a      	str	r2, [r3, #0]
						break;
 8001390:	e0a8      	b.n	80014e4 <updateDataGUI+0x620>
							if(_indexes[cont_item_PrinMenu] >= 5) _indexes[cont_item_PrinMenu] = 5;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	3304      	adds	r3, #4
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b04      	cmp	r3, #4
 800139a:	d904      	bls.n	80013a6 <updateDataGUI+0x4e2>
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3304      	adds	r3, #4
 80013a0:	2205      	movs	r2, #5
 80013a2:	601a      	str	r2, [r3, #0]
						break;
 80013a4:	e09e      	b.n	80014e4 <updateDataGUI+0x620>
							else	_indexes[cont_item_PrinMenu]++;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	3304      	adds	r3, #4
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	3201      	adds	r2, #1
 80013ae:	601a      	str	r2, [r3, #0]
						break;
 80013b0:	e098      	b.n	80014e4 <updateDataGUI+0x620>
							if(_indexes[*currentScreen] == (cantItemsSubMenuExtrusores - 1)) _indexes[*currentScreen] = cantItemsSubMenuExtrusores - 1;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d107      	bne.n	80013d2 <updateDataGUI+0x50e>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	4413      	add	r3, r2
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]
						break;
 80013d0:	e088      	b.n	80014e4 <updateDataGUI+0x620>
							else _indexes[*currentScreen]++;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	4413      	add	r3, r2
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	3201      	adds	r2, #1
 80013e0:	601a      	str	r2, [r3, #0]
						break;
 80013e2:	e07f      	b.n	80014e4 <updateDataGUI+0x620>
							if(_indexes[*currentScreen] == (cantItemsSubMenuColectores - 1)) _indexes[*currentScreen] = cantItemsSubMenuColectores - 1;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	4413      	add	r3, r2
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d107      	bne.n	8001404 <updateDataGUI+0x540>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	4413      	add	r3, r2
 80013fe:	2201      	movs	r2, #1
 8001400:	601a      	str	r2, [r3, #0]
						break;
 8001402:	e06f      	b.n	80014e4 <updateDataGUI+0x620>
							else _indexes[*currentScreen]++;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	4413      	add	r3, r2
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	3201      	adds	r2, #1
 8001412:	601a      	str	r2, [r3, #0]
						break;
 8001414:	e066      	b.n	80014e4 <updateDataGUI+0x620>
							if(_indexes[cont_item_SubMenuSelVelCol] >= 3) _indexes[cont_item_PrinMenu] = 3;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	331c      	adds	r3, #28
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b02      	cmp	r3, #2
 800141e:	d904      	bls.n	800142a <updateDataGUI+0x566>
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3304      	adds	r3, #4
 8001424:	2203      	movs	r2, #3
 8001426:	601a      	str	r2, [r3, #0]
						break;
 8001428:	e05c      	b.n	80014e4 <updateDataGUI+0x620>
							else	_indexes[cont_item_SubMenuSelVelCol]++;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	331c      	adds	r3, #28
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	3201      	adds	r2, #1
 8001432:	601a      	str	r2, [r3, #0]
						break;
 8001434:	e056      	b.n	80014e4 <updateDataGUI+0x620>
							if(_indexes[*currentScreen] == (cantItemsSubMenuAlarmas - 1)) _indexes[*currentScreen] = cantItemsSubMenuAlarmas - 1;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	4413      	add	r3, r2
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d107      	bne.n	8001456 <updateDataGUI+0x592>
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	4413      	add	r3, r2
 8001450:	2202      	movs	r2, #2
 8001452:	601a      	str	r2, [r3, #0]
						break;
 8001454:	e046      	b.n	80014e4 <updateDataGUI+0x620>
							else _indexes[*currentScreen]++;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	4413      	add	r3, r2
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	3201      	adds	r2, #1
 8001464:	601a      	str	r2, [r3, #0]
						break;
 8001466:	e03d      	b.n	80014e4 <updateDataGUI+0x620>
							if(_indexes[*currentScreen] == (cantItemsSubMenuHistorial - 1)) _indexes[*currentScreen] = cantItemsSubMenuHistorial - 1;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	4413      	add	r3, r2
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d107      	bne.n	8001488 <updateDataGUI+0x5c4>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	4413      	add	r3, r2
 8001482:	2202      	movs	r2, #2
 8001484:	601a      	str	r2, [r3, #0]
						break;
 8001486:	e02d      	b.n	80014e4 <updateDataGUI+0x620>
							else _indexes[*currentScreen]++;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	4413      	add	r3, r2
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	3201      	adds	r2, #1
 8001496:	601a      	str	r2, [r3, #0]
						break;
 8001498:	e024      	b.n	80014e4 <updateDataGUI+0x620>
						case pantallaSubMenuAcercaDe_part1: *currentScreen = pantallaSubMenuAcercaDe_part2;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	2207      	movs	r2, #7
 800149e:	601a      	str	r2, [r3, #0]
						break;
 80014a0:	e020      	b.n	80014e4 <updateDataGUI+0x620>
							if(_petFilConv -> previousSetExtTemp == 250) _petFilConv -> previousSetExtTemp = 250;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2bfa      	cmp	r3, #250	; 0xfa
 80014a8:	d103      	bne.n	80014b2 <updateDataGUI+0x5ee>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	22fa      	movs	r2, #250	; 0xfa
 80014ae:	609a      	str	r2, [r3, #8]
						break;
 80014b0:	e018      	b.n	80014e4 <updateDataGUI+0x620>
							else _petFilConv -> previousSetExtTemp++;	//Temp++
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	1c5a      	adds	r2, r3, #1
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	609a      	str	r2, [r3, #8]
						break;
 80014bc:	e012      	b.n	80014e4 <updateDataGUI+0x620>
			}
 80014be:	bf00      	nop
 80014c0:	e010      	b.n	80014e4 <updateDataGUI+0x620>
					default: break;
 80014c2:	bf00      	nop
 80014c4:	e00e      	b.n	80014e4 <updateDataGUI+0x620>
					break;
 80014c6:	bf00      	nop
 80014c8:	e00c      	b.n	80014e4 <updateDataGUI+0x620>
					break;
 80014ca:	bf00      	nop
 80014cc:	e00a      	b.n	80014e4 <updateDataGUI+0x620>
					break;
 80014ce:	bf00      	nop
 80014d0:	e008      	b.n	80014e4 <updateDataGUI+0x620>
					break;
 80014d2:	bf00      	nop
 80014d4:	e006      	b.n	80014e4 <updateDataGUI+0x620>
					break;
 80014d6:	bf00      	nop
 80014d8:	e004      	b.n	80014e4 <updateDataGUI+0x620>
					break;
 80014da:	bf00      	nop
 80014dc:	e002      	b.n	80014e4 <updateDataGUI+0x620>
						break;
 80014de:	bf00      	nop
 80014e0:	e000      	b.n	80014e4 <updateDataGUI+0x620>
						default: break;
 80014e2:	bf00      	nop
}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <updateLCD>:
	}
}
*/

void updateLCD(PETfilConv *_petFilConv , uint32_t *currentScreen)
{
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b0a7      	sub	sp, #156	; 0x9c
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
	static uint32_t previousScreen;

	char *prinMenu1[] = {
 80014f6:	4b6d      	ldr	r3, [pc, #436]	; (80016ac <updateLCD+0x1c0>)
 80014f8:	f107 0488 	add.w	r4, r7, #136	; 0x88
 80014fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    "Extrusores         ",
	    "Colectores fil.    ",
	    "Alarmas            "
	};

	char *prinMenu2[] = {
 8001502:	4b6b      	ldr	r3, [pc, #428]	; (80016b0 <updateLCD+0x1c4>)
 8001504:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8001508:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800150a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    "Acerca de...       ",
	    "                   ",
		"                   "
	};

	char *subMenuExtrusores[] = {
 800150e:	4b69      	ldr	r3, [pc, #420]	; (80016b4 <updateLCD+0x1c8>)
 8001510:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8001514:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001516:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    "Extrusor 1         ",
		"                   ",
		"                   "
	};

	char *subMenuColectores[] = {
 800151a:	4b67      	ldr	r3, [pc, #412]	; (80016b8 <updateLCD+0x1cc>)
 800151c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001520:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001522:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    "Colector fil 1     ",
		"                   ",
		"                   "
	};

	char *subMenuAlarmas[] = {
 8001526:	4b65      	ldr	r3, [pc, #404]	; (80016bc <updateLCD+0x1d0>)
 8001528:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800152c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800152e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    "Luminica           ",
	    "Sonora             ",
		"                   "
	};

	char *subMenuHistorial[] = {
 8001532:	4b63      	ldr	r3, [pc, #396]	; (80016c0 <updateLCD+0x1d4>)
 8001534:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001538:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800153a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    "Extrusor 1         ",
	    "Borrar historial   ",
		"                   "
	};

	char *subMenuAcercaDe1[] = {
 800153e:	4b61      	ldr	r3, [pc, #388]	; (80016c4 <updateLCD+0x1d8>)
 8001540:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001544:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001546:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    "       Esp. en      ",
	    " Sistemas Embebidos ",
		"    LSE - FiUBA     "
	};

	char *subMenuAcercaDe2[] = {
 800154a:	4b5f      	ldr	r3, [pc, #380]	; (80016c8 <updateLCD+0x1dc>)
 800154c:	f107 0418 	add.w	r4, r7, #24
 8001550:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001552:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    "    Vargas Alice    ",
		"                    ",
		"        2022        "
	};

	char *subMenuSelVelocidadColec[] = {
 8001556:	4b5d      	ldr	r3, [pc, #372]	; (80016cc <updateLCD+0x1e0>)
 8001558:	f107 0408 	add.w	r4, r7, #8
 800155c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800155e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    "300 mm/min         ",
		"400 mm/min         ",
		"500 mm/min         "
	};

	if(*currentScreen != previousScreen) //si la pantalla actual es distinto a la anterior o si la pantalla actual es la de seteo de temp de extrusor
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4b5a      	ldr	r3, [pc, #360]	; (80016d0 <updateLCD+0x1e4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	f000 808a 	beq.w	8001684 <updateLCD+0x198>
	{
		previousScreen = *currentScreen;
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a56      	ldr	r2, [pc, #344]	; (80016d0 <updateLCD+0x1e4>)
 8001576:	6013      	str	r3, [r2, #0]

		switch(*currentScreen)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b1f      	cmp	r3, #31
 800157e:	f200 8083 	bhi.w	8001688 <updateLCD+0x19c>
 8001582:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <updateLCD+0x9c>)
 8001584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001588:	08001609 	.word	0x08001609
 800158c:	08001689 	.word	0x08001689
 8001590:	08001629 	.word	0x08001629
 8001594:	08001635 	.word	0x08001635
 8001598:	08001641 	.word	0x08001641
 800159c:	0800164d 	.word	0x0800164d
 80015a0:	08001659 	.word	0x08001659
 80015a4:	08001665 	.word	0x08001665
 80015a8:	08001671 	.word	0x08001671
 80015ac:	08001689 	.word	0x08001689
 80015b0:	08001689 	.word	0x08001689
 80015b4:	08001611 	.word	0x08001611
 80015b8:	0800161d 	.word	0x0800161d
 80015bc:	08001689 	.word	0x08001689
 80015c0:	08001689 	.word	0x08001689
 80015c4:	08001689 	.word	0x08001689
 80015c8:	08001689 	.word	0x08001689
 80015cc:	08001689 	.word	0x08001689
 80015d0:	08001689 	.word	0x08001689
 80015d4:	08001689 	.word	0x08001689
 80015d8:	08001689 	.word	0x08001689
 80015dc:	08001689 	.word	0x08001689
 80015e0:	08001689 	.word	0x08001689
 80015e4:	08001689 	.word	0x08001689
 80015e8:	08001689 	.word	0x08001689
 80015ec:	08001689 	.word	0x08001689
 80015f0:	08001689 	.word	0x08001689
 80015f4:	08001689 	.word	0x08001689
 80015f8:	08001689 	.word	0x08001689
 80015fc:	08001689 	.word	0x08001689
 8001600:	08001689 	.word	0x08001689
 8001604:	08001679 	.word	0x08001679
		{
			case pantallaWorkingScreen: printscreenWorking(_petFilConv);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 f8bf 	bl	800178c <printscreenWorking>
			break;
 800160e:	e03c      	b.n	800168a <updateLCD+0x19e>

			case pantallaMainMenu_part1: printScreen(prinMenu1);
 8001610:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001614:	4618      	mov	r0, r3
 8001616:	f000 fa99 	bl	8001b4c <printScreen>
			break;
 800161a:	e036      	b.n	800168a <updateLCD+0x19e>

			case pantallaMainMenu_part2: printScreen(prinMenu2);
 800161c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001620:	4618      	mov	r0, r3
 8001622:	f000 fa93 	bl	8001b4c <printScreen>
			break;
 8001626:	e030      	b.n	800168a <updateLCD+0x19e>

			case pantallaSubMenuExtrusores: printScreen(subMenuExtrusores);
 8001628:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800162c:	4618      	mov	r0, r3
 800162e:	f000 fa8d 	bl	8001b4c <printScreen>
			break;
 8001632:	e02a      	b.n	800168a <updateLCD+0x19e>

			case pantallaSubMenuColectoresFil: printScreen(subMenuColectores);
 8001634:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001638:	4618      	mov	r0, r3
 800163a:	f000 fa87 	bl	8001b4c <printScreen>
			break;
 800163e:	e024      	b.n	800168a <updateLCD+0x19e>

			case pantallaSubMenuAlarmas: printScreen(subMenuAlarmas);
 8001640:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001644:	4618      	mov	r0, r3
 8001646:	f000 fa81 	bl	8001b4c <printScreen>
			break;
 800164a:	e01e      	b.n	800168a <updateLCD+0x19e>

			case pantallaSubMenuHistorial: printScreen(subMenuHistorial);
 800164c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001650:	4618      	mov	r0, r3
 8001652:	f000 fa7b 	bl	8001b4c <printScreen>
			break;
 8001656:	e018      	b.n	800168a <updateLCD+0x19e>

			case pantallaSubMenuAcercaDe_part1: printScreen(subMenuAcercaDe1);
 8001658:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800165c:	4618      	mov	r0, r3
 800165e:	f000 fa75 	bl	8001b4c <printScreen>
			break;
 8001662:	e012      	b.n	800168a <updateLCD+0x19e>

			case pantallaSubMenuAcercaDe_part2: printScreen(subMenuAcercaDe2);
 8001664:	f107 0318 	add.w	r3, r7, #24
 8001668:	4618      	mov	r0, r3
 800166a:	f000 fa6f 	bl	8001b4c <printScreen>
			break;
 800166e:	e00c      	b.n	800168a <updateLCD+0x19e>

			case pantallaSubmenuSetTempExt: printScreenSettingTemp(_petFilConv);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 f82f 	bl	80016d4 <printScreenSettingTemp>
			break;
 8001676:	e008      	b.n	800168a <updateLCD+0x19e>

			case pantallaSubMenuSelVelocidadColFil: printScreen(subMenuSelVelocidadColec);
 8001678:	f107 0308 	add.w	r3, r7, #8
 800167c:	4618      	mov	r0, r3
 800167e:	f000 fa65 	bl	8001b4c <printScreen>
			break;
 8001682:	e002      	b.n	800168a <updateLCD+0x19e>

			default: break;
		}
	}
 8001684:	bf00      	nop
 8001686:	e000      	b.n	800168a <updateLCD+0x19e>
			default: break;
 8001688:	bf00      	nop

	if((_petFilConv -> previousSetExtTemp != _petFilConv -> setExtTemp) && (*currentScreen == pantallaSubmenuSetTempExt))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	429a      	cmp	r2, r3
 8001694:	d006      	beq.n	80016a4 <updateLCD+0x1b8>
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b08      	cmp	r3, #8
 800169c:	d102      	bne.n	80016a4 <updateLCD+0x1b8>
	{
		printSettingTemp(_petFilConv);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f850 	bl	8001744 <printSettingTemp>
	}
}
 80016a4:	bf00      	nop
 80016a6:	379c      	adds	r7, #156	; 0x9c
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd90      	pop	{r4, r7, pc}
 80016ac:	08005a3c 	.word	0x08005a3c
 80016b0:	08005a4c 	.word	0x08005a4c
 80016b4:	08005a5c 	.word	0x08005a5c
 80016b8:	08005a6c 	.word	0x08005a6c
 80016bc:	08005a7c 	.word	0x08005a7c
 80016c0:	08005a8c 	.word	0x08005a8c
 80016c4:	08005a9c 	.word	0x08005a9c
 80016c8:	08005aac 	.word	0x08005aac
 80016cc:	08005abc 	.word	0x08005abc
 80016d0:	20000100 	.word	0x20000100

080016d4 <printScreenSettingTemp>:
}

*/

void printScreenSettingTemp(PETfilConv *_petFilConv)
{
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b091      	sub	sp, #68	; 0x44
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	int reg_lines[LINES] = {
 80016dc:	4b16      	ldr	r3, [pc, #88]	; (8001738 <printScreenSettingTemp+0x64>)
 80016de:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80016e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					0x80|0x40,
					0x80|0x14,
					0x80|0x54
				};

	char *subMenuSelTemp[] = {
 80016e8:	4b14      	ldr	r3, [pc, #80]	; (800173c <printScreenSettingTemp+0x68>)
 80016ea:	f107 0420 	add.w	r4, r7, #32
 80016ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		"                    "
	};

	char aux[20];

	clearScreen();
 80016f4:	f000 fa5a 	bl	8001bac <clearScreen>
	lcd_send_cmd(reg_lines[0]);
 80016f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff f819 	bl	8000734 <lcd_send_cmd>
	lcd_send_string(subMenuSelTemp[0]);
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff f8af 	bl	8000868 <lcd_send_string>
	lcd_send_cmd(reg_lines[2]);
 800170a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800170c:	b2db      	uxtb	r3, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff f810 	bl	8000734 <lcd_send_cmd>
	sprintf(aux,"%lu C / 250 C(Max.)",_petFilConv -> previousSetExtTemp);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	4908      	ldr	r1, [pc, #32]	; (8001740 <printScreenSettingTemp+0x6c>)
 800171e:	4618      	mov	r0, r3
 8001720:	f003 fbee 	bl	8004f00 <siprintf>
	lcd_send_string(aux);
 8001724:	f107 030c 	add.w	r3, r7, #12
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff f89d 	bl	8000868 <lcd_send_string>
}
 800172e:	bf00      	nop
 8001730:	3744      	adds	r7, #68	; 0x44
 8001732:	46bd      	mov	sp, r7
 8001734:	bd90      	pop	{r4, r7, pc}
 8001736:	bf00      	nop
 8001738:	08005ae0 	.word	0x08005ae0
 800173c:	08005af0 	.word	0x08005af0
 8001740:	08005acc 	.word	0x08005acc

08001744 <printSettingTemp>:

void printSettingTemp(PETfilConv *_petFilConv)
{
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b089      	sub	sp, #36	; 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	char aux[3];
	int reg_lines[LINES] = {
 800174c:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <printSettingTemp+0x40>)
 800174e:	f107 040c 	add.w	r4, r7, #12
 8001752:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001754:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					0x80|0x40,
					0x80|0x14,
					0x80|0x54
				};

	lcd_send_cmd(reg_lines[2]);
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe ffe9 	bl	8000734 <lcd_send_cmd>
	sprintf(aux,"%lu C",_petFilConv -> previousSetExtTemp);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4907      	ldr	r1, [pc, #28]	; (8001788 <printSettingTemp+0x44>)
 800176c:	4618      	mov	r0, r3
 800176e:	f003 fbc7 	bl	8004f00 <siprintf>
	lcd_send_string(aux);
 8001772:	f107 031c 	add.w	r3, r7, #28
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff f876 	bl	8000868 <lcd_send_string>
}
 800177c:	bf00      	nop
 800177e:	3724      	adds	r7, #36	; 0x24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd90      	pop	{r4, r7, pc}
 8001784:	08005ae0 	.word	0x08005ae0
 8001788:	08005b00 	.word	0x08005b00

0800178c <printscreenWorking>:

void printscreenWorking(PETfilConv *_petFilConv)
{
 800178c:	b590      	push	{r4, r7, lr}
 800178e:	b091      	sub	sp, #68	; 0x44
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	int reg_lines[LINES] = {
 8001794:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <printscreenWorking+0x64>)
 8001796:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800179a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800179c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					0x80|0x40,
					0x80|0x14,
					0x80|0x54
				};

	char *screenWorking[] = {
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <printscreenWorking+0x68>)
 80017a2:	f107 0420 	add.w	r4, r7, #32
 80017a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    "                   "
	};

	char aux[20];

	clearScreen();
 80017ac:	f000 f9fe 	bl	8001bac <clearScreen>
	lcd_send_cmd(reg_lines[0]);
 80017b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe ffbd 	bl	8000734 <lcd_send_cmd>
	lcd_send_string(screenWorking[0]);
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff f853 	bl	8000868 <lcd_send_string>
	lcd_send_cmd(reg_lines[2]);
 80017c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe ffb4 	bl	8000734 <lcd_send_cmd>
	sprintf(aux," %lu C  / %lu C   ",_petFilConv -> currentExtTemp ,_petFilConv -> setExtTemp);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	f107 000c 	add.w	r0, r7, #12
 80017d8:	4907      	ldr	r1, [pc, #28]	; (80017f8 <printscreenWorking+0x6c>)
 80017da:	f003 fb91 	bl	8004f00 <siprintf>
	lcd_send_string(aux);
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff f840 	bl	8000868 <lcd_send_string>
}
 80017e8:	bf00      	nop
 80017ea:	3744      	adds	r7, #68	; 0x44
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd90      	pop	{r4, r7, pc}
 80017f0:	08005ae0 	.word	0x08005ae0
 80017f4:	08005b1c 	.word	0x08005b1c
 80017f8:	08005b08 	.word	0x08005b08

080017fc <printCurrentTemp>:

void printCurrentTemp(PETfilConv *_petFilConv)
{
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b08d      	sub	sp, #52	; 0x34
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	char aux[20];
	int reg_lines[LINES] = {
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <printCurrentTemp+0x44>)
 8001806:	f107 040c 	add.w	r4, r7, #12
 800180a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800180c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					0x80|0x40,
					0x80|0x14,
					0x80|0x54
				};

	lcd_send_cmd(reg_lines[2]);
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe ff8d 	bl	8000734 <lcd_send_cmd>
	sprintf(aux," %lu C  / %lu C   ",_petFilConv -> currentExtTemp ,_petFilConv -> setExtTemp);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	f107 001c 	add.w	r0, r7, #28
 8001826:	4907      	ldr	r1, [pc, #28]	; (8001844 <printCurrentTemp+0x48>)
 8001828:	f003 fb6a 	bl	8004f00 <siprintf>
	lcd_send_string(aux);
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff f819 	bl	8000868 <lcd_send_string>
}
 8001836:	bf00      	nop
 8001838:	3734      	adds	r7, #52	; 0x34
 800183a:	46bd      	mov	sp, r7
 800183c:	bd90      	pop	{r4, r7, pc}
 800183e:	bf00      	nop
 8001840:	08005ae0 	.word	0x08005ae0
 8001844:	08005b08 	.word	0x08005b08

08001848 <updateCursor>:

void updateCursor(uint32_t *_indexes , PETfilConv *_petFilConv , uint32_t *currentScreen , uint32_t *_vel_col)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	603b      	str	r3, [r7, #0]
	  clearAllCursor();
 8001856:	f000 f951 	bl	8001afc <clearAllCursor>

	switch(*currentScreen)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	3b02      	subs	r3, #2
 8001860:	2b1d      	cmp	r3, #29
 8001862:	f200 80b8 	bhi.w	80019d6 <updateCursor+0x18e>
 8001866:	a201      	add	r2, pc, #4	; (adr r2, 800186c <updateCursor+0x24>)
 8001868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186c:	08001905 	.word	0x08001905
 8001870:	08001915 	.word	0x08001915
 8001874:	08001925 	.word	0x08001925
 8001878:	08001979 	.word	0x08001979
 800187c:	080019d7 	.word	0x080019d7
 8001880:	080019d7 	.word	0x080019d7
 8001884:	080019d7 	.word	0x080019d7
 8001888:	080019d7 	.word	0x080019d7
 800188c:	080019d7 	.word	0x080019d7
 8001890:	080018e5 	.word	0x080018e5
 8001894:	080018f5 	.word	0x080018f5
 8001898:	080019d7 	.word	0x080019d7
 800189c:	080019d7 	.word	0x080019d7
 80018a0:	080019d7 	.word	0x080019d7
 80018a4:	080019d7 	.word	0x080019d7
 80018a8:	080019d7 	.word	0x080019d7
 80018ac:	080019d7 	.word	0x080019d7
 80018b0:	080019d7 	.word	0x080019d7
 80018b4:	080019d7 	.word	0x080019d7
 80018b8:	080019d7 	.word	0x080019d7
 80018bc:	080019d7 	.word	0x080019d7
 80018c0:	080019d7 	.word	0x080019d7
 80018c4:	080019d7 	.word	0x080019d7
 80018c8:	080019d7 	.word	0x080019d7
 80018cc:	080019d7 	.word	0x080019d7
 80018d0:	080019d7 	.word	0x080019d7
 80018d4:	080019d7 	.word	0x080019d7
 80018d8:	080019d7 	.word	0x080019d7
 80018dc:	080019d7 	.word	0x080019d7
 80018e0:	08001989 	.word	0x08001989
	{
		case pantallaMainMenu_part1: printCursor(_indexes[cont_item_PrinMenu]);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	3304      	adds	r3, #4
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 f8c1 	bl	8001a74 <printCursor>
		break;
 80018f2:	e073      	b.n	80019dc <updateCursor+0x194>

		case pantallaMainMenu_part2: printCursor(_indexes[cont_item_PrinMenu]);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	3304      	adds	r3, #4
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 f8b9 	bl	8001a74 <printCursor>
		break;
 8001902:	e06b      	b.n	80019dc <updateCursor+0x194>

		case pantallaSubMenuExtrusores: printCursor(_indexes[cont_item_SubMenuExtrusores]);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	3308      	adds	r3, #8
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	4618      	mov	r0, r3
 800190e:	f000 f8b1 	bl	8001a74 <printCursor>
		break;
 8001912:	e063      	b.n	80019dc <updateCursor+0x194>

		case pantallaSubMenuColectoresFil:	printCursor(_indexes[cont_item_SubMenuColectores]);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	330c      	adds	r3, #12
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	4618      	mov	r0, r3
 800191e:	f000 f8a9 	bl	8001a74 <printCursor>
		break;
 8001922:	e05b      	b.n	80019dc <updateCursor+0x194>

		case pantallaSubMenuAlarmas:
			printCursor(_indexes[cont_item_SubMenuAlarmas]);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3310      	adds	r3, #16
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4618      	mov	r0, r3
 800192e:	f000 f8a1 	bl	8001a74 <printCursor>
			if(_petFilConv -> lightAlarm_state == true)
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	785b      	ldrb	r3, [r3, #1]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d006      	beq.n	8001948 <updateCursor+0x100>
			{
				lcd_send_cmd(XC_LINE2_LCD);
 800193a:	20d1      	movs	r0, #209	; 0xd1
 800193c:	f7fe fefa 	bl	8000734 <lcd_send_cmd>
				lcd_send_string("X");
 8001940:	4828      	ldr	r0, [pc, #160]	; (80019e4 <updateCursor+0x19c>)
 8001942:	f7fe ff91 	bl	8000868 <lcd_send_string>
 8001946:	e005      	b.n	8001954 <updateCursor+0x10c>
			}
			else
			{
				lcd_send_cmd(XC_LINE2_LCD);
 8001948:	20d1      	movs	r0, #209	; 0xd1
 800194a:	f7fe fef3 	bl	8000734 <lcd_send_cmd>
				lcd_send_string(" ");
 800194e:	4826      	ldr	r0, [pc, #152]	; (80019e8 <updateCursor+0x1a0>)
 8001950:	f7fe ff8a 	bl	8000868 <lcd_send_string>
			}

			if(_petFilConv -> soundAlarm_state == true)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d006      	beq.n	800196a <updateCursor+0x122>
			{
				lcd_send_cmd(XC_LINE3_LCD);
 800195c:	20a5      	movs	r0, #165	; 0xa5
 800195e:	f7fe fee9 	bl	8000734 <lcd_send_cmd>
				lcd_send_string("X");
 8001962:	4820      	ldr	r0, [pc, #128]	; (80019e4 <updateCursor+0x19c>)
 8001964:	f7fe ff80 	bl	8000868 <lcd_send_string>
			else
			{
				lcd_send_cmd(XC_LINE3_LCD);
				lcd_send_string(" ");
			}
		break;
 8001968:	e038      	b.n	80019dc <updateCursor+0x194>
				lcd_send_cmd(XC_LINE3_LCD);
 800196a:	20a5      	movs	r0, #165	; 0xa5
 800196c:	f7fe fee2 	bl	8000734 <lcd_send_cmd>
				lcd_send_string(" ");
 8001970:	481d      	ldr	r0, [pc, #116]	; (80019e8 <updateCursor+0x1a0>)
 8001972:	f7fe ff79 	bl	8000868 <lcd_send_string>
		break;
 8001976:	e031      	b.n	80019dc <updateCursor+0x194>

		case pantallaSubMenuHistorial: printCursor(_indexes[cont_item_SubMenuHistorial]);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	3314      	adds	r3, #20
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	4618      	mov	r0, r3
 8001982:	f000 f877 	bl	8001a74 <printCursor>
		break;
 8001986:	e029      	b.n	80019dc <updateCursor+0x194>

		case pantallaSubMenuSelVelocidadColFil:
			printCursor(_indexes[cont_item_SubMenuSelVelCol]);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	331c      	adds	r3, #28
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	4618      	mov	r0, r3
 8001992:	f000 f86f 	bl	8001a74 <printCursor>
			if(*_vel_col == APAGADO)	printX(1);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d103      	bne.n	80019a6 <updateCursor+0x15e>
 800199e:	2001      	movs	r0, #1
 80019a0:	f000 f824 	bl	80019ec <printX>
			else if(*_vel_col == VELOCIDAD_1)	printX(2);
			else if(*_vel_col == VELOCIDAD_2)	printX(3);
			else if(*_vel_col == VELOCIDAD_3)	printX(4);
		break;
 80019a4:	e019      	b.n	80019da <updateCursor+0x192>
			else if(*_vel_col == VELOCIDAD_1)	printX(2);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d103      	bne.n	80019b6 <updateCursor+0x16e>
 80019ae:	2002      	movs	r0, #2
 80019b0:	f000 f81c 	bl	80019ec <printX>
		break;
 80019b4:	e011      	b.n	80019da <updateCursor+0x192>
			else if(*_vel_col == VELOCIDAD_2)	printX(3);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d103      	bne.n	80019c6 <updateCursor+0x17e>
 80019be:	2003      	movs	r0, #3
 80019c0:	f000 f814 	bl	80019ec <printX>
		break;
 80019c4:	e009      	b.n	80019da <updateCursor+0x192>
			else if(*_vel_col == VELOCIDAD_3)	printX(4);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d105      	bne.n	80019da <updateCursor+0x192>
 80019ce:	2004      	movs	r0, #4
 80019d0:	f000 f80c 	bl	80019ec <printX>
		break;
 80019d4:	e001      	b.n	80019da <updateCursor+0x192>

		default: break;
 80019d6:	bf00      	nop
 80019d8:	e000      	b.n	80019dc <updateCursor+0x194>
		break;
 80019da:	bf00      	nop
	}
}
 80019dc:	bf00      	nop
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	08005b2c 	.word	0x08005b2c
 80019e8:	08005b30 	.word	0x08005b30

080019ec <printX>:
  }
}
*/

void printX(uint8_t i)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
	lcd_send_cmd(XC_LINE1_LCD);
 80019f6:	2091      	movs	r0, #145	; 0x91
 80019f8:	f7fe fe9c 	bl	8000734 <lcd_send_cmd>
	lcd_send_string(" ");
 80019fc:	481b      	ldr	r0, [pc, #108]	; (8001a6c <printX+0x80>)
 80019fe:	f7fe ff33 	bl	8000868 <lcd_send_string>
	lcd_send_cmd(XC_LINE2_LCD);
 8001a02:	20d1      	movs	r0, #209	; 0xd1
 8001a04:	f7fe fe96 	bl	8000734 <lcd_send_cmd>
	lcd_send_string(" ");
 8001a08:	4818      	ldr	r0, [pc, #96]	; (8001a6c <printX+0x80>)
 8001a0a:	f7fe ff2d 	bl	8000868 <lcd_send_string>
	lcd_send_cmd(XC_LINE3_LCD);
 8001a0e:	20a5      	movs	r0, #165	; 0xa5
 8001a10:	f7fe fe90 	bl	8000734 <lcd_send_cmd>
	lcd_send_string(" ");
 8001a14:	4815      	ldr	r0, [pc, #84]	; (8001a6c <printX+0x80>)
 8001a16:	f7fe ff27 	bl	8000868 <lcd_send_string>
	lcd_send_cmd(XC_LINE4_LCD);
 8001a1a:	20e5      	movs	r0, #229	; 0xe5
 8001a1c:	f7fe fe8a 	bl	8000734 <lcd_send_cmd>
	lcd_send_string(" ");
 8001a20:	4812      	ldr	r0, [pc, #72]	; (8001a6c <printX+0x80>)
 8001a22:	f7fe ff21 	bl	8000868 <lcd_send_string>

	if(i == 1)	lcd_send_cmd(XC_LINE1_LCD);
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d103      	bne.n	8001a34 <printX+0x48>
 8001a2c:	2091      	movs	r0, #145	; 0x91
 8001a2e:	f7fe fe81 	bl	8000734 <lcd_send_cmd>
 8001a32:	e013      	b.n	8001a5c <printX+0x70>
	else if(i == 2)	lcd_send_cmd(XC_LINE2_LCD);
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d103      	bne.n	8001a42 <printX+0x56>
 8001a3a:	20d1      	movs	r0, #209	; 0xd1
 8001a3c:	f7fe fe7a 	bl	8000734 <lcd_send_cmd>
 8001a40:	e00c      	b.n	8001a5c <printX+0x70>
	else if(i == 3)	lcd_send_cmd(XC_LINE3_LCD);
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d103      	bne.n	8001a50 <printX+0x64>
 8001a48:	20a5      	movs	r0, #165	; 0xa5
 8001a4a:	f7fe fe73 	bl	8000734 <lcd_send_cmd>
 8001a4e:	e005      	b.n	8001a5c <printX+0x70>
	else if(i == 4)	lcd_send_cmd(XC_LINE4_LCD);
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d102      	bne.n	8001a5c <printX+0x70>
 8001a56:	20e5      	movs	r0, #229	; 0xe5
 8001a58:	f7fe fe6c 	bl	8000734 <lcd_send_cmd>
	lcd_send_string("X");
 8001a5c:	4804      	ldr	r0, [pc, #16]	; (8001a70 <printX+0x84>)
 8001a5e:	f7fe ff03 	bl	8000868 <lcd_send_string>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	08005b30 	.word	0x08005b30
 8001a70:	08005b2c 	.word	0x08005b2c

08001a74 <printCursor>:

void printCursor(uint8_t index)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
	char *cursor[] = {">"};
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <printCursor+0x84>)
 8001a80:	60fb      	str	r3, [r7, #12]

	switch(index)
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	2b06      	cmp	r3, #6
 8001a86:	d82d      	bhi.n	8001ae4 <printCursor+0x70>
 8001a88:	a201      	add	r2, pc, #4	; (adr r2, 8001a90 <printCursor+0x1c>)
 8001a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8e:	bf00      	nop
 8001a90:	08001aad 	.word	0x08001aad
 8001a94:	08001ab5 	.word	0x08001ab5
 8001a98:	08001abd 	.word	0x08001abd
 8001a9c:	08001ac5 	.word	0x08001ac5
 8001aa0:	08001acd 	.word	0x08001acd
 8001aa4:	08001ad5 	.word	0x08001ad5
 8001aa8:	08001add 	.word	0x08001add
	{
		case 0:	lcd_send_cmd(C_LINE1_LCD);	//primera linea
 8001aac:	2093      	movs	r0, #147	; 0x93
 8001aae:	f7fe fe41 	bl	8000734 <lcd_send_cmd>
		break;
 8001ab2:	e018      	b.n	8001ae6 <printCursor+0x72>

		case 1:	lcd_send_cmd(C_LINE2_LCD);	//segunda linea
 8001ab4:	20d3      	movs	r0, #211	; 0xd3
 8001ab6:	f7fe fe3d 	bl	8000734 <lcd_send_cmd>
		break;
 8001aba:	e014      	b.n	8001ae6 <printCursor+0x72>

		case 2:	lcd_send_cmd(C_LINE3_LCD);	//tercera linea
 8001abc:	20a7      	movs	r0, #167	; 0xa7
 8001abe:	f7fe fe39 	bl	8000734 <lcd_send_cmd>
		break;
 8001ac2:	e010      	b.n	8001ae6 <printCursor+0x72>

		case 3:	lcd_send_cmd(C_LINE4_LCD);	//cuarta linea
 8001ac4:	20e7      	movs	r0, #231	; 0xe7
 8001ac6:	f7fe fe35 	bl	8000734 <lcd_send_cmd>
		break;
 8001aca:	e00c      	b.n	8001ae6 <printCursor+0x72>

		case 4:	lcd_send_cmd(C_LINE1_LCD);	//primer linea
 8001acc:	2093      	movs	r0, #147	; 0x93
 8001ace:	f7fe fe31 	bl	8000734 <lcd_send_cmd>
			break;
 8001ad2:	e008      	b.n	8001ae6 <printCursor+0x72>

		case 5:	lcd_send_cmd(C_LINE2_LCD);	//segunda linea
 8001ad4:	20d3      	movs	r0, #211	; 0xd3
 8001ad6:	f7fe fe2d 	bl	8000734 <lcd_send_cmd>
			break;
 8001ada:	e004      	b.n	8001ae6 <printCursor+0x72>

		case 6:	lcd_send_cmd(C_LINE3_LCD);	//tercera linea
 8001adc:	20a7      	movs	r0, #167	; 0xa7
 8001ade:	f7fe fe29 	bl	8000734 <lcd_send_cmd>
			break;
 8001ae2:	e000      	b.n	8001ae6 <printCursor+0x72>

		default: break;
 8001ae4:	bf00      	nop
	}

	lcd_send_string(cursor[0]);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe febd 	bl	8000868 <lcd_send_string>
}
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	08005b34 	.word	0x08005b34

08001afc <clearAllCursor>:

void clearAllCursor(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
	char *char_vacio[] = {" "};
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <clearAllCursor+0x4c>)
 8001b04:	607b      	str	r3, [r7, #4]

	lcd_send_cmd(C_LINE1_LCD);	//primer linea
 8001b06:	2093      	movs	r0, #147	; 0x93
 8001b08:	f7fe fe14 	bl	8000734 <lcd_send_cmd>
	lcd_send_string(char_vacio[0]);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe feaa 	bl	8000868 <lcd_send_string>
	lcd_send_cmd(C_LINE2_LCD);	//segunda linea
 8001b14:	20d3      	movs	r0, #211	; 0xd3
 8001b16:	f7fe fe0d 	bl	8000734 <lcd_send_cmd>
	lcd_send_string(char_vacio[0]);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fea3 	bl	8000868 <lcd_send_string>
	lcd_send_cmd(C_LINE3_LCD);	//tercera linea
 8001b22:	20a7      	movs	r0, #167	; 0xa7
 8001b24:	f7fe fe06 	bl	8000734 <lcd_send_cmd>
	lcd_send_string(char_vacio[0]);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fe9c 	bl	8000868 <lcd_send_string>
	lcd_send_cmd(C_LINE4_LCD);	//cuarta linea
 8001b30:	20e7      	movs	r0, #231	; 0xe7
 8001b32:	f7fe fdff 	bl	8000734 <lcd_send_cmd>
	lcd_send_string(char_vacio[0]);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe fe95 	bl	8000868 <lcd_send_string>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	08005b30 	.word	0x08005b30

08001b4c <printScreen>:

void printScreen(char *screen[])
{
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	int reg_lines[LINES] = {
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <printScreen+0x5c>)
 8001b56:	f107 040c 	add.w	r4, r7, #12
 8001b5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					0x80|0x40,
					0x80|0x14,
					0x80|0x54
				};

	clearScreen();
 8001b60:	f000 f824 	bl	8001bac <clearScreen>
	  for(int i = 0 ; i < LINES ; i++)
 8001b64:	2300      	movs	r3, #0
 8001b66:	61fb      	str	r3, [r7, #28]
 8001b68:	e015      	b.n	8001b96 <printScreen+0x4a>
	  {
		  lcd_send_cmd(reg_lines[i]);
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	f107 0220 	add.w	r2, r7, #32
 8001b72:	4413      	add	r3, r2
 8001b74:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fdda 	bl	8000734 <lcd_send_cmd>
		  lcd_send_string(screen[i]);
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	4413      	add	r3, r2
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fe6c 	bl	8000868 <lcd_send_string>
	  for(int i = 0 ; i < LINES ; i++)
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	3301      	adds	r3, #1
 8001b94:	61fb      	str	r3, [r7, #28]
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	dde6      	ble.n	8001b6a <printScreen+0x1e>
	  }
}
 8001b9c:	bf00      	nop
 8001b9e:	bf00      	nop
 8001ba0:	3724      	adds	r7, #36	; 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd90      	pop	{r4, r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	08005ae0 	.word	0x08005ae0

08001bac <clearScreen>:

void clearScreen(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
	  lcd_send_cmd (CLEAR_LCD);  // clear display
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f7fe fdbf 	bl	8000734 <lcd_send_cmd>
	  HAL_Delay(100);
 8001bb6:	2064      	movs	r0, #100	; 0x64
 8001bb8:	f000 fb92 	bl	80022e0 <HAL_Delay>
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <ControlMotor>:

// *********** funciones para manejo de MOTOR 1 *****************

void ControlMotor(PETfilConv *_petFilConv)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	if(_petFilConv -> col_state)	HAL_GPIO_WritePin(GPIOA, RESET_MOTOR1_Pin, GPIO_PIN_SET);	//si RESET_MOTOR == 1, el motor se habilita
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	789b      	ldrb	r3, [r3, #2]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <ControlMotor+0x1c>
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	4806      	ldr	r0, [pc, #24]	; (8001bf0 <ControlMotor+0x30>)
 8001bd6:	f001 fc00 	bl	80033da <HAL_GPIO_WritePin>
	else						HAL_GPIO_WritePin(GPIOA, RESET_MOTOR1_Pin, GPIO_PIN_RESET);	//si RESET_MOTOR == 0, el motor se deshabilita
}
 8001bda:	e004      	b.n	8001be6 <ControlMotor+0x26>
	else						HAL_GPIO_WritePin(GPIOA, RESET_MOTOR1_Pin, GPIO_PIN_RESET);	//si RESET_MOTOR == 0, el motor se deshabilita
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2101      	movs	r1, #1
 8001be0:	4803      	ldr	r0, [pc, #12]	; (8001bf0 <ControlMotor+0x30>)
 8001be2:	f001 fbfa 	bl	80033da <HAL_GPIO_WritePin>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40010800 	.word	0x40010800

08001bf4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

	//Fclk = 56MHz / prescaler = 56000-1 / autoreload = 5-1 (VELOCIDAD 3: 500 mm/min)
	//Fclk = 56MHz / prescaler = 56000-1 / autoreload = 6-1 (VELOCIDAD 2: 400 mm/min)
	//Fclk = 56MHz / prescaler = 56000-1 / autoreload = 7-1 (VELOCIDAD 1: 300 mm/min)

	if(htim->Instance == TIM2)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c04:	d151      	bne.n	8001caa <HAL_TIM_PeriodElapsedCallback+0xb6>
	{
		if(g_velocidad_Col1 != previousVel_Col1)
 8001c06:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d046      	beq.n	8001ca2 <HAL_TIM_PeriodElapsedCallback+0xae>
		{
			switch(g_velocidad_Col1)
 8001c14:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d02a      	beq.n	8001c72 <HAL_TIM_PeriodElapsedCallback+0x7e>
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d83a      	bhi.n	8001c96 <HAL_TIM_PeriodElapsedCallback+0xa2>
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d002      	beq.n	8001c2a <HAL_TIM_PeriodElapsedCallback+0x36>
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d012      	beq.n	8001c4e <HAL_TIM_PeriodElapsedCallback+0x5a>
					__HAL_TIM_SET_COUNTER(htim, 0);
					__HAL_TIM_SET_AUTORELOAD(htim, 5-1);
					HAL_TIM_Base_Start_IT(htim);
					break;

				default: break;
 8001c28:	e035      	b.n	8001c96 <HAL_TIM_PeriodElapsedCallback+0xa2>
					HAL_TIM_Base_Stop_IT(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f002 fdc0 	bl	80047b0 <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_SET_COUNTER(htim, 0);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2200      	movs	r2, #0
 8001c36:	625a      	str	r2, [r3, #36]	; 0x24
					__HAL_TIM_SET_AUTORELOAD(htim, 7-1);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2206      	movs	r2, #6
 8001c3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2206      	movs	r2, #6
 8001c44:	60da      	str	r2, [r3, #12]
					HAL_TIM_Base_Start_IT(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f002 fd66 	bl	8004718 <HAL_TIM_Base_Start_IT>
					break;
 8001c4c:	e024      	b.n	8001c98 <HAL_TIM_PeriodElapsedCallback+0xa4>
					HAL_TIM_Base_Stop_IT(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f002 fdae 	bl	80047b0 <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_SET_COUNTER(htim, 0);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	625a      	str	r2, [r3, #36]	; 0x24
					__HAL_TIM_SET_AUTORELOAD(htim, 6-1);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2205      	movs	r2, #5
 8001c62:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2205      	movs	r2, #5
 8001c68:	60da      	str	r2, [r3, #12]
					HAL_TIM_Base_Start_IT(htim);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f002 fd54 	bl	8004718 <HAL_TIM_Base_Start_IT>
					break;
 8001c70:	e012      	b.n	8001c98 <HAL_TIM_PeriodElapsedCallback+0xa4>
					HAL_TIM_Base_Stop_IT(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f002 fd9c 	bl	80047b0 <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_SET_COUNTER(htim, 0);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	625a      	str	r2, [r3, #36]	; 0x24
					__HAL_TIM_SET_AUTORELOAD(htim, 5-1);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2204      	movs	r2, #4
 8001c86:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	60da      	str	r2, [r3, #12]
					HAL_TIM_Base_Start_IT(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f002 fd42 	bl	8004718 <HAL_TIM_Base_Start_IT>
					break;
 8001c94:	e000      	b.n	8001c98 <HAL_TIM_PeriodElapsedCallback+0xa4>
				default: break;
 8001c96:	bf00      	nop
			}

			previousVel_Col1 = g_velocidad_Col1;
 8001c98:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001ca0:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_TogglePin(GPIOA, PASOS_MOTOR1_Pin);
 8001ca2:	2104      	movs	r1, #4
 8001ca4:	4805      	ldr	r0, [pc, #20]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001ca6:	f001 fbb0 	bl	800340a <HAL_GPIO_TogglePin>
	}
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000104 	.word	0x20000104
 8001cb8:	20000098 	.word	0x20000098
 8001cbc:	40010800 	.word	0x40010800

08001cc0 <getTemp>:

// *********** funciones para manejo de PID 1 *****************

float_t getTemp(void)
{
 8001cc0:	b5b0      	push	{r4, r5, r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
	//	float_t termistorRes = 0;
	//	float_t steinhart = 0;
		static float_t factor_cor2 = 10;
		static float_t Temp_C = 0;
		float_t adc_val_average = 0;
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
		uint32_t adc_val = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	607b      	str	r3, [r7, #4]

		for(uint8_t i = 0 ; i < N_SAMPLES_ADC ; i++)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	72fb      	strb	r3, [r7, #11]
 8001cd4:	e013      	b.n	8001cfe <getTemp+0x3e>
		{
			HAL_ADC_Start_DMA(&hadc1, &adc_val, 1);	//star in DMA mode and we are reading only 1 channel or 1 word
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	2201      	movs	r2, #1
 8001cda:	4619      	mov	r1, r3
 8001cdc:	484e      	ldr	r0, [pc, #312]	; (8001e18 <getTemp+0x158>)
 8001cde:	f000 fbfb 	bl	80024d8 <HAL_ADC_Start_DMA>
			adc_val_average += adc_val;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe fae7 	bl	80002b8 <__aeabi_ui2f>
 8001cea:	4603      	mov	r3, r0
 8001cec:	4619      	mov	r1, r3
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f7fe fa32 	bl	8000158 <__addsf3>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0 ; i < N_SAMPLES_ADC ; i++)
 8001cf8:	7afb      	ldrb	r3, [r7, #11]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	72fb      	strb	r3, [r7, #11]
 8001cfe:	7afb      	ldrb	r3, [r7, #11]
 8001d00:	2b0f      	cmp	r3, #15
 8001d02:	d9e8      	bls.n	8001cd6 <getTemp+0x16>
		}
		adc_val_average = adc_val_average/N_SAMPLES_ADC;	//promedio
 8001d04:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f7fe fbe1 	bl	80004d0 <__aeabi_fdiv>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	60fb      	str	r3, [r7, #12]
			Temp_K = (T0 * B_param) / (T0 * log(R_NTC / 130000) + B_param);
			Temp_C = Temp_K - 273.15;
			return	Temp_C;
	*/

			while(tempNTC100K[i].adc < adc_val_average) i++;
 8001d12:	e004      	b.n	8001d1e <getTemp+0x5e>
 8001d14:	4b41      	ldr	r3, [pc, #260]	; (8001e1c <getTemp+0x15c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	4a40      	ldr	r2, [pc, #256]	; (8001e1c <getTemp+0x15c>)
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	4b3f      	ldr	r3, [pc, #252]	; (8001e1c <getTemp+0x15c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a3f      	ldr	r2, [pc, #252]	; (8001e20 <getTemp+0x160>)
 8001d24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f7fe fcd8 	bl	80006e0 <__aeabi_fcmpgt>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1ee      	bne.n	8001d14 <getTemp+0x54>

			if(i == NUMTEMPS)	Temp_C = tempNTC100K[i-1].temp;
 8001d36:	4b39      	ldr	r3, [pc, #228]	; (8001e1c <getTemp+0x15c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b19      	cmp	r3, #25
 8001d3c:	d109      	bne.n	8001d52 <getTemp+0x92>
 8001d3e:	4b37      	ldr	r3, [pc, #220]	; (8001e1c <getTemp+0x15c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	4a36      	ldr	r2, [pc, #216]	; (8001e20 <getTemp+0x160>)
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4413      	add	r3, r2
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	4a35      	ldr	r2, [pc, #212]	; (8001e24 <getTemp+0x164>)
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	e054      	b.n	8001dfc <getTemp+0x13c>
			else if(i == 0) Temp_C = tempNTC100K[i].temp;
 8001d52:	4b32      	ldr	r3, [pc, #200]	; (8001e1c <getTemp+0x15c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d108      	bne.n	8001d6c <getTemp+0xac>
 8001d5a:	4b30      	ldr	r3, [pc, #192]	; (8001e1c <getTemp+0x15c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a30      	ldr	r2, [pc, #192]	; (8001e20 <getTemp+0x160>)
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4413      	add	r3, r2
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	4a2f      	ldr	r2, [pc, #188]	; (8001e24 <getTemp+0x164>)
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e047      	b.n	8001dfc <getTemp+0x13c>
			else
			{
				Temp_C = tempNTC100K[i-1].temp + (adc_val_average - tempNTC100K[i-1].adc) * (float)(tempNTC100K[i].temp - tempNTC100K[i-1].temp) / (float)(tempNTC100K[i].adc - tempNTC100K[i-1].adc);
 8001d6c:	4b2b      	ldr	r3, [pc, #172]	; (8001e1c <getTemp+0x15c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	4a2b      	ldr	r2, [pc, #172]	; (8001e20 <getTemp+0x160>)
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	4413      	add	r3, r2
 8001d78:	685c      	ldr	r4, [r3, #4]
 8001d7a:	4b28      	ldr	r3, [pc, #160]	; (8001e1c <getTemp+0x15c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	4a27      	ldr	r2, [pc, #156]	; (8001e20 <getTemp+0x160>)
 8001d82:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001d86:	4619      	mov	r1, r3
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f7fe f9e3 	bl	8000154 <__aeabi_fsub>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	461d      	mov	r5, r3
 8001d92:	4b22      	ldr	r3, [pc, #136]	; (8001e1c <getTemp+0x15c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a22      	ldr	r2, [pc, #136]	; (8001e20 <getTemp+0x160>)
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	4b1f      	ldr	r3, [pc, #124]	; (8001e1c <getTemp+0x15c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	491e      	ldr	r1, [pc, #120]	; (8001e20 <getTemp+0x160>)
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	440b      	add	r3, r1
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f7fe f9d0 	bl	8000154 <__aeabi_fsub>
 8001db4:	4603      	mov	r3, r0
 8001db6:	4619      	mov	r1, r3
 8001db8:	4628      	mov	r0, r5
 8001dba:	f7fe fad5 	bl	8000368 <__aeabi_fmul>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461d      	mov	r5, r3
 8001dc2:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <getTemp+0x15c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a16      	ldr	r2, [pc, #88]	; (8001e20 <getTemp+0x160>)
 8001dc8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001dcc:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <getTemp+0x15c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	4913      	ldr	r1, [pc, #76]	; (8001e20 <getTemp+0x160>)
 8001dd4:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4610      	mov	r0, r2
 8001ddc:	f7fe f9ba 	bl	8000154 <__aeabi_fsub>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4619      	mov	r1, r3
 8001de4:	4628      	mov	r0, r5
 8001de6:	f7fe fb73 	bl	80004d0 <__aeabi_fdiv>
 8001dea:	4603      	mov	r3, r0
 8001dec:	4619      	mov	r1, r3
 8001dee:	4620      	mov	r0, r4
 8001df0:	f7fe f9b2 	bl	8000158 <__addsf3>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <getTemp+0x164>)
 8001dfa:	601a      	str	r2, [r3, #0]
				//aux = (tempNTC100K[i].temp - tempNTC100K[i-1].temp) / ( tempNTC100K[i].adc - tempNTC100K[i-1].adc);
				//tempC = aux * (adc_val - tempNTC100K[i].adc) + tempNTC100K[i].temp;
			}

			//tempCint = (uint32_t)Temp_C;
			return	(Temp_C - factor_cor2);
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <getTemp+0x164>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a09      	ldr	r2, [pc, #36]	; (8001e28 <getTemp+0x168>)
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	4611      	mov	r1, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe f9a4 	bl	8000154 <__aeabi_fsub>
 8001e0c:	4603      	mov	r3, r0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bdb0      	pop	{r4, r5, r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000178 	.word	0x20000178
 8001e1c:	20000094 	.word	0x20000094
 8001e20:	08005b48 	.word	0x08005b48
 8001e24:	20000108 	.word	0x20000108
 8001e28:	20000004 	.word	0x20000004

08001e2c <Control_ON_OFF>:

void Control_ON_OFF(PETfilConv *_petFilConv)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	static uint32_t previousTemp = 0;
	//static uint32_t PID_value = 0;
	//char aux[10];

	_petFilConv -> currentExtTemp = (uint32_t)getTemp();
 8001e34:	f7ff ff44 	bl	8001cc0 <getTemp>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fc5a 	bl	80006f4 <__aeabi_f2uiz>
 8001e40:	4602      	mov	r2, r0
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	605a      	str	r2, [r3, #4]

	if(previousTemp != _petFilConv -> currentExtTemp)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <Control_ON_OFF+0x60>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d017      	beq.n	8001e82 <Control_ON_OFF+0x56>
	{
		previousTemp = _petFilConv -> currentExtTemp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4a0d      	ldr	r2, [pc, #52]	; (8001e8c <Control_ON_OFF+0x60>)
 8001e58:	6013      	str	r3, [r2, #0]
		if((_petFilConv -> currentExtTemp) < ((_petFilConv -> setExtTemp) - 3))	HAL_GPIO_WritePin(GPIOB, CALENTADOR1_Pin, GPIO_PIN_RESET); //PID_value = 255;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	3b03      	subs	r3, #3
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d206      	bcs.n	8001e76 <Control_ON_OFF+0x4a>
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e6e:	4808      	ldr	r0, [pc, #32]	; (8001e90 <Control_ON_OFF+0x64>)
 8001e70:	f001 fab3 	bl	80033da <HAL_GPIO_WritePin>
		//updateLCD();
//		lcd_send_cmd(0x80|0x54);
//		sprintf(aux," %lu C     ",PID_value);
//		lcd_send_string(aux);
	}
}
 8001e74:	e005      	b.n	8001e82 <Control_ON_OFF+0x56>
		else	HAL_GPIO_WritePin(GPIOB, CALENTADOR1_Pin, GPIO_PIN_SET);	//PID_value = 0;
 8001e76:	2201      	movs	r2, #1
 8001e78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e7c:	4804      	ldr	r0, [pc, #16]	; (8001e90 <Control_ON_OFF+0x64>)
 8001e7e:	f001 faac 	bl	80033da <HAL_GPIO_WritePin>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	2000010c 	.word	0x2000010c
 8001e90:	40010c00 	.word	0x40010c00

08001e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e98:	b672      	cpsid	i
}
 8001e9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e9c:	e7fe      	b.n	8001e9c <Error_Handler+0x8>
	...

08001ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <HAL_MspInit+0x5c>)
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	4a14      	ldr	r2, [pc, #80]	; (8001efc <HAL_MspInit+0x5c>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6193      	str	r3, [r2, #24]
 8001eb2:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_MspInit+0x5c>)
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <HAL_MspInit+0x5c>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	4a0e      	ldr	r2, [pc, #56]	; (8001efc <HAL_MspInit+0x5c>)
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	61d3      	str	r3, [r2, #28]
 8001eca:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <HAL_MspInit+0x5c>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <HAL_MspInit+0x60>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <HAL_MspInit+0x60>)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40010000 	.word	0x40010000

08001f04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0c:	f107 0310 	add.w	r3, r7, #16
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a28      	ldr	r2, [pc, #160]	; (8001fc0 <HAL_ADC_MspInit+0xbc>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d149      	bne.n	8001fb8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f24:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <HAL_ADC_MspInit+0xc0>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	4a26      	ldr	r2, [pc, #152]	; (8001fc4 <HAL_ADC_MspInit+0xc0>)
 8001f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f2e:	6193      	str	r3, [r2, #24]
 8001f30:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <HAL_ADC_MspInit+0xc0>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3c:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <HAL_ADC_MspInit+0xc0>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	4a20      	ldr	r2, [pc, #128]	; (8001fc4 <HAL_ADC_MspInit+0xc0>)
 8001f42:	f043 0304 	orr.w	r3, r3, #4
 8001f46:	6193      	str	r3, [r2, #24]
 8001f48:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <HAL_ADC_MspInit+0xc0>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f54:	2302      	movs	r3, #2
 8001f56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5c:	f107 0310 	add.w	r3, r7, #16
 8001f60:	4619      	mov	r1, r3
 8001f62:	4819      	ldr	r0, [pc, #100]	; (8001fc8 <HAL_ADC_MspInit+0xc4>)
 8001f64:	f001 f8a8 	bl	80030b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001f68:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <HAL_ADC_MspInit+0xc8>)
 8001f6a:	4a19      	ldr	r2, [pc, #100]	; (8001fd0 <HAL_ADC_MspInit+0xcc>)
 8001f6c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f6e:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <HAL_ADC_MspInit+0xc8>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f74:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <HAL_ADC_MspInit+0xc8>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f7a:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <HAL_ADC_MspInit+0xc8>)
 8001f7c:	2280      	movs	r2, #128	; 0x80
 8001f7e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_ADC_MspInit+0xc8>)
 8001f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f86:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f88:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <HAL_ADC_MspInit+0xc8>)
 8001f8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f8e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f90:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <HAL_ADC_MspInit+0xc8>)
 8001f92:	2220      	movs	r2, #32
 8001f94:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f96:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <HAL_ADC_MspInit+0xc8>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f9c:	480b      	ldr	r0, [pc, #44]	; (8001fcc <HAL_ADC_MspInit+0xc8>)
 8001f9e:	f000 fe9d 	bl	8002cdc <HAL_DMA_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001fa8:	f7ff ff74 	bl	8001e94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a07      	ldr	r2, [pc, #28]	; (8001fcc <HAL_ADC_MspInit+0xc8>)
 8001fb0:	621a      	str	r2, [r3, #32]
 8001fb2:	4a06      	ldr	r2, [pc, #24]	; (8001fcc <HAL_ADC_MspInit+0xc8>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fb8:	bf00      	nop
 8001fba:	3720      	adds	r7, #32
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40012400 	.word	0x40012400
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40010800 	.word	0x40010800
 8001fcc:	200001ac 	.word	0x200001ac
 8001fd0:	40020008 	.word	0x40020008

08001fd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08a      	sub	sp, #40	; 0x28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a1e      	ldr	r2, [pc, #120]	; (8002068 <HAL_I2C_MspInit+0x94>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d134      	bne.n	800205e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	; (800206c <HAL_I2C_MspInit+0x98>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	4a1c      	ldr	r2, [pc, #112]	; (800206c <HAL_I2C_MspInit+0x98>)
 8001ffa:	f043 0308 	orr.w	r3, r3, #8
 8001ffe:	6193      	str	r3, [r2, #24]
 8002000:	4b1a      	ldr	r3, [pc, #104]	; (800206c <HAL_I2C_MspInit+0x98>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800200c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002012:	2312      	movs	r3, #18
 8002014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002016:	2301      	movs	r3, #1
 8002018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800201a:	2303      	movs	r3, #3
 800201c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201e:	f107 0314 	add.w	r3, r7, #20
 8002022:	4619      	mov	r1, r3
 8002024:	4812      	ldr	r0, [pc, #72]	; (8002070 <HAL_I2C_MspInit+0x9c>)
 8002026:	f001 f847 	bl	80030b8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_I2C_MspInit+0xa0>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	f043 0302 	orr.w	r3, r3, #2
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
 8002040:	4a0c      	ldr	r2, [pc, #48]	; (8002074 <HAL_I2C_MspInit+0xa0>)
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_I2C_MspInit+0x98>)
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	4a08      	ldr	r2, [pc, #32]	; (800206c <HAL_I2C_MspInit+0x98>)
 800204c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002050:	61d3      	str	r3, [r2, #28]
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_I2C_MspInit+0x98>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800205e:	bf00      	nop
 8002060:	3728      	adds	r7, #40	; 0x28
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40005400 	.word	0x40005400
 800206c:	40021000 	.word	0x40021000
 8002070:	40010c00 	.word	0x40010c00
 8002074:	40010000 	.word	0x40010000

08002078 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002088:	d113      	bne.n	80020b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800208a:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <HAL_TIM_Base_MspInit+0x44>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <HAL_TIM_Base_MspInit+0x44>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	61d3      	str	r3, [r2, #28]
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_TIM_Base_MspInit+0x44>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	201c      	movs	r0, #28
 80020a8:	f000 fde1 	bl	8002c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020ac:	201c      	movs	r0, #28
 80020ae:	f000 fdfa 	bl	8002ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000

080020c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020c4:	e7fe      	b.n	80020c4 <NMI_Handler+0x4>

080020c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ca:	e7fe      	b.n	80020ca <HardFault_Handler+0x4>

080020cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d0:	e7fe      	b.n	80020d0 <MemManage_Handler+0x4>

080020d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d6:	e7fe      	b.n	80020d6 <BusFault_Handler+0x4>

080020d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020dc:	e7fe      	b.n	80020dc <UsageFault_Handler+0x4>

080020de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr

080020ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr

080020f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr

08002102 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002106:	f000 f8cf 	bl	80022a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002114:	4802      	ldr	r0, [pc, #8]	; (8002120 <DMA1_Channel1_IRQHandler+0x10>)
 8002116:	f000 fe9b 	bl	8002e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200001ac 	.word	0x200001ac

08002124 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002128:	4802      	ldr	r0, [pc, #8]	; (8002134 <TIM2_IRQHandler+0x10>)
 800212a:	f002 fb6f 	bl	800480c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	200001f4 	.word	0x200001f4

08002138 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800213c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002140:	f001 f97c 	bl	800343c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002144:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002148:	f001 f978 	bl	800343c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800214c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002150:	f001 f974 	bl	800343c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002154:	bf00      	nop
 8002156:	bd80      	pop	{r7, pc}

08002158 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002160:	4a14      	ldr	r2, [pc, #80]	; (80021b4 <_sbrk+0x5c>)
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <_sbrk+0x60>)
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800216c:	4b13      	ldr	r3, [pc, #76]	; (80021bc <_sbrk+0x64>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d102      	bne.n	800217a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <_sbrk+0x64>)
 8002176:	4a12      	ldr	r2, [pc, #72]	; (80021c0 <_sbrk+0x68>)
 8002178:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <_sbrk+0x64>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	429a      	cmp	r2, r3
 8002186:	d207      	bcs.n	8002198 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002188:	f002 fe88 	bl	8004e9c <__errno>
 800218c:	4603      	mov	r3, r0
 800218e:	220c      	movs	r2, #12
 8002190:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002192:	f04f 33ff 	mov.w	r3, #4294967295
 8002196:	e009      	b.n	80021ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002198:	4b08      	ldr	r3, [pc, #32]	; (80021bc <_sbrk+0x64>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800219e:	4b07      	ldr	r3, [pc, #28]	; (80021bc <_sbrk+0x64>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	4a05      	ldr	r2, [pc, #20]	; (80021bc <_sbrk+0x64>)
 80021a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021aa:	68fb      	ldr	r3, [r7, #12]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20002800 	.word	0x20002800
 80021b8:	00000400 	.word	0x00000400
 80021bc:	20000110 	.word	0x20000110
 80021c0:	20000258 	.word	0x20000258

080021c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021d0:	480c      	ldr	r0, [pc, #48]	; (8002204 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021d2:	490d      	ldr	r1, [pc, #52]	; (8002208 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021d4:	4a0d      	ldr	r2, [pc, #52]	; (800220c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d8:	e002      	b.n	80021e0 <LoopCopyDataInit>

080021da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021de:	3304      	adds	r3, #4

080021e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e4:	d3f9      	bcc.n	80021da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021e6:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021e8:	4c0a      	ldr	r4, [pc, #40]	; (8002214 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021ec:	e001      	b.n	80021f2 <LoopFillZerobss>

080021ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f0:	3204      	adds	r2, #4

080021f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f4:	d3fb      	bcc.n	80021ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021f6:	f7ff ffe5 	bl	80021c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021fa:	f002 fe55 	bl	8004ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021fe:	f7fe fb49 	bl	8000894 <main>
  bx lr
 8002202:	4770      	bx	lr
  ldr r0, =_sdata
 8002204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002208:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800220c:	08005c64 	.word	0x08005c64
  ldr r2, =_sbss
 8002210:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002214:	20000258 	.word	0x20000258

08002218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002218:	e7fe      	b.n	8002218 <ADC1_2_IRQHandler>
	...

0800221c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002220:	4b08      	ldr	r3, [pc, #32]	; (8002244 <HAL_Init+0x28>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a07      	ldr	r2, [pc, #28]	; (8002244 <HAL_Init+0x28>)
 8002226:	f043 0310 	orr.w	r3, r3, #16
 800222a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800222c:	2003      	movs	r0, #3
 800222e:	f000 fd13 	bl	8002c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002232:	2000      	movs	r0, #0
 8002234:	f000 f808 	bl	8002248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002238:	f7ff fe32 	bl	8001ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40022000 	.word	0x40022000

08002248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_InitTick+0x54>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_InitTick+0x58>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	4619      	mov	r1, r3
 800225a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800225e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002262:	fbb2 f3f3 	udiv	r3, r2, r3
 8002266:	4618      	mov	r0, r3
 8002268:	f000 fd2b 	bl	8002cc2 <HAL_SYSTICK_Config>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e00e      	b.n	8002294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b0f      	cmp	r3, #15
 800227a:	d80a      	bhi.n	8002292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800227c:	2200      	movs	r2, #0
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	f04f 30ff 	mov.w	r0, #4294967295
 8002284:	f000 fcf3 	bl	8002c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002288:	4a06      	ldr	r2, [pc, #24]	; (80022a4 <HAL_InitTick+0x5c>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	e000      	b.n	8002294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000008 	.word	0x20000008
 80022a0:	20000010 	.word	0x20000010
 80022a4:	2000000c 	.word	0x2000000c

080022a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022ac:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_IncTick+0x1c>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <HAL_IncTick+0x20>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4413      	add	r3, r2
 80022b8:	4a03      	ldr	r2, [pc, #12]	; (80022c8 <HAL_IncTick+0x20>)
 80022ba:	6013      	str	r3, [r2, #0]
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	20000010 	.word	0x20000010
 80022c8:	20000244 	.word	0x20000244

080022cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return uwTick;
 80022d0:	4b02      	ldr	r3, [pc, #8]	; (80022dc <HAL_GetTick+0x10>)
 80022d2:	681b      	ldr	r3, [r3, #0]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	20000244 	.word	0x20000244

080022e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e8:	f7ff fff0 	bl	80022cc <HAL_GetTick>
 80022ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f8:	d005      	beq.n	8002306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022fa:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <HAL_Delay+0x44>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4413      	add	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002306:	bf00      	nop
 8002308:	f7ff ffe0 	bl	80022cc <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	429a      	cmp	r2, r3
 8002316:	d8f7      	bhi.n	8002308 <HAL_Delay+0x28>
  {
  }
}
 8002318:	bf00      	nop
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000010 	.word	0x20000010

08002328 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e0be      	b.n	80024c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002354:	2b00      	cmp	r3, #0
 8002356:	d109      	bne.n	800236c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff fdcc 	bl	8001f04 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 faff 	bl	8002970 <ADC_ConversionStop_Disable>
 8002372:	4603      	mov	r3, r0
 8002374:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	2b00      	cmp	r3, #0
 8002380:	f040 8099 	bne.w	80024b6 <HAL_ADC_Init+0x18e>
 8002384:	7dfb      	ldrb	r3, [r7, #23]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f040 8095 	bne.w	80024b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002394:	f023 0302 	bic.w	r3, r3, #2
 8002398:	f043 0202 	orr.w	r2, r3, #2
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	7b1b      	ldrb	r3, [r3, #12]
 80023ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023c0:	d003      	beq.n	80023ca <HAL_ADC_Init+0xa2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d102      	bne.n	80023d0 <HAL_ADC_Init+0xa8>
 80023ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ce:	e000      	b.n	80023d2 <HAL_ADC_Init+0xaa>
 80023d0:	2300      	movs	r3, #0
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	7d1b      	ldrb	r3, [r3, #20]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d119      	bne.n	8002414 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	7b1b      	ldrb	r3, [r3, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d109      	bne.n	80023fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	3b01      	subs	r3, #1
 80023ee:	035a      	lsls	r2, r3, #13
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	e00b      	b.n	8002414 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002400:	f043 0220 	orr.w	r2, r3, #32
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	f043 0201 	orr.w	r2, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	430a      	orrs	r2, r1
 8002426:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <HAL_ADC_Init+0x1a8>)
 8002430:	4013      	ands	r3, r2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	68b9      	ldr	r1, [r7, #8]
 8002438:	430b      	orrs	r3, r1
 800243a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002444:	d003      	beq.n	800244e <HAL_ADC_Init+0x126>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d104      	bne.n	8002458 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	3b01      	subs	r3, #1
 8002454:	051b      	lsls	r3, r3, #20
 8002456:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	430a      	orrs	r2, r1
 800246a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <HAL_ADC_Init+0x1ac>)
 8002474:	4013      	ands	r3, r2
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	429a      	cmp	r2, r3
 800247a:	d10b      	bne.n	8002494 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002486:	f023 0303 	bic.w	r3, r3, #3
 800248a:	f043 0201 	orr.w	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002492:	e018      	b.n	80024c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002498:	f023 0312 	bic.w	r3, r3, #18
 800249c:	f043 0210 	orr.w	r2, r3, #16
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a8:	f043 0201 	orr.w	r2, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024b4:	e007      	b.n	80024c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	f043 0210 	orr.w	r2, r3, #16
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	ffe1f7fd 	.word	0xffe1f7fd
 80024d4:	ff1f0efe 	.word	0xff1f0efe

080024d8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a64      	ldr	r2, [pc, #400]	; (8002680 <HAL_ADC_Start_DMA+0x1a8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d004      	beq.n	80024fc <HAL_ADC_Start_DMA+0x24>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a63      	ldr	r2, [pc, #396]	; (8002684 <HAL_ADC_Start_DMA+0x1ac>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d106      	bne.n	800250a <HAL_ADC_Start_DMA+0x32>
 80024fc:	4b60      	ldr	r3, [pc, #384]	; (8002680 <HAL_ADC_Start_DMA+0x1a8>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002504:	2b00      	cmp	r3, #0
 8002506:	f040 80b3 	bne.w	8002670 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_ADC_Start_DMA+0x40>
 8002514:	2302      	movs	r3, #2
 8002516:	e0ae      	b.n	8002676 <HAL_ADC_Start_DMA+0x19e>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 f9cb 	bl	80028bc <ADC_Enable>
 8002526:	4603      	mov	r3, r0
 8002528:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800252a:	7dfb      	ldrb	r3, [r7, #23]
 800252c:	2b00      	cmp	r3, #0
 800252e:	f040 809a 	bne.w	8002666 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800253a:	f023 0301 	bic.w	r3, r3, #1
 800253e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a4e      	ldr	r2, [pc, #312]	; (8002684 <HAL_ADC_Start_DMA+0x1ac>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d105      	bne.n	800255c <HAL_ADC_Start_DMA+0x84>
 8002550:	4b4b      	ldr	r3, [pc, #300]	; (8002680 <HAL_ADC_Start_DMA+0x1a8>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d115      	bne.n	8002588 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002560:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002572:	2b00      	cmp	r3, #0
 8002574:	d026      	beq.n	80025c4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800257e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002586:	e01d      	b.n	80025c4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a39      	ldr	r2, [pc, #228]	; (8002680 <HAL_ADC_Start_DMA+0x1a8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d004      	beq.n	80025a8 <HAL_ADC_Start_DMA+0xd0>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a38      	ldr	r2, [pc, #224]	; (8002684 <HAL_ADC_Start_DMA+0x1ac>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d10d      	bne.n	80025c4 <HAL_ADC_Start_DMA+0xec>
 80025a8:	4b35      	ldr	r3, [pc, #212]	; (8002680 <HAL_ADC_Start_DMA+0x1a8>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d007      	beq.n	80025c4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d006      	beq.n	80025de <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d4:	f023 0206 	bic.w	r2, r3, #6
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	62da      	str	r2, [r3, #44]	; 0x2c
 80025dc:	e002      	b.n	80025e4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	4a25      	ldr	r2, [pc, #148]	; (8002688 <HAL_ADC_Start_DMA+0x1b0>)
 80025f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	4a24      	ldr	r2, [pc, #144]	; (800268c <HAL_ADC_Start_DMA+0x1b4>)
 80025fa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	4a23      	ldr	r2, [pc, #140]	; (8002690 <HAL_ADC_Start_DMA+0x1b8>)
 8002602:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0202 	mvn.w	r2, #2
 800260c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800261c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a18      	ldr	r0, [r3, #32]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	334c      	adds	r3, #76	; 0x4c
 8002628:	4619      	mov	r1, r3
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f000 fbaf 	bl	8002d90 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800263c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002640:	d108      	bne.n	8002654 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002650:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002652:	e00f      	b.n	8002674 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002662:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002664:	e006      	b.n	8002674 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800266e:	e001      	b.n	8002674 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002674:	7dfb      	ldrb	r3, [r7, #23]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40012400 	.word	0x40012400
 8002684:	40012800 	.word	0x40012800
 8002688:	080029f3 	.word	0x080029f3
 800268c:	08002a6f 	.word	0x08002a6f
 8002690:	08002a8b 	.word	0x08002a8b

08002694 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr

080026a6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr
	...

080026cc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80026da:	2300      	movs	r3, #0
 80026dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x20>
 80026e8:	2302      	movs	r3, #2
 80026ea:	e0dc      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x1da>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b06      	cmp	r3, #6
 80026fa:	d81c      	bhi.n	8002736 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	3b05      	subs	r3, #5
 800270e:	221f      	movs	r2, #31
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	4019      	ands	r1, r3
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	3b05      	subs	r3, #5
 8002728:	fa00 f203 	lsl.w	r2, r0, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	635a      	str	r2, [r3, #52]	; 0x34
 8002734:	e03c      	b.n	80027b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b0c      	cmp	r3, #12
 800273c:	d81c      	bhi.n	8002778 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	3b23      	subs	r3, #35	; 0x23
 8002750:	221f      	movs	r2, #31
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	4019      	ands	r1, r3
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	3b23      	subs	r3, #35	; 0x23
 800276a:	fa00 f203 	lsl.w	r2, r0, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	631a      	str	r2, [r3, #48]	; 0x30
 8002776:	e01b      	b.n	80027b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	4613      	mov	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	3b41      	subs	r3, #65	; 0x41
 800278a:	221f      	movs	r2, #31
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	4019      	ands	r1, r3
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	6818      	ldr	r0, [r3, #0]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	3b41      	subs	r3, #65	; 0x41
 80027a4:	fa00 f203 	lsl.w	r2, r0, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b09      	cmp	r3, #9
 80027b6:	d91c      	bls.n	80027f2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68d9      	ldr	r1, [r3, #12]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	4613      	mov	r3, r2
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	4413      	add	r3, r2
 80027c8:	3b1e      	subs	r3, #30
 80027ca:	2207      	movs	r2, #7
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	4019      	ands	r1, r3
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	6898      	ldr	r0, [r3, #8]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	4413      	add	r3, r2
 80027e2:	3b1e      	subs	r3, #30
 80027e4:	fa00 f203 	lsl.w	r2, r0, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	60da      	str	r2, [r3, #12]
 80027f0:	e019      	b.n	8002826 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6919      	ldr	r1, [r3, #16]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4613      	mov	r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4413      	add	r3, r2
 8002802:	2207      	movs	r2, #7
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	4019      	ands	r1, r3
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	6898      	ldr	r0, [r3, #8]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4613      	mov	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4413      	add	r3, r2
 800281a:	fa00 f203 	lsl.w	r2, r0, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b10      	cmp	r3, #16
 800282c:	d003      	beq.n	8002836 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002832:	2b11      	cmp	r3, #17
 8002834:	d132      	bne.n	800289c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a1d      	ldr	r2, [pc, #116]	; (80028b0 <HAL_ADC_ConfigChannel+0x1e4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d125      	bne.n	800288c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d126      	bne.n	800289c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800285c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b10      	cmp	r3, #16
 8002864:	d11a      	bne.n	800289c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002866:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a13      	ldr	r2, [pc, #76]	; (80028b8 <HAL_ADC_ConfigChannel+0x1ec>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	0c9a      	lsrs	r2, r3, #18
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800287c:	e002      	b.n	8002884 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	3b01      	subs	r3, #1
 8002882:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f9      	bne.n	800287e <HAL_ADC_ConfigChannel+0x1b2>
 800288a:	e007      	b.n	800289c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	f043 0220 	orr.w	r2, r3, #32
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	40012400 	.word	0x40012400
 80028b4:	20000008 	.word	0x20000008
 80028b8:	431bde83 	.word	0x431bde83

080028bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d040      	beq.n	800295c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0201 	orr.w	r2, r2, #1
 80028e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028ea:	4b1f      	ldr	r3, [pc, #124]	; (8002968 <ADC_Enable+0xac>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a1f      	ldr	r2, [pc, #124]	; (800296c <ADC_Enable+0xb0>)
 80028f0:	fba2 2303 	umull	r2, r3, r2, r3
 80028f4:	0c9b      	lsrs	r3, r3, #18
 80028f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80028f8:	e002      	b.n	8002900 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	3b01      	subs	r3, #1
 80028fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f9      	bne.n	80028fa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002906:	f7ff fce1 	bl	80022cc <HAL_GetTick>
 800290a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800290c:	e01f      	b.n	800294e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800290e:	f7ff fcdd 	bl	80022cc <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d918      	bls.n	800294e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b01      	cmp	r3, #1
 8002928:	d011      	beq.n	800294e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	f043 0210 	orr.w	r2, r3, #16
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293a:	f043 0201 	orr.w	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e007      	b.n	800295e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b01      	cmp	r3, #1
 800295a:	d1d8      	bne.n	800290e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000008 	.word	0x20000008
 800296c:	431bde83 	.word	0x431bde83

08002970 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b01      	cmp	r3, #1
 8002988:	d12e      	bne.n	80029e8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0201 	bic.w	r2, r2, #1
 8002998:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800299a:	f7ff fc97 	bl	80022cc <HAL_GetTick>
 800299e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80029a0:	e01b      	b.n	80029da <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029a2:	f7ff fc93 	bl	80022cc <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d914      	bls.n	80029da <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d10d      	bne.n	80029da <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c2:	f043 0210 	orr.w	r2, r3, #16
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ce:	f043 0201 	orr.w	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e007      	b.n	80029ea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d0dc      	beq.n	80029a2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d127      	bne.n	8002a5c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a10:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002a22:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002a26:	d115      	bne.n	8002a54 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d111      	bne.n	8002a54 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d105      	bne.n	8002a54 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4c:	f043 0201 	orr.w	r2, r3, #1
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f7ff fe1d 	bl	8002694 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002a5a:	e004      	b.n	8002a66 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	4798      	blx	r3
}
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f7ff fe12 	bl	80026a6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	f043 0204 	orr.w	r2, r3, #4
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f7ff fe01 	bl	80026b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002adc:	4013      	ands	r3, r2
 8002ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002af2:	4a04      	ldr	r2, [pc, #16]	; (8002b04 <__NVIC_SetPriorityGrouping+0x44>)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	60d3      	str	r3, [r2, #12]
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <__NVIC_GetPriorityGrouping+0x18>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	0a1b      	lsrs	r3, r3, #8
 8002b12:	f003 0307 	and.w	r3, r3, #7
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	db0b      	blt.n	8002b4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	f003 021f 	and.w	r2, r3, #31
 8002b3c:	4906      	ldr	r1, [pc, #24]	; (8002b58 <__NVIC_EnableIRQ+0x34>)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	2001      	movs	r0, #1
 8002b46:	fa00 f202 	lsl.w	r2, r0, r2
 8002b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr
 8002b58:	e000e100 	.word	0xe000e100

08002b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	6039      	str	r1, [r7, #0]
 8002b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	db0a      	blt.n	8002b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	490c      	ldr	r1, [pc, #48]	; (8002ba8 <__NVIC_SetPriority+0x4c>)
 8002b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7a:	0112      	lsls	r2, r2, #4
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	440b      	add	r3, r1
 8002b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b84:	e00a      	b.n	8002b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	4908      	ldr	r1, [pc, #32]	; (8002bac <__NVIC_SetPriority+0x50>)
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	3b04      	subs	r3, #4
 8002b94:	0112      	lsls	r2, r2, #4
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	440b      	add	r3, r1
 8002b9a:	761a      	strb	r2, [r3, #24]
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	e000e100 	.word	0xe000e100
 8002bac:	e000ed00 	.word	0xe000ed00

08002bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b089      	sub	sp, #36	; 0x24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f1c3 0307 	rsb	r3, r3, #7
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	bf28      	it	cs
 8002bce:	2304      	movcs	r3, #4
 8002bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	2b06      	cmp	r3, #6
 8002bd8:	d902      	bls.n	8002be0 <NVIC_EncodePriority+0x30>
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	3b03      	subs	r3, #3
 8002bde:	e000      	b.n	8002be2 <NVIC_EncodePriority+0x32>
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be4:	f04f 32ff 	mov.w	r2, #4294967295
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43da      	mvns	r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	401a      	ands	r2, r3
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002c02:	43d9      	mvns	r1, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c08:	4313      	orrs	r3, r2
         );
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3724      	adds	r7, #36	; 0x24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c24:	d301      	bcc.n	8002c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c26:	2301      	movs	r3, #1
 8002c28:	e00f      	b.n	8002c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c2a:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <SysTick_Config+0x40>)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c32:	210f      	movs	r1, #15
 8002c34:	f04f 30ff 	mov.w	r0, #4294967295
 8002c38:	f7ff ff90 	bl	8002b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <SysTick_Config+0x40>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c42:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <SysTick_Config+0x40>)
 8002c44:	2207      	movs	r2, #7
 8002c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	e000e010 	.word	0xe000e010

08002c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff ff2d 	bl	8002ac0 <__NVIC_SetPriorityGrouping>
}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b086      	sub	sp, #24
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4603      	mov	r3, r0
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c80:	f7ff ff42 	bl	8002b08 <__NVIC_GetPriorityGrouping>
 8002c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	6978      	ldr	r0, [r7, #20]
 8002c8c:	f7ff ff90 	bl	8002bb0 <NVIC_EncodePriority>
 8002c90:	4602      	mov	r2, r0
 8002c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c96:	4611      	mov	r1, r2
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff ff5f 	bl	8002b5c <__NVIC_SetPriority>
}
 8002c9e:	bf00      	nop
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff35 	bl	8002b24 <__NVIC_EnableIRQ>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7ff ffa2 	bl	8002c14 <SysTick_Config>
 8002cd0:	4603      	mov	r3, r0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e043      	b.n	8002d7a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <HAL_DMA_Init+0xa8>)
 8002cfa:	4413      	add	r3, r2
 8002cfc:	4a22      	ldr	r2, [pc, #136]	; (8002d88 <HAL_DMA_Init+0xac>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	091b      	lsrs	r3, r3, #4
 8002d04:	009a      	lsls	r2, r3, #2
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a1f      	ldr	r2, [pc, #124]	; (8002d8c <HAL_DMA_Init+0xb0>)
 8002d0e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d26:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002d2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002d34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	bffdfff8 	.word	0xbffdfff8
 8002d88:	cccccccd 	.word	0xcccccccd
 8002d8c:	40020000 	.word	0x40020000

08002d90 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_DMA_Start_IT+0x20>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e04a      	b.n	8002e46 <HAL_DMA_Start_IT+0xb6>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d13a      	bne.n	8002e38 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0201 	bic.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f938 	bl	800305c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d008      	beq.n	8002e06 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 020e 	orr.w	r2, r2, #14
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	e00f      	b.n	8002e26 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0204 	bic.w	r2, r2, #4
 8002e14:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 020a 	orr.w	r2, r2, #10
 8002e24:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f042 0201 	orr.w	r2, r2, #1
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	e005      	b.n	8002e44 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e40:	2302      	movs	r3, #2
 8002e42:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4013      	ands	r3, r2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d04f      	beq.n	8002f18 <HAL_DMA_IRQHandler+0xc8>
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d04a      	beq.n	8002f18 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d107      	bne.n	8002ea0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0204 	bic.w	r2, r2, #4
 8002e9e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a66      	ldr	r2, [pc, #408]	; (8003040 <HAL_DMA_IRQHandler+0x1f0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d029      	beq.n	8002efe <HAL_DMA_IRQHandler+0xae>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a65      	ldr	r2, [pc, #404]	; (8003044 <HAL_DMA_IRQHandler+0x1f4>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d022      	beq.n	8002efa <HAL_DMA_IRQHandler+0xaa>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a63      	ldr	r2, [pc, #396]	; (8003048 <HAL_DMA_IRQHandler+0x1f8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d01a      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0xa4>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a62      	ldr	r2, [pc, #392]	; (800304c <HAL_DMA_IRQHandler+0x1fc>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d012      	beq.n	8002eee <HAL_DMA_IRQHandler+0x9e>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a60      	ldr	r2, [pc, #384]	; (8003050 <HAL_DMA_IRQHandler+0x200>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00a      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x98>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a5f      	ldr	r2, [pc, #380]	; (8003054 <HAL_DMA_IRQHandler+0x204>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d102      	bne.n	8002ee2 <HAL_DMA_IRQHandler+0x92>
 8002edc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ee0:	e00e      	b.n	8002f00 <HAL_DMA_IRQHandler+0xb0>
 8002ee2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002ee6:	e00b      	b.n	8002f00 <HAL_DMA_IRQHandler+0xb0>
 8002ee8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002eec:	e008      	b.n	8002f00 <HAL_DMA_IRQHandler+0xb0>
 8002eee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ef2:	e005      	b.n	8002f00 <HAL_DMA_IRQHandler+0xb0>
 8002ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ef8:	e002      	b.n	8002f00 <HAL_DMA_IRQHandler+0xb0>
 8002efa:	2340      	movs	r3, #64	; 0x40
 8002efc:	e000      	b.n	8002f00 <HAL_DMA_IRQHandler+0xb0>
 8002efe:	2304      	movs	r3, #4
 8002f00:	4a55      	ldr	r2, [pc, #340]	; (8003058 <HAL_DMA_IRQHandler+0x208>)
 8002f02:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 8094 	beq.w	8003036 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002f16:	e08e      	b.n	8003036 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d056      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0x186>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d051      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10b      	bne.n	8002f58 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 020a 	bic.w	r2, r2, #10
 8002f4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a38      	ldr	r2, [pc, #224]	; (8003040 <HAL_DMA_IRQHandler+0x1f0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d029      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x166>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a37      	ldr	r2, [pc, #220]	; (8003044 <HAL_DMA_IRQHandler+0x1f4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d022      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0x162>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a35      	ldr	r2, [pc, #212]	; (8003048 <HAL_DMA_IRQHandler+0x1f8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d01a      	beq.n	8002fac <HAL_DMA_IRQHandler+0x15c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a34      	ldr	r2, [pc, #208]	; (800304c <HAL_DMA_IRQHandler+0x1fc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d012      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0x156>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a32      	ldr	r2, [pc, #200]	; (8003050 <HAL_DMA_IRQHandler+0x200>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d00a      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x150>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a31      	ldr	r2, [pc, #196]	; (8003054 <HAL_DMA_IRQHandler+0x204>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d102      	bne.n	8002f9a <HAL_DMA_IRQHandler+0x14a>
 8002f94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f98:	e00e      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x168>
 8002f9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f9e:	e00b      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x168>
 8002fa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fa4:	e008      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x168>
 8002fa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002faa:	e005      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x168>
 8002fac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fb0:	e002      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x168>
 8002fb2:	2320      	movs	r3, #32
 8002fb4:	e000      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x168>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	4a27      	ldr	r2, [pc, #156]	; (8003058 <HAL_DMA_IRQHandler+0x208>)
 8002fba:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d034      	beq.n	8003036 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002fd4:	e02f      	b.n	8003036 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	2208      	movs	r2, #8
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d028      	beq.n	8003038 <HAL_DMA_IRQHandler+0x1e8>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d023      	beq.n	8003038 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 020e 	bic.w	r2, r2, #14
 8002ffe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003008:	2101      	movs	r1, #1
 800300a:	fa01 f202 	lsl.w	r2, r1, r2
 800300e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	2b00      	cmp	r3, #0
 800302c:	d004      	beq.n	8003038 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	4798      	blx	r3
    }
  }
  return;
 8003036:	bf00      	nop
 8003038:	bf00      	nop
}
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40020008 	.word	0x40020008
 8003044:	4002001c 	.word	0x4002001c
 8003048:	40020030 	.word	0x40020030
 800304c:	40020044 	.word	0x40020044
 8003050:	40020058 	.word	0x40020058
 8003054:	4002006c 	.word	0x4002006c
 8003058:	40020000 	.word	0x40020000

0800305c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003072:	2101      	movs	r1, #1
 8003074:	fa01 f202 	lsl.w	r2, r1, r2
 8003078:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b10      	cmp	r3, #16
 8003088:	d108      	bne.n	800309c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800309a:	e007      	b.n	80030ac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	60da      	str	r2, [r3, #12]
}
 80030ac:	bf00      	nop
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr
	...

080030b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b08b      	sub	sp, #44	; 0x2c
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030c2:	2300      	movs	r3, #0
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030c6:	2300      	movs	r3, #0
 80030c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ca:	e148      	b.n	800335e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030cc:	2201      	movs	r2, #1
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	f040 8137 	bne.w	8003358 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	4aa3      	ldr	r2, [pc, #652]	; (800337c <HAL_GPIO_Init+0x2c4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d05e      	beq.n	80031b2 <HAL_GPIO_Init+0xfa>
 80030f4:	4aa1      	ldr	r2, [pc, #644]	; (800337c <HAL_GPIO_Init+0x2c4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d875      	bhi.n	80031e6 <HAL_GPIO_Init+0x12e>
 80030fa:	4aa1      	ldr	r2, [pc, #644]	; (8003380 <HAL_GPIO_Init+0x2c8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d058      	beq.n	80031b2 <HAL_GPIO_Init+0xfa>
 8003100:	4a9f      	ldr	r2, [pc, #636]	; (8003380 <HAL_GPIO_Init+0x2c8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d86f      	bhi.n	80031e6 <HAL_GPIO_Init+0x12e>
 8003106:	4a9f      	ldr	r2, [pc, #636]	; (8003384 <HAL_GPIO_Init+0x2cc>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d052      	beq.n	80031b2 <HAL_GPIO_Init+0xfa>
 800310c:	4a9d      	ldr	r2, [pc, #628]	; (8003384 <HAL_GPIO_Init+0x2cc>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d869      	bhi.n	80031e6 <HAL_GPIO_Init+0x12e>
 8003112:	4a9d      	ldr	r2, [pc, #628]	; (8003388 <HAL_GPIO_Init+0x2d0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d04c      	beq.n	80031b2 <HAL_GPIO_Init+0xfa>
 8003118:	4a9b      	ldr	r2, [pc, #620]	; (8003388 <HAL_GPIO_Init+0x2d0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d863      	bhi.n	80031e6 <HAL_GPIO_Init+0x12e>
 800311e:	4a9b      	ldr	r2, [pc, #620]	; (800338c <HAL_GPIO_Init+0x2d4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d046      	beq.n	80031b2 <HAL_GPIO_Init+0xfa>
 8003124:	4a99      	ldr	r2, [pc, #612]	; (800338c <HAL_GPIO_Init+0x2d4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d85d      	bhi.n	80031e6 <HAL_GPIO_Init+0x12e>
 800312a:	2b12      	cmp	r3, #18
 800312c:	d82a      	bhi.n	8003184 <HAL_GPIO_Init+0xcc>
 800312e:	2b12      	cmp	r3, #18
 8003130:	d859      	bhi.n	80031e6 <HAL_GPIO_Init+0x12e>
 8003132:	a201      	add	r2, pc, #4	; (adr r2, 8003138 <HAL_GPIO_Init+0x80>)
 8003134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003138:	080031b3 	.word	0x080031b3
 800313c:	0800318d 	.word	0x0800318d
 8003140:	0800319f 	.word	0x0800319f
 8003144:	080031e1 	.word	0x080031e1
 8003148:	080031e7 	.word	0x080031e7
 800314c:	080031e7 	.word	0x080031e7
 8003150:	080031e7 	.word	0x080031e7
 8003154:	080031e7 	.word	0x080031e7
 8003158:	080031e7 	.word	0x080031e7
 800315c:	080031e7 	.word	0x080031e7
 8003160:	080031e7 	.word	0x080031e7
 8003164:	080031e7 	.word	0x080031e7
 8003168:	080031e7 	.word	0x080031e7
 800316c:	080031e7 	.word	0x080031e7
 8003170:	080031e7 	.word	0x080031e7
 8003174:	080031e7 	.word	0x080031e7
 8003178:	080031e7 	.word	0x080031e7
 800317c:	08003195 	.word	0x08003195
 8003180:	080031a9 	.word	0x080031a9
 8003184:	4a82      	ldr	r2, [pc, #520]	; (8003390 <HAL_GPIO_Init+0x2d8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d013      	beq.n	80031b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800318a:	e02c      	b.n	80031e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	623b      	str	r3, [r7, #32]
          break;
 8003192:	e029      	b.n	80031e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	3304      	adds	r3, #4
 800319a:	623b      	str	r3, [r7, #32]
          break;
 800319c:	e024      	b.n	80031e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	3308      	adds	r3, #8
 80031a4:	623b      	str	r3, [r7, #32]
          break;
 80031a6:	e01f      	b.n	80031e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	330c      	adds	r3, #12
 80031ae:	623b      	str	r3, [r7, #32]
          break;
 80031b0:	e01a      	b.n	80031e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d102      	bne.n	80031c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031ba:	2304      	movs	r3, #4
 80031bc:	623b      	str	r3, [r7, #32]
          break;
 80031be:	e013      	b.n	80031e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d105      	bne.n	80031d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031c8:	2308      	movs	r3, #8
 80031ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69fa      	ldr	r2, [r7, #28]
 80031d0:	611a      	str	r2, [r3, #16]
          break;
 80031d2:	e009      	b.n	80031e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031d4:	2308      	movs	r3, #8
 80031d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	615a      	str	r2, [r3, #20]
          break;
 80031de:	e003      	b.n	80031e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031e0:	2300      	movs	r3, #0
 80031e2:	623b      	str	r3, [r7, #32]
          break;
 80031e4:	e000      	b.n	80031e8 <HAL_GPIO_Init+0x130>
          break;
 80031e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	2bff      	cmp	r3, #255	; 0xff
 80031ec:	d801      	bhi.n	80031f2 <HAL_GPIO_Init+0x13a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	e001      	b.n	80031f6 <HAL_GPIO_Init+0x13e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3304      	adds	r3, #4
 80031f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	2bff      	cmp	r3, #255	; 0xff
 80031fc:	d802      	bhi.n	8003204 <HAL_GPIO_Init+0x14c>
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	e002      	b.n	800320a <HAL_GPIO_Init+0x152>
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	3b08      	subs	r3, #8
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	210f      	movs	r1, #15
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	fa01 f303 	lsl.w	r3, r1, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	401a      	ands	r2, r3
 800321c:	6a39      	ldr	r1, [r7, #32]
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	fa01 f303 	lsl.w	r3, r1, r3
 8003224:	431a      	orrs	r2, r3
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 8090 	beq.w	8003358 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003238:	4b56      	ldr	r3, [pc, #344]	; (8003394 <HAL_GPIO_Init+0x2dc>)
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	4a55      	ldr	r2, [pc, #340]	; (8003394 <HAL_GPIO_Init+0x2dc>)
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	6193      	str	r3, [r2, #24]
 8003244:	4b53      	ldr	r3, [pc, #332]	; (8003394 <HAL_GPIO_Init+0x2dc>)
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003250:	4a51      	ldr	r2, [pc, #324]	; (8003398 <HAL_GPIO_Init+0x2e0>)
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	089b      	lsrs	r3, r3, #2
 8003256:	3302      	adds	r3, #2
 8003258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	220f      	movs	r2, #15
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4013      	ands	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a49      	ldr	r2, [pc, #292]	; (800339c <HAL_GPIO_Init+0x2e4>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d00d      	beq.n	8003298 <HAL_GPIO_Init+0x1e0>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a48      	ldr	r2, [pc, #288]	; (80033a0 <HAL_GPIO_Init+0x2e8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d007      	beq.n	8003294 <HAL_GPIO_Init+0x1dc>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a47      	ldr	r2, [pc, #284]	; (80033a4 <HAL_GPIO_Init+0x2ec>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d101      	bne.n	8003290 <HAL_GPIO_Init+0x1d8>
 800328c:	2302      	movs	r3, #2
 800328e:	e004      	b.n	800329a <HAL_GPIO_Init+0x1e2>
 8003290:	2303      	movs	r3, #3
 8003292:	e002      	b.n	800329a <HAL_GPIO_Init+0x1e2>
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <HAL_GPIO_Init+0x1e2>
 8003298:	2300      	movs	r3, #0
 800329a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800329c:	f002 0203 	and.w	r2, r2, #3
 80032a0:	0092      	lsls	r2, r2, #2
 80032a2:	4093      	lsls	r3, r2
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032aa:	493b      	ldr	r1, [pc, #236]	; (8003398 <HAL_GPIO_Init+0x2e0>)
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	089b      	lsrs	r3, r3, #2
 80032b0:	3302      	adds	r3, #2
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d006      	beq.n	80032d2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032c4:	4b38      	ldr	r3, [pc, #224]	; (80033a8 <HAL_GPIO_Init+0x2f0>)
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	4937      	ldr	r1, [pc, #220]	; (80033a8 <HAL_GPIO_Init+0x2f0>)
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	600b      	str	r3, [r1, #0]
 80032d0:	e006      	b.n	80032e0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032d2:	4b35      	ldr	r3, [pc, #212]	; (80033a8 <HAL_GPIO_Init+0x2f0>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	43db      	mvns	r3, r3
 80032da:	4933      	ldr	r1, [pc, #204]	; (80033a8 <HAL_GPIO_Init+0x2f0>)
 80032dc:	4013      	ands	r3, r2
 80032de:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d006      	beq.n	80032fa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032ec:	4b2e      	ldr	r3, [pc, #184]	; (80033a8 <HAL_GPIO_Init+0x2f0>)
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	492d      	ldr	r1, [pc, #180]	; (80033a8 <HAL_GPIO_Init+0x2f0>)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	604b      	str	r3, [r1, #4]
 80032f8:	e006      	b.n	8003308 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032fa:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <HAL_GPIO_Init+0x2f0>)
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	43db      	mvns	r3, r3
 8003302:	4929      	ldr	r1, [pc, #164]	; (80033a8 <HAL_GPIO_Init+0x2f0>)
 8003304:	4013      	ands	r3, r2
 8003306:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d006      	beq.n	8003322 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003314:	4b24      	ldr	r3, [pc, #144]	; (80033a8 <HAL_GPIO_Init+0x2f0>)
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	4923      	ldr	r1, [pc, #140]	; (80033a8 <HAL_GPIO_Init+0x2f0>)
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	4313      	orrs	r3, r2
 800331e:	608b      	str	r3, [r1, #8]
 8003320:	e006      	b.n	8003330 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003322:	4b21      	ldr	r3, [pc, #132]	; (80033a8 <HAL_GPIO_Init+0x2f0>)
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	43db      	mvns	r3, r3
 800332a:	491f      	ldr	r1, [pc, #124]	; (80033a8 <HAL_GPIO_Init+0x2f0>)
 800332c:	4013      	ands	r3, r2
 800332e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d006      	beq.n	800334a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800333c:	4b1a      	ldr	r3, [pc, #104]	; (80033a8 <HAL_GPIO_Init+0x2f0>)
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	4919      	ldr	r1, [pc, #100]	; (80033a8 <HAL_GPIO_Init+0x2f0>)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	4313      	orrs	r3, r2
 8003346:	60cb      	str	r3, [r1, #12]
 8003348:	e006      	b.n	8003358 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800334a:	4b17      	ldr	r3, [pc, #92]	; (80033a8 <HAL_GPIO_Init+0x2f0>)
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	43db      	mvns	r3, r3
 8003352:	4915      	ldr	r1, [pc, #84]	; (80033a8 <HAL_GPIO_Init+0x2f0>)
 8003354:	4013      	ands	r3, r2
 8003356:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	3301      	adds	r3, #1
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	fa22 f303 	lsr.w	r3, r2, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	f47f aeaf 	bne.w	80030cc <HAL_GPIO_Init+0x14>
  }
}
 800336e:	bf00      	nop
 8003370:	bf00      	nop
 8003372:	372c      	adds	r7, #44	; 0x2c
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	10320000 	.word	0x10320000
 8003380:	10310000 	.word	0x10310000
 8003384:	10220000 	.word	0x10220000
 8003388:	10210000 	.word	0x10210000
 800338c:	10120000 	.word	0x10120000
 8003390:	10110000 	.word	0x10110000
 8003394:	40021000 	.word	0x40021000
 8003398:	40010000 	.word	0x40010000
 800339c:	40010800 	.word	0x40010800
 80033a0:	40010c00 	.word	0x40010c00
 80033a4:	40011000 	.word	0x40011000
 80033a8:	40010400 	.word	0x40010400

080033ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	887b      	ldrh	r3, [r7, #2]
 80033be:	4013      	ands	r3, r2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
 80033c8:	e001      	b.n	80033ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033ca:	2300      	movs	r3, #0
 80033cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr

080033da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	460b      	mov	r3, r1
 80033e4:	807b      	strh	r3, [r7, #2]
 80033e6:	4613      	mov	r3, r2
 80033e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033ea:	787b      	ldrb	r3, [r7, #1]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033f0:	887a      	ldrh	r2, [r7, #2]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033f6:	e003      	b.n	8003400 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033f8:	887b      	ldrh	r3, [r7, #2]
 80033fa:	041a      	lsls	r2, r3, #16
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	611a      	str	r2, [r3, #16]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr

0800340a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800340a:	b480      	push	{r7}
 800340c:	b085      	sub	sp, #20
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	460b      	mov	r3, r1
 8003414:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800341c:	887a      	ldrh	r2, [r7, #2]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4013      	ands	r3, r2
 8003422:	041a      	lsls	r2, r3, #16
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	43d9      	mvns	r1, r3
 8003428:	887b      	ldrh	r3, [r7, #2]
 800342a:	400b      	ands	r3, r1
 800342c:	431a      	orrs	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	611a      	str	r2, [r3, #16]
}
 8003432:	bf00      	nop
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003446:	4b08      	ldr	r3, [pc, #32]	; (8003468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003448:	695a      	ldr	r2, [r3, #20]
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	4013      	ands	r3, r2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d006      	beq.n	8003460 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003452:	4a05      	ldr	r2, [pc, #20]	; (8003468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003454:	88fb      	ldrh	r3, [r7, #6]
 8003456:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003458:	88fb      	ldrh	r3, [r7, #6]
 800345a:	4618      	mov	r0, r3
 800345c:	f7fd fcea 	bl	8000e34 <HAL_GPIO_EXTI_Callback>
  }
}
 8003460:	bf00      	nop
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40010400 	.word	0x40010400

0800346c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e12b      	b.n	80036d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7fe fd9e 	bl	8001fd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2224      	movs	r2, #36	; 0x24
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0201 	bic.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034d0:	f000 ffea 	bl	80044a8 <HAL_RCC_GetPCLK1Freq>
 80034d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4a81      	ldr	r2, [pc, #516]	; (80036e0 <HAL_I2C_Init+0x274>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d807      	bhi.n	80034f0 <HAL_I2C_Init+0x84>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4a80      	ldr	r2, [pc, #512]	; (80036e4 <HAL_I2C_Init+0x278>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	bf94      	ite	ls
 80034e8:	2301      	movls	r3, #1
 80034ea:	2300      	movhi	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e006      	b.n	80034fe <HAL_I2C_Init+0x92>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4a7d      	ldr	r2, [pc, #500]	; (80036e8 <HAL_I2C_Init+0x27c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	bf94      	ite	ls
 80034f8:	2301      	movls	r3, #1
 80034fa:	2300      	movhi	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e0e7      	b.n	80036d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4a78      	ldr	r2, [pc, #480]	; (80036ec <HAL_I2C_Init+0x280>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	0c9b      	lsrs	r3, r3, #18
 8003510:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	430a      	orrs	r2, r1
 8003524:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4a6a      	ldr	r2, [pc, #424]	; (80036e0 <HAL_I2C_Init+0x274>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d802      	bhi.n	8003540 <HAL_I2C_Init+0xd4>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	3301      	adds	r3, #1
 800353e:	e009      	b.n	8003554 <HAL_I2C_Init+0xe8>
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003546:	fb02 f303 	mul.w	r3, r2, r3
 800354a:	4a69      	ldr	r2, [pc, #420]	; (80036f0 <HAL_I2C_Init+0x284>)
 800354c:	fba2 2303 	umull	r2, r3, r2, r3
 8003550:	099b      	lsrs	r3, r3, #6
 8003552:	3301      	adds	r3, #1
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	430b      	orrs	r3, r1
 800355a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003566:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	495c      	ldr	r1, [pc, #368]	; (80036e0 <HAL_I2C_Init+0x274>)
 8003570:	428b      	cmp	r3, r1
 8003572:	d819      	bhi.n	80035a8 <HAL_I2C_Init+0x13c>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	1e59      	subs	r1, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003582:	1c59      	adds	r1, r3, #1
 8003584:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003588:	400b      	ands	r3, r1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <HAL_I2C_Init+0x138>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1e59      	subs	r1, r3, #1
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	fbb1 f3f3 	udiv	r3, r1, r3
 800359c:	3301      	adds	r3, #1
 800359e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a2:	e051      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 80035a4:	2304      	movs	r3, #4
 80035a6:	e04f      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d111      	bne.n	80035d4 <HAL_I2C_Init+0x168>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	1e58      	subs	r0, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6859      	ldr	r1, [r3, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	440b      	add	r3, r1
 80035be:	fbb0 f3f3 	udiv	r3, r0, r3
 80035c2:	3301      	adds	r3, #1
 80035c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	bf0c      	ite	eq
 80035cc:	2301      	moveq	r3, #1
 80035ce:	2300      	movne	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	e012      	b.n	80035fa <HAL_I2C_Init+0x18e>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	1e58      	subs	r0, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6859      	ldr	r1, [r3, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	0099      	lsls	r1, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ea:	3301      	adds	r3, #1
 80035ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_I2C_Init+0x196>
 80035fe:	2301      	movs	r3, #1
 8003600:	e022      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10e      	bne.n	8003628 <HAL_I2C_Init+0x1bc>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1e58      	subs	r0, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6859      	ldr	r1, [r3, #4]
 8003612:	460b      	mov	r3, r1
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	440b      	add	r3, r1
 8003618:	fbb0 f3f3 	udiv	r3, r0, r3
 800361c:	3301      	adds	r3, #1
 800361e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003626:	e00f      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1e58      	subs	r0, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6859      	ldr	r1, [r3, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	0099      	lsls	r1, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	fbb0 f3f3 	udiv	r3, r0, r3
 800363e:	3301      	adds	r3, #1
 8003640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003644:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	6809      	ldr	r1, [r1, #0]
 800364c:	4313      	orrs	r3, r2
 800364e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69da      	ldr	r2, [r3, #28]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003676:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6911      	ldr	r1, [r2, #16]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	68d2      	ldr	r2, [r2, #12]
 8003682:	4311      	orrs	r1, r2
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	430b      	orrs	r3, r1
 800368a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695a      	ldr	r2, [r3, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	000186a0 	.word	0x000186a0
 80036e4:	001e847f 	.word	0x001e847f
 80036e8:	003d08ff 	.word	0x003d08ff
 80036ec:	431bde83 	.word	0x431bde83
 80036f0:	10624dd3 	.word	0x10624dd3

080036f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b088      	sub	sp, #32
 80036f8:	af02      	add	r7, sp, #8
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	607a      	str	r2, [r7, #4]
 80036fe:	461a      	mov	r2, r3
 8003700:	460b      	mov	r3, r1
 8003702:	817b      	strh	r3, [r7, #10]
 8003704:	4613      	mov	r3, r2
 8003706:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003708:	f7fe fde0 	bl	80022cc <HAL_GetTick>
 800370c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b20      	cmp	r3, #32
 8003718:	f040 80e0 	bne.w	80038dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	2319      	movs	r3, #25
 8003722:	2201      	movs	r2, #1
 8003724:	4970      	ldr	r1, [pc, #448]	; (80038e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f964 	bl	80039f4 <I2C_WaitOnFlagUntilTimeout>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003732:	2302      	movs	r3, #2
 8003734:	e0d3      	b.n	80038de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_I2C_Master_Transmit+0x50>
 8003740:	2302      	movs	r3, #2
 8003742:	e0cc      	b.n	80038de <HAL_I2C_Master_Transmit+0x1ea>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b01      	cmp	r3, #1
 8003758:	d007      	beq.n	800376a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f042 0201 	orr.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003778:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2221      	movs	r2, #33	; 0x21
 800377e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2210      	movs	r2, #16
 8003786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	893a      	ldrh	r2, [r7, #8]
 800379a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4a50      	ldr	r2, [pc, #320]	; (80038ec <HAL_I2C_Master_Transmit+0x1f8>)
 80037aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037ac:	8979      	ldrh	r1, [r7, #10]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	6a3a      	ldr	r2, [r7, #32]
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 f89c 	bl	80038f0 <I2C_MasterRequestWrite>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e08d      	b.n	80038de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c2:	2300      	movs	r3, #0
 80037c4:	613b      	str	r3, [r7, #16]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80037d8:	e066      	b.n	80038a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	6a39      	ldr	r1, [r7, #32]
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 f9de 	bl	8003ba0 <I2C_WaitOnTXEFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00d      	beq.n	8003806 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d107      	bne.n	8003802 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003800:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e06b      	b.n	80038de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	781a      	ldrb	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003820:	b29b      	uxth	r3, r3
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382e:	3b01      	subs	r3, #1
 8003830:	b29a      	uxth	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b04      	cmp	r3, #4
 8003842:	d11b      	bne.n	800387c <HAL_I2C_Master_Transmit+0x188>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003848:	2b00      	cmp	r3, #0
 800384a:	d017      	beq.n	800387c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	781a      	ldrb	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	6a39      	ldr	r1, [r7, #32]
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 f9ce 	bl	8003c22 <I2C_WaitOnBTFFlagUntilTimeout>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00d      	beq.n	80038a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	2b04      	cmp	r3, #4
 8003892:	d107      	bne.n	80038a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e01a      	b.n	80038de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d194      	bne.n	80037da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	e000      	b.n	80038de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80038dc:	2302      	movs	r3, #2
  }
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	00100002 	.word	0x00100002
 80038ec:	ffff0000 	.word	0xffff0000

080038f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	607a      	str	r2, [r7, #4]
 80038fa:	603b      	str	r3, [r7, #0]
 80038fc:	460b      	mov	r3, r1
 80038fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b08      	cmp	r3, #8
 800390a:	d006      	beq.n	800391a <I2C_MasterRequestWrite+0x2a>
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d003      	beq.n	800391a <I2C_MasterRequestWrite+0x2a>
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003918:	d108      	bne.n	800392c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	e00b      	b.n	8003944 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	2b12      	cmp	r3, #18
 8003932:	d107      	bne.n	8003944 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003942:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 f84f 	bl	80039f4 <I2C_WaitOnFlagUntilTimeout>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00d      	beq.n	8003978 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800396a:	d103      	bne.n	8003974 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003972:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e035      	b.n	80039e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003980:	d108      	bne.n	8003994 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003982:	897b      	ldrh	r3, [r7, #10]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	461a      	mov	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003990:	611a      	str	r2, [r3, #16]
 8003992:	e01b      	b.n	80039cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003994:	897b      	ldrh	r3, [r7, #10]
 8003996:	11db      	asrs	r3, r3, #7
 8003998:	b2db      	uxtb	r3, r3
 800399a:	f003 0306 	and.w	r3, r3, #6
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	f063 030f 	orn	r3, r3, #15
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	490e      	ldr	r1, [pc, #56]	; (80039ec <I2C_MasterRequestWrite+0xfc>)
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 f875 	bl	8003aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e010      	b.n	80039e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039c2:	897b      	ldrh	r3, [r7, #10]
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	4907      	ldr	r1, [pc, #28]	; (80039f0 <I2C_MasterRequestWrite+0x100>)
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 f865 	bl	8003aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	00010008 	.word	0x00010008
 80039f0:	00010002 	.word	0x00010002

080039f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	4613      	mov	r3, r2
 8003a02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a04:	e025      	b.n	8003a52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0c:	d021      	beq.n	8003a52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a0e:	f7fe fc5d 	bl	80022cc <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d302      	bcc.n	8003a24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d116      	bne.n	8003a52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	f043 0220 	orr.w	r2, r3, #32
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e023      	b.n	8003a9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	0c1b      	lsrs	r3, r3, #16
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d10d      	bne.n	8003a78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	43da      	mvns	r2, r3
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	4013      	ands	r3, r2
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	bf0c      	ite	eq
 8003a6e:	2301      	moveq	r3, #1
 8003a70:	2300      	movne	r3, #0
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	461a      	mov	r2, r3
 8003a76:	e00c      	b.n	8003a92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	43da      	mvns	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	4013      	ands	r3, r2
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	bf0c      	ite	eq
 8003a8a:	2301      	moveq	r3, #1
 8003a8c:	2300      	movne	r3, #0
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	461a      	mov	r2, r3
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d0b6      	beq.n	8003a06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	60f8      	str	r0, [r7, #12]
 8003aaa:	60b9      	str	r1, [r7, #8]
 8003aac:	607a      	str	r2, [r7, #4]
 8003aae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ab0:	e051      	b.n	8003b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac0:	d123      	bne.n	8003b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ada:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f043 0204 	orr.w	r2, r3, #4
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e046      	b.n	8003b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b10:	d021      	beq.n	8003b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b12:	f7fe fbdb 	bl	80022cc <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d302      	bcc.n	8003b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d116      	bne.n	8003b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	f043 0220 	orr.w	r2, r3, #32
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e020      	b.n	8003b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	0c1b      	lsrs	r3, r3, #16
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d10c      	bne.n	8003b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	43da      	mvns	r2, r3
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	bf14      	ite	ne
 8003b72:	2301      	movne	r3, #1
 8003b74:	2300      	moveq	r3, #0
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	e00b      	b.n	8003b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	43da      	mvns	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	4013      	ands	r3, r2
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	bf14      	ite	ne
 8003b8c:	2301      	movne	r3, #1
 8003b8e:	2300      	moveq	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d18d      	bne.n	8003ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bac:	e02d      	b.n	8003c0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 f878 	bl	8003ca4 <I2C_IsAcknowledgeFailed>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e02d      	b.n	8003c1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d021      	beq.n	8003c0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc6:	f7fe fb81 	bl	80022cc <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d302      	bcc.n	8003bdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d116      	bne.n	8003c0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f043 0220 	orr.w	r2, r3, #32
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e007      	b.n	8003c1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c14:	2b80      	cmp	r3, #128	; 0x80
 8003c16:	d1ca      	bne.n	8003bae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b084      	sub	sp, #16
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	60f8      	str	r0, [r7, #12]
 8003c2a:	60b9      	str	r1, [r7, #8]
 8003c2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c2e:	e02d      	b.n	8003c8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 f837 	bl	8003ca4 <I2C_IsAcknowledgeFailed>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e02d      	b.n	8003c9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c46:	d021      	beq.n	8003c8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c48:	f7fe fb40 	bl	80022cc <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d302      	bcc.n	8003c5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d116      	bne.n	8003c8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	f043 0220 	orr.w	r2, r3, #32
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e007      	b.n	8003c9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d1ca      	bne.n	8003c30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cba:	d11b      	bne.n	8003cf4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	f043 0204 	orr.w	r2, r3, #4
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr

08003d00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e26c      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 8087 	beq.w	8003e2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d20:	4b92      	ldr	r3, [pc, #584]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 030c 	and.w	r3, r3, #12
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d00c      	beq.n	8003d46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d2c:	4b8f      	ldr	r3, [pc, #572]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 030c 	and.w	r3, r3, #12
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d112      	bne.n	8003d5e <HAL_RCC_OscConfig+0x5e>
 8003d38:	4b8c      	ldr	r3, [pc, #560]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d44:	d10b      	bne.n	8003d5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d46:	4b89      	ldr	r3, [pc, #548]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d06c      	beq.n	8003e2c <HAL_RCC_OscConfig+0x12c>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d168      	bne.n	8003e2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e246      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d66:	d106      	bne.n	8003d76 <HAL_RCC_OscConfig+0x76>
 8003d68:	4b80      	ldr	r3, [pc, #512]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a7f      	ldr	r2, [pc, #508]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	e02e      	b.n	8003dd4 <HAL_RCC_OscConfig+0xd4>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10c      	bne.n	8003d98 <HAL_RCC_OscConfig+0x98>
 8003d7e:	4b7b      	ldr	r3, [pc, #492]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a7a      	ldr	r2, [pc, #488]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	4b78      	ldr	r3, [pc, #480]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a77      	ldr	r2, [pc, #476]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003d90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	e01d      	b.n	8003dd4 <HAL_RCC_OscConfig+0xd4>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCC_OscConfig+0xbc>
 8003da2:	4b72      	ldr	r3, [pc, #456]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a71      	ldr	r2, [pc, #452]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	4b6f      	ldr	r3, [pc, #444]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a6e      	ldr	r2, [pc, #440]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	e00b      	b.n	8003dd4 <HAL_RCC_OscConfig+0xd4>
 8003dbc:	4b6b      	ldr	r3, [pc, #428]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a6a      	ldr	r2, [pc, #424]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	4b68      	ldr	r3, [pc, #416]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a67      	ldr	r2, [pc, #412]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d013      	beq.n	8003e04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7fe fa76 	bl	80022cc <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de4:	f7fe fa72 	bl	80022cc <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	; 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e1fa      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df6:	4b5d      	ldr	r3, [pc, #372]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0f0      	beq.n	8003de4 <HAL_RCC_OscConfig+0xe4>
 8003e02:	e014      	b.n	8003e2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e04:	f7fe fa62 	bl	80022cc <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e0c:	f7fe fa5e 	bl	80022cc <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b64      	cmp	r3, #100	; 0x64
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e1e6      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e1e:	4b53      	ldr	r3, [pc, #332]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x10c>
 8003e2a:	e000      	b.n	8003e2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d063      	beq.n	8003f02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e3a:	4b4c      	ldr	r3, [pc, #304]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00b      	beq.n	8003e5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e46:	4b49      	ldr	r3, [pc, #292]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
 8003e4e:	2b08      	cmp	r3, #8
 8003e50:	d11c      	bne.n	8003e8c <HAL_RCC_OscConfig+0x18c>
 8003e52:	4b46      	ldr	r3, [pc, #280]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d116      	bne.n	8003e8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e5e:	4b43      	ldr	r3, [pc, #268]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d005      	beq.n	8003e76 <HAL_RCC_OscConfig+0x176>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d001      	beq.n	8003e76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e1ba      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e76:	4b3d      	ldr	r3, [pc, #244]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	4939      	ldr	r1, [pc, #228]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e8a:	e03a      	b.n	8003f02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d020      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e94:	4b36      	ldr	r3, [pc, #216]	; (8003f70 <HAL_RCC_OscConfig+0x270>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9a:	f7fe fa17 	bl	80022cc <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ea2:	f7fe fa13 	bl	80022cc <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e19b      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb4:	4b2d      	ldr	r3, [pc, #180]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f0      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec0:	4b2a      	ldr	r3, [pc, #168]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	4927      	ldr	r1, [pc, #156]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	600b      	str	r3, [r1, #0]
 8003ed4:	e015      	b.n	8003f02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ed6:	4b26      	ldr	r3, [pc, #152]	; (8003f70 <HAL_RCC_OscConfig+0x270>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003edc:	f7fe f9f6 	bl	80022cc <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ee4:	f7fe f9f2 	bl	80022cc <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e17a      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ef6:	4b1d      	ldr	r3, [pc, #116]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d03a      	beq.n	8003f84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d019      	beq.n	8003f4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f16:	4b17      	ldr	r3, [pc, #92]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003f18:	2201      	movs	r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f1c:	f7fe f9d6 	bl	80022cc <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f24:	f7fe f9d2 	bl	80022cc <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e15a      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f36:	4b0d      	ldr	r3, [pc, #52]	; (8003f6c <HAL_RCC_OscConfig+0x26c>)
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0f0      	beq.n	8003f24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f42:	2001      	movs	r0, #1
 8003f44:	f000 fac4 	bl	80044d0 <RCC_Delay>
 8003f48:	e01c      	b.n	8003f84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f4a:	4b0a      	ldr	r3, [pc, #40]	; (8003f74 <HAL_RCC_OscConfig+0x274>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f50:	f7fe f9bc 	bl	80022cc <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f56:	e00f      	b.n	8003f78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f58:	f7fe f9b8 	bl	80022cc <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d908      	bls.n	8003f78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e140      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
 8003f6a:	bf00      	nop
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	42420000 	.word	0x42420000
 8003f74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f78:	4b9e      	ldr	r3, [pc, #632]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e9      	bne.n	8003f58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 80a6 	beq.w	80040de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f92:	2300      	movs	r3, #0
 8003f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f96:	4b97      	ldr	r3, [pc, #604]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10d      	bne.n	8003fbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa2:	4b94      	ldr	r3, [pc, #592]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	4a93      	ldr	r2, [pc, #588]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8003fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fac:	61d3      	str	r3, [r2, #28]
 8003fae:	4b91      	ldr	r3, [pc, #580]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbe:	4b8e      	ldr	r3, [pc, #568]	; (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d118      	bne.n	8003ffc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fca:	4b8b      	ldr	r3, [pc, #556]	; (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a8a      	ldr	r2, [pc, #552]	; (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 8003fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fd6:	f7fe f979 	bl	80022cc <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fde:	f7fe f975 	bl	80022cc <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b64      	cmp	r3, #100	; 0x64
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e0fd      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff0:	4b81      	ldr	r3, [pc, #516]	; (80041f8 <HAL_RCC_OscConfig+0x4f8>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d106      	bne.n	8004012 <HAL_RCC_OscConfig+0x312>
 8004004:	4b7b      	ldr	r3, [pc, #492]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	4a7a      	ldr	r2, [pc, #488]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	6213      	str	r3, [r2, #32]
 8004010:	e02d      	b.n	800406e <HAL_RCC_OscConfig+0x36e>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10c      	bne.n	8004034 <HAL_RCC_OscConfig+0x334>
 800401a:	4b76      	ldr	r3, [pc, #472]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	4a75      	ldr	r2, [pc, #468]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8004020:	f023 0301 	bic.w	r3, r3, #1
 8004024:	6213      	str	r3, [r2, #32]
 8004026:	4b73      	ldr	r3, [pc, #460]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	4a72      	ldr	r2, [pc, #456]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 800402c:	f023 0304 	bic.w	r3, r3, #4
 8004030:	6213      	str	r3, [r2, #32]
 8004032:	e01c      	b.n	800406e <HAL_RCC_OscConfig+0x36e>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	2b05      	cmp	r3, #5
 800403a:	d10c      	bne.n	8004056 <HAL_RCC_OscConfig+0x356>
 800403c:	4b6d      	ldr	r3, [pc, #436]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	4a6c      	ldr	r2, [pc, #432]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8004042:	f043 0304 	orr.w	r3, r3, #4
 8004046:	6213      	str	r3, [r2, #32]
 8004048:	4b6a      	ldr	r3, [pc, #424]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	4a69      	ldr	r2, [pc, #420]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	6213      	str	r3, [r2, #32]
 8004054:	e00b      	b.n	800406e <HAL_RCC_OscConfig+0x36e>
 8004056:	4b67      	ldr	r3, [pc, #412]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	4a66      	ldr	r2, [pc, #408]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 800405c:	f023 0301 	bic.w	r3, r3, #1
 8004060:	6213      	str	r3, [r2, #32]
 8004062:	4b64      	ldr	r3, [pc, #400]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	4a63      	ldr	r2, [pc, #396]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8004068:	f023 0304 	bic.w	r3, r3, #4
 800406c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d015      	beq.n	80040a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004076:	f7fe f929 	bl	80022cc <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407c:	e00a      	b.n	8004094 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800407e:	f7fe f925 	bl	80022cc <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	f241 3288 	movw	r2, #5000	; 0x1388
 800408c:	4293      	cmp	r3, r2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e0ab      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004094:	4b57      	ldr	r3, [pc, #348]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0ee      	beq.n	800407e <HAL_RCC_OscConfig+0x37e>
 80040a0:	e014      	b.n	80040cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040a2:	f7fe f913 	bl	80022cc <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a8:	e00a      	b.n	80040c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040aa:	f7fe f90f 	bl	80022cc <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e095      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c0:	4b4c      	ldr	r3, [pc, #304]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1ee      	bne.n	80040aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040cc:	7dfb      	ldrb	r3, [r7, #23]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d105      	bne.n	80040de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d2:	4b48      	ldr	r3, [pc, #288]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	4a47      	ldr	r2, [pc, #284]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 80040d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 8081 	beq.w	80041ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040e8:	4b42      	ldr	r3, [pc, #264]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f003 030c 	and.w	r3, r3, #12
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d061      	beq.n	80041b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d146      	bne.n	800418a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fc:	4b3f      	ldr	r3, [pc, #252]	; (80041fc <HAL_RCC_OscConfig+0x4fc>)
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004102:	f7fe f8e3 	bl	80022cc <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410a:	f7fe f8df 	bl	80022cc <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e067      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800411c:	4b35      	ldr	r3, [pc, #212]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1f0      	bne.n	800410a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004130:	d108      	bne.n	8004144 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004132:	4b30      	ldr	r3, [pc, #192]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	492d      	ldr	r1, [pc, #180]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8004140:	4313      	orrs	r3, r2
 8004142:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004144:	4b2b      	ldr	r3, [pc, #172]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a19      	ldr	r1, [r3, #32]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	430b      	orrs	r3, r1
 8004156:	4927      	ldr	r1, [pc, #156]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 8004158:	4313      	orrs	r3, r2
 800415a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800415c:	4b27      	ldr	r3, [pc, #156]	; (80041fc <HAL_RCC_OscConfig+0x4fc>)
 800415e:	2201      	movs	r2, #1
 8004160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004162:	f7fe f8b3 	bl	80022cc <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004168:	e008      	b.n	800417c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800416a:	f7fe f8af 	bl	80022cc <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e037      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800417c:	4b1d      	ldr	r3, [pc, #116]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0f0      	beq.n	800416a <HAL_RCC_OscConfig+0x46a>
 8004188:	e02f      	b.n	80041ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800418a:	4b1c      	ldr	r3, [pc, #112]	; (80041fc <HAL_RCC_OscConfig+0x4fc>)
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004190:	f7fe f89c 	bl	80022cc <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004198:	f7fe f898 	bl	80022cc <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e020      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041aa:	4b12      	ldr	r3, [pc, #72]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1f0      	bne.n	8004198 <HAL_RCC_OscConfig+0x498>
 80041b6:	e018      	b.n	80041ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e013      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041c4:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <HAL_RCC_OscConfig+0x4f4>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d106      	bne.n	80041e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d001      	beq.n	80041ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40021000 	.word	0x40021000
 80041f8:	40007000 	.word	0x40007000
 80041fc:	42420060 	.word	0x42420060

08004200 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0d0      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004214:	4b6a      	ldr	r3, [pc, #424]	; (80043c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d910      	bls.n	8004244 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004222:	4b67      	ldr	r3, [pc, #412]	; (80043c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f023 0207 	bic.w	r2, r3, #7
 800422a:	4965      	ldr	r1, [pc, #404]	; (80043c0 <HAL_RCC_ClockConfig+0x1c0>)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	4313      	orrs	r3, r2
 8004230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004232:	4b63      	ldr	r3, [pc, #396]	; (80043c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d001      	beq.n	8004244 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0b8      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d020      	beq.n	8004292 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d005      	beq.n	8004268 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800425c:	4b59      	ldr	r3, [pc, #356]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	4a58      	ldr	r2, [pc, #352]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004262:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004266:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004274:	4b53      	ldr	r3, [pc, #332]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	4a52      	ldr	r2, [pc, #328]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 800427a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800427e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004280:	4b50      	ldr	r3, [pc, #320]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	494d      	ldr	r1, [pc, #308]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 800428e:	4313      	orrs	r3, r2
 8004290:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d040      	beq.n	8004320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d107      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a6:	4b47      	ldr	r3, [pc, #284]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d115      	bne.n	80042de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e07f      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d107      	bne.n	80042ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042be:	4b41      	ldr	r3, [pc, #260]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d109      	bne.n	80042de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e073      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ce:	4b3d      	ldr	r3, [pc, #244]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e06b      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042de:	4b39      	ldr	r3, [pc, #228]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f023 0203 	bic.w	r2, r3, #3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	4936      	ldr	r1, [pc, #216]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042f0:	f7fd ffec 	bl	80022cc <HAL_GetTick>
 80042f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f6:	e00a      	b.n	800430e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f8:	f7fd ffe8 	bl	80022cc <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	f241 3288 	movw	r2, #5000	; 0x1388
 8004306:	4293      	cmp	r3, r2
 8004308:	d901      	bls.n	800430e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e053      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430e:	4b2d      	ldr	r3, [pc, #180]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f003 020c 	and.w	r2, r3, #12
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	429a      	cmp	r2, r3
 800431e:	d1eb      	bne.n	80042f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004320:	4b27      	ldr	r3, [pc, #156]	; (80043c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d210      	bcs.n	8004350 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800432e:	4b24      	ldr	r3, [pc, #144]	; (80043c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f023 0207 	bic.w	r2, r3, #7
 8004336:	4922      	ldr	r1, [pc, #136]	; (80043c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	4313      	orrs	r3, r2
 800433c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800433e:	4b20      	ldr	r3, [pc, #128]	; (80043c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	429a      	cmp	r2, r3
 800434a:	d001      	beq.n	8004350 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e032      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800435c:	4b19      	ldr	r3, [pc, #100]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4916      	ldr	r1, [pc, #88]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 800436a:	4313      	orrs	r3, r2
 800436c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d009      	beq.n	800438e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800437a:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	490e      	ldr	r1, [pc, #56]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 800438a:	4313      	orrs	r3, r2
 800438c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800438e:	f000 f821 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
 8004392:	4602      	mov	r2, r0
 8004394:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	091b      	lsrs	r3, r3, #4
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	490a      	ldr	r1, [pc, #40]	; (80043c8 <HAL_RCC_ClockConfig+0x1c8>)
 80043a0:	5ccb      	ldrb	r3, [r1, r3]
 80043a2:	fa22 f303 	lsr.w	r3, r2, r3
 80043a6:	4a09      	ldr	r2, [pc, #36]	; (80043cc <HAL_RCC_ClockConfig+0x1cc>)
 80043a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043aa:	4b09      	ldr	r3, [pc, #36]	; (80043d0 <HAL_RCC_ClockConfig+0x1d0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fd ff4a 	bl	8002248 <HAL_InitTick>

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40022000 	.word	0x40022000
 80043c4:	40021000 	.word	0x40021000
 80043c8:	08005c10 	.word	0x08005c10
 80043cc:	20000008 	.word	0x20000008
 80043d0:	2000000c 	.word	0x2000000c

080043d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043d4:	b490      	push	{r4, r7}
 80043d6:	b08a      	sub	sp, #40	; 0x28
 80043d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80043da:	4b2a      	ldr	r3, [pc, #168]	; (8004484 <HAL_RCC_GetSysClockFreq+0xb0>)
 80043dc:	1d3c      	adds	r4, r7, #4
 80043de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80043e4:	f240 2301 	movw	r3, #513	; 0x201
 80043e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	61fb      	str	r3, [r7, #28]
 80043ee:	2300      	movs	r3, #0
 80043f0:	61bb      	str	r3, [r7, #24]
 80043f2:	2300      	movs	r3, #0
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
 80043f6:	2300      	movs	r3, #0
 80043f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043fe:	4b22      	ldr	r3, [pc, #136]	; (8004488 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f003 030c 	and.w	r3, r3, #12
 800440a:	2b04      	cmp	r3, #4
 800440c:	d002      	beq.n	8004414 <HAL_RCC_GetSysClockFreq+0x40>
 800440e:	2b08      	cmp	r3, #8
 8004410:	d003      	beq.n	800441a <HAL_RCC_GetSysClockFreq+0x46>
 8004412:	e02d      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004414:	4b1d      	ldr	r3, [pc, #116]	; (800448c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004416:	623b      	str	r3, [r7, #32]
      break;
 8004418:	e02d      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	0c9b      	lsrs	r3, r3, #18
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004426:	4413      	add	r3, r2
 8004428:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800442c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d013      	beq.n	8004460 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004438:	4b13      	ldr	r3, [pc, #76]	; (8004488 <HAL_RCC_GetSysClockFreq+0xb4>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	0c5b      	lsrs	r3, r3, #17
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004446:	4413      	add	r3, r2
 8004448:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800444c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	4a0e      	ldr	r2, [pc, #56]	; (800448c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004452:	fb02 f203 	mul.w	r2, r2, r3
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	fbb2 f3f3 	udiv	r3, r2, r3
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
 800445e:	e004      	b.n	800446a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	4a0b      	ldr	r2, [pc, #44]	; (8004490 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004464:	fb02 f303 	mul.w	r3, r2, r3
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	623b      	str	r3, [r7, #32]
      break;
 800446e:	e002      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004470:	4b06      	ldr	r3, [pc, #24]	; (800448c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004472:	623b      	str	r3, [r7, #32]
      break;
 8004474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004476:	6a3b      	ldr	r3, [r7, #32]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3728      	adds	r7, #40	; 0x28
 800447c:	46bd      	mov	sp, r7
 800447e:	bc90      	pop	{r4, r7}
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	08005b38 	.word	0x08005b38
 8004488:	40021000 	.word	0x40021000
 800448c:	007a1200 	.word	0x007a1200
 8004490:	003d0900 	.word	0x003d0900

08004494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004498:	4b02      	ldr	r3, [pc, #8]	; (80044a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800449a:	681b      	ldr	r3, [r3, #0]
}
 800449c:	4618      	mov	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr
 80044a4:	20000008 	.word	0x20000008

080044a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044ac:	f7ff fff2 	bl	8004494 <HAL_RCC_GetHCLKFreq>
 80044b0:	4602      	mov	r2, r0
 80044b2:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	0a1b      	lsrs	r3, r3, #8
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	4903      	ldr	r1, [pc, #12]	; (80044cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044be:	5ccb      	ldrb	r3, [r1, r3]
 80044c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40021000 	.word	0x40021000
 80044cc:	08005c20 	.word	0x08005c20

080044d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044d8:	4b0a      	ldr	r3, [pc, #40]	; (8004504 <RCC_Delay+0x34>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a0a      	ldr	r2, [pc, #40]	; (8004508 <RCC_Delay+0x38>)
 80044de:	fba2 2303 	umull	r2, r3, r2, r3
 80044e2:	0a5b      	lsrs	r3, r3, #9
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	fb02 f303 	mul.w	r3, r2, r3
 80044ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80044ec:	bf00      	nop
  }
  while (Delay --);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	1e5a      	subs	r2, r3, #1
 80044f2:	60fa      	str	r2, [r7, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1f9      	bne.n	80044ec <RCC_Delay+0x1c>
}
 80044f8:	bf00      	nop
 80044fa:	bf00      	nop
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr
 8004504:	20000008 	.word	0x20000008
 8004508:	10624dd3 	.word	0x10624dd3

0800450c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	613b      	str	r3, [r7, #16]
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d07d      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004528:	2300      	movs	r3, #0
 800452a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800452c:	4b4f      	ldr	r3, [pc, #316]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10d      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004538:	4b4c      	ldr	r3, [pc, #304]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	4a4b      	ldr	r2, [pc, #300]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800453e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004542:	61d3      	str	r3, [r2, #28]
 8004544:	4b49      	ldr	r3, [pc, #292]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454c:	60bb      	str	r3, [r7, #8]
 800454e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004550:	2301      	movs	r3, #1
 8004552:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004554:	4b46      	ldr	r3, [pc, #280]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d118      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004560:	4b43      	ldr	r3, [pc, #268]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a42      	ldr	r2, [pc, #264]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800456a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800456c:	f7fd feae 	bl	80022cc <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004572:	e008      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004574:	f7fd feaa 	bl	80022cc <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b64      	cmp	r3, #100	; 0x64
 8004580:	d901      	bls.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e06d      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004586:	4b3a      	ldr	r3, [pc, #232]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0f0      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004592:	4b36      	ldr	r3, [pc, #216]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800459a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d02e      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d027      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045b0:	4b2e      	ldr	r3, [pc, #184]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045ba:	4b2e      	ldr	r3, [pc, #184]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045bc:	2201      	movs	r2, #1
 80045be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045c0:	4b2c      	ldr	r3, [pc, #176]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045c6:	4a29      	ldr	r2, [pc, #164]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d014      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d6:	f7fd fe79 	bl	80022cc <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045dc:	e00a      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045de:	f7fd fe75 	bl	80022cc <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e036      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f4:	4b1d      	ldr	r3, [pc, #116]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0ee      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004600:	4b1a      	ldr	r3, [pc, #104]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	4917      	ldr	r1, [pc, #92]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800460e:	4313      	orrs	r3, r2
 8004610:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004612:	7dfb      	ldrb	r3, [r7, #23]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d105      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004618:	4b14      	ldr	r3, [pc, #80]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	4a13      	ldr	r2, [pc, #76]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800461e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004622:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d008      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004630:	4b0e      	ldr	r3, [pc, #56]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	490b      	ldr	r1, [pc, #44]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800463e:	4313      	orrs	r3, r2
 8004640:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0310 	and.w	r3, r3, #16
 800464a:	2b00      	cmp	r3, #0
 800464c:	d008      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800464e:	4b07      	ldr	r3, [pc, #28]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	4904      	ldr	r1, [pc, #16]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800465c:	4313      	orrs	r3, r2
 800465e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40021000 	.word	0x40021000
 8004670:	40007000 	.word	0x40007000
 8004674:	42420440 	.word	0x42420440

08004678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e041      	b.n	800470e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7fd fcea 	bl	8002078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	3304      	adds	r3, #4
 80046b4:	4619      	mov	r1, r3
 80046b6:	4610      	mov	r0, r2
 80046b8:	f000 fa98 	bl	8004bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b01      	cmp	r3, #1
 800472a:	d001      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e035      	b.n	800479c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0201 	orr.w	r2, r2, #1
 8004746:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a16      	ldr	r2, [pc, #88]	; (80047a8 <HAL_TIM_Base_Start_IT+0x90>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d009      	beq.n	8004766 <HAL_TIM_Base_Start_IT+0x4e>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475a:	d004      	beq.n	8004766 <HAL_TIM_Base_Start_IT+0x4e>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a12      	ldr	r2, [pc, #72]	; (80047ac <HAL_TIM_Base_Start_IT+0x94>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d111      	bne.n	800478a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2b06      	cmp	r3, #6
 8004776:	d010      	beq.n	800479a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0201 	orr.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004788:	e007      	b.n	800479a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f042 0201 	orr.w	r2, r2, #1
 8004798:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bc80      	pop	{r7}
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	40012c00 	.word	0x40012c00
 80047ac:	40000400 	.word	0x40000400

080047b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0201 	bic.w	r2, r2, #1
 80047c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6a1a      	ldr	r2, [r3, #32]
 80047ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80047d2:	4013      	ands	r3, r2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10f      	bne.n	80047f8 <HAL_TIM_Base_Stop_IT+0x48>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6a1a      	ldr	r2, [r3, #32]
 80047de:	f240 4344 	movw	r3, #1092	; 0x444
 80047e2:	4013      	ands	r3, r2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d107      	bne.n	80047f8 <HAL_TIM_Base_Stop_IT+0x48>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0201 	bic.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	bc80      	pop	{r7}
 800480a:	4770      	bx	lr

0800480c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b02      	cmp	r3, #2
 8004820:	d122      	bne.n	8004868 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b02      	cmp	r3, #2
 800482e:	d11b      	bne.n	8004868 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f06f 0202 	mvn.w	r2, #2
 8004838:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f9b1 	bl	8004bb6 <HAL_TIM_IC_CaptureCallback>
 8004854:	e005      	b.n	8004862 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f9a4 	bl	8004ba4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f9b3 	bl	8004bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	2b04      	cmp	r3, #4
 8004874:	d122      	bne.n	80048bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b04      	cmp	r3, #4
 8004882:	d11b      	bne.n	80048bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f06f 0204 	mvn.w	r2, #4
 800488c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2202      	movs	r2, #2
 8004892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f987 	bl	8004bb6 <HAL_TIM_IC_CaptureCallback>
 80048a8:	e005      	b.n	80048b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f97a 	bl	8004ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f989 	bl	8004bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	2b08      	cmp	r3, #8
 80048c8:	d122      	bne.n	8004910 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d11b      	bne.n	8004910 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f06f 0208 	mvn.w	r2, #8
 80048e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2204      	movs	r2, #4
 80048e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f95d 	bl	8004bb6 <HAL_TIM_IC_CaptureCallback>
 80048fc:	e005      	b.n	800490a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f950 	bl	8004ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f95f 	bl	8004bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	f003 0310 	and.w	r3, r3, #16
 800491a:	2b10      	cmp	r3, #16
 800491c:	d122      	bne.n	8004964 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f003 0310 	and.w	r3, r3, #16
 8004928:	2b10      	cmp	r3, #16
 800492a:	d11b      	bne.n	8004964 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f06f 0210 	mvn.w	r2, #16
 8004934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2208      	movs	r2, #8
 800493a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f933 	bl	8004bb6 <HAL_TIM_IC_CaptureCallback>
 8004950:	e005      	b.n	800495e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f926 	bl	8004ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f935 	bl	8004bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b01      	cmp	r3, #1
 8004970:	d10e      	bne.n	8004990 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b01      	cmp	r3, #1
 800497e:	d107      	bne.n	8004990 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f06f 0201 	mvn.w	r2, #1
 8004988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fd f932 	bl	8001bf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499a:	2b80      	cmp	r3, #128	; 0x80
 800499c:	d10e      	bne.n	80049bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a8:	2b80      	cmp	r3, #128	; 0x80
 80049aa:	d107      	bne.n	80049bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fa67 	bl	8004e8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c6:	2b40      	cmp	r3, #64	; 0x40
 80049c8:	d10e      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d4:	2b40      	cmp	r3, #64	; 0x40
 80049d6:	d107      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f8f9 	bl	8004bda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f003 0320 	and.w	r3, r3, #32
 80049f2:	2b20      	cmp	r3, #32
 80049f4:	d10e      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f003 0320 	and.w	r3, r3, #32
 8004a00:	2b20      	cmp	r3, #32
 8004a02:	d107      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f06f 0220 	mvn.w	r2, #32
 8004a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fa32 	bl	8004e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a14:	bf00      	nop
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_TIM_ConfigClockSource+0x18>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e0b3      	b.n	8004b9c <HAL_TIM_ConfigClockSource+0x180>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a6c:	d03e      	beq.n	8004aec <HAL_TIM_ConfigClockSource+0xd0>
 8004a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a72:	f200 8087 	bhi.w	8004b84 <HAL_TIM_ConfigClockSource+0x168>
 8004a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a7a:	f000 8085 	beq.w	8004b88 <HAL_TIM_ConfigClockSource+0x16c>
 8004a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a82:	d87f      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x168>
 8004a84:	2b70      	cmp	r3, #112	; 0x70
 8004a86:	d01a      	beq.n	8004abe <HAL_TIM_ConfigClockSource+0xa2>
 8004a88:	2b70      	cmp	r3, #112	; 0x70
 8004a8a:	d87b      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x168>
 8004a8c:	2b60      	cmp	r3, #96	; 0x60
 8004a8e:	d050      	beq.n	8004b32 <HAL_TIM_ConfigClockSource+0x116>
 8004a90:	2b60      	cmp	r3, #96	; 0x60
 8004a92:	d877      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x168>
 8004a94:	2b50      	cmp	r3, #80	; 0x50
 8004a96:	d03c      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0xf6>
 8004a98:	2b50      	cmp	r3, #80	; 0x50
 8004a9a:	d873      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x168>
 8004a9c:	2b40      	cmp	r3, #64	; 0x40
 8004a9e:	d058      	beq.n	8004b52 <HAL_TIM_ConfigClockSource+0x136>
 8004aa0:	2b40      	cmp	r3, #64	; 0x40
 8004aa2:	d86f      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x168>
 8004aa4:	2b30      	cmp	r3, #48	; 0x30
 8004aa6:	d064      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0x156>
 8004aa8:	2b30      	cmp	r3, #48	; 0x30
 8004aaa:	d86b      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x168>
 8004aac:	2b20      	cmp	r3, #32
 8004aae:	d060      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0x156>
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	d867      	bhi.n	8004b84 <HAL_TIM_ConfigClockSource+0x168>
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d05c      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0x156>
 8004ab8:	2b10      	cmp	r3, #16
 8004aba:	d05a      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004abc:	e062      	b.n	8004b84 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6818      	ldr	r0, [r3, #0]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	6899      	ldr	r1, [r3, #8]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f000 f95c 	bl	8004d8a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ae0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	609a      	str	r2, [r3, #8]
      break;
 8004aea:	e04e      	b.n	8004b8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6818      	ldr	r0, [r3, #0]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	6899      	ldr	r1, [r3, #8]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f000 f945 	bl	8004d8a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689a      	ldr	r2, [r3, #8]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b0e:	609a      	str	r2, [r3, #8]
      break;
 8004b10:	e03b      	b.n	8004b8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6818      	ldr	r0, [r3, #0]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	6859      	ldr	r1, [r3, #4]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f000 f8bc 	bl	8004c9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2150      	movs	r1, #80	; 0x50
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 f913 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 8004b30:	e02b      	b.n	8004b8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6818      	ldr	r0, [r3, #0]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	6859      	ldr	r1, [r3, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f000 f8da 	bl	8004cf8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2160      	movs	r1, #96	; 0x60
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 f903 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 8004b50:	e01b      	b.n	8004b8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6818      	ldr	r0, [r3, #0]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	6859      	ldr	r1, [r3, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	f000 f89c 	bl	8004c9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2140      	movs	r1, #64	; 0x40
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 f8f3 	bl	8004d56 <TIM_ITRx_SetConfig>
      break;
 8004b70:	e00b      	b.n	8004b8a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	f000 f8ea 	bl	8004d56 <TIM_ITRx_SetConfig>
        break;
 8004b82:	e002      	b.n	8004b8a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b84:	bf00      	nop
 8004b86:	e000      	b.n	8004b8a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b88:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr

08004bb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bc80      	pop	{r7}
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bc80      	pop	{r7}
 8004bd8:	4770      	bx	lr

08004bda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bc80      	pop	{r7}
 8004bea:	4770      	bx	lr

08004bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a25      	ldr	r2, [pc, #148]	; (8004c94 <TIM_Base_SetConfig+0xa8>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d007      	beq.n	8004c14 <TIM_Base_SetConfig+0x28>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0a:	d003      	beq.n	8004c14 <TIM_Base_SetConfig+0x28>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a22      	ldr	r2, [pc, #136]	; (8004c98 <TIM_Base_SetConfig+0xac>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d108      	bne.n	8004c26 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a1a      	ldr	r2, [pc, #104]	; (8004c94 <TIM_Base_SetConfig+0xa8>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d007      	beq.n	8004c3e <TIM_Base_SetConfig+0x52>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c34:	d003      	beq.n	8004c3e <TIM_Base_SetConfig+0x52>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a17      	ldr	r2, [pc, #92]	; (8004c98 <TIM_Base_SetConfig+0xac>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d108      	bne.n	8004c50 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a07      	ldr	r2, [pc, #28]	; (8004c94 <TIM_Base_SetConfig+0xa8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d103      	bne.n	8004c84 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	691a      	ldr	r2, [r3, #16]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	615a      	str	r2, [r3, #20]
}
 8004c8a:	bf00      	nop
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bc80      	pop	{r7}
 8004c92:	4770      	bx	lr
 8004c94:	40012c00 	.word	0x40012c00
 8004c98:	40000400 	.word	0x40000400

08004c9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	f023 0201 	bic.w	r2, r3, #1
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	011b      	lsls	r3, r3, #4
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f023 030a 	bic.w	r3, r3, #10
 8004cd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	621a      	str	r2, [r3, #32]
}
 8004cee:	bf00      	nop
 8004cf0:	371c      	adds	r7, #28
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bc80      	pop	{r7}
 8004cf6:	4770      	bx	lr

08004cf8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	f023 0210 	bic.w	r2, r3, #16
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	031b      	lsls	r3, r3, #12
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	011b      	lsls	r3, r3, #4
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	621a      	str	r2, [r3, #32]
}
 8004d4c:	bf00      	nop
 8004d4e:	371c      	adds	r7, #28
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bc80      	pop	{r7}
 8004d54:	4770      	bx	lr

08004d56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b085      	sub	sp, #20
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f043 0307 	orr.w	r3, r3, #7
 8004d78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	609a      	str	r2, [r3, #8]
}
 8004d80:	bf00      	nop
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bc80      	pop	{r7}
 8004d88:	4770      	bx	lr

08004d8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b087      	sub	sp, #28
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	607a      	str	r2, [r7, #4]
 8004d96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004da4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	021a      	lsls	r2, r3, #8
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	431a      	orrs	r2, r3
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	609a      	str	r2, [r3, #8]
}
 8004dbe:	bf00      	nop
 8004dc0:	371c      	adds	r7, #28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e041      	b.n	8004e64 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a14      	ldr	r2, [pc, #80]	; (8004e70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d009      	beq.n	8004e38 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2c:	d004      	beq.n	8004e38 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a10      	ldr	r2, [pc, #64]	; (8004e74 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d10c      	bne.n	8004e52 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bc80      	pop	{r7}
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	40012c00 	.word	0x40012c00
 8004e74:	40000400 	.word	0x40000400

08004e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bc80      	pop	{r7}
 8004e88:	4770      	bx	lr

08004e8a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b083      	sub	sp, #12
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bc80      	pop	{r7}
 8004e9a:	4770      	bx	lr

08004e9c <__errno>:
 8004e9c:	4b01      	ldr	r3, [pc, #4]	; (8004ea4 <__errno+0x8>)
 8004e9e:	6818      	ldr	r0, [r3, #0]
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	20000014 	.word	0x20000014

08004ea8 <__libc_init_array>:
 8004ea8:	b570      	push	{r4, r5, r6, lr}
 8004eaa:	2600      	movs	r6, #0
 8004eac:	4d0c      	ldr	r5, [pc, #48]	; (8004ee0 <__libc_init_array+0x38>)
 8004eae:	4c0d      	ldr	r4, [pc, #52]	; (8004ee4 <__libc_init_array+0x3c>)
 8004eb0:	1b64      	subs	r4, r4, r5
 8004eb2:	10a4      	asrs	r4, r4, #2
 8004eb4:	42a6      	cmp	r6, r4
 8004eb6:	d109      	bne.n	8004ecc <__libc_init_array+0x24>
 8004eb8:	f000 fc5c 	bl	8005774 <_init>
 8004ebc:	2600      	movs	r6, #0
 8004ebe:	4d0a      	ldr	r5, [pc, #40]	; (8004ee8 <__libc_init_array+0x40>)
 8004ec0:	4c0a      	ldr	r4, [pc, #40]	; (8004eec <__libc_init_array+0x44>)
 8004ec2:	1b64      	subs	r4, r4, r5
 8004ec4:	10a4      	asrs	r4, r4, #2
 8004ec6:	42a6      	cmp	r6, r4
 8004ec8:	d105      	bne.n	8004ed6 <__libc_init_array+0x2e>
 8004eca:	bd70      	pop	{r4, r5, r6, pc}
 8004ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed0:	4798      	blx	r3
 8004ed2:	3601      	adds	r6, #1
 8004ed4:	e7ee      	b.n	8004eb4 <__libc_init_array+0xc>
 8004ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eda:	4798      	blx	r3
 8004edc:	3601      	adds	r6, #1
 8004ede:	e7f2      	b.n	8004ec6 <__libc_init_array+0x1e>
 8004ee0:	08005c5c 	.word	0x08005c5c
 8004ee4:	08005c5c 	.word	0x08005c5c
 8004ee8:	08005c5c 	.word	0x08005c5c
 8004eec:	08005c60 	.word	0x08005c60

08004ef0 <memset>:
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	4402      	add	r2, r0
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d100      	bne.n	8004efa <memset+0xa>
 8004ef8:	4770      	bx	lr
 8004efa:	f803 1b01 	strb.w	r1, [r3], #1
 8004efe:	e7f9      	b.n	8004ef4 <memset+0x4>

08004f00 <siprintf>:
 8004f00:	b40e      	push	{r1, r2, r3}
 8004f02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f06:	b500      	push	{lr}
 8004f08:	b09c      	sub	sp, #112	; 0x70
 8004f0a:	ab1d      	add	r3, sp, #116	; 0x74
 8004f0c:	9002      	str	r0, [sp, #8]
 8004f0e:	9006      	str	r0, [sp, #24]
 8004f10:	9107      	str	r1, [sp, #28]
 8004f12:	9104      	str	r1, [sp, #16]
 8004f14:	4808      	ldr	r0, [pc, #32]	; (8004f38 <siprintf+0x38>)
 8004f16:	4909      	ldr	r1, [pc, #36]	; (8004f3c <siprintf+0x3c>)
 8004f18:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f1c:	9105      	str	r1, [sp, #20]
 8004f1e:	6800      	ldr	r0, [r0, #0]
 8004f20:	a902      	add	r1, sp, #8
 8004f22:	9301      	str	r3, [sp, #4]
 8004f24:	f000 f868 	bl	8004ff8 <_svfiprintf_r>
 8004f28:	2200      	movs	r2, #0
 8004f2a:	9b02      	ldr	r3, [sp, #8]
 8004f2c:	701a      	strb	r2, [r3, #0]
 8004f2e:	b01c      	add	sp, #112	; 0x70
 8004f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f34:	b003      	add	sp, #12
 8004f36:	4770      	bx	lr
 8004f38:	20000014 	.word	0x20000014
 8004f3c:	ffff0208 	.word	0xffff0208

08004f40 <__ssputs_r>:
 8004f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f44:	688e      	ldr	r6, [r1, #8]
 8004f46:	4682      	mov	sl, r0
 8004f48:	429e      	cmp	r6, r3
 8004f4a:	460c      	mov	r4, r1
 8004f4c:	4690      	mov	r8, r2
 8004f4e:	461f      	mov	r7, r3
 8004f50:	d838      	bhi.n	8004fc4 <__ssputs_r+0x84>
 8004f52:	898a      	ldrh	r2, [r1, #12]
 8004f54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f58:	d032      	beq.n	8004fc0 <__ssputs_r+0x80>
 8004f5a:	6825      	ldr	r5, [r4, #0]
 8004f5c:	6909      	ldr	r1, [r1, #16]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	eba5 0901 	sub.w	r9, r5, r1
 8004f64:	6965      	ldr	r5, [r4, #20]
 8004f66:	444b      	add	r3, r9
 8004f68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f70:	106d      	asrs	r5, r5, #1
 8004f72:	429d      	cmp	r5, r3
 8004f74:	bf38      	it	cc
 8004f76:	461d      	movcc	r5, r3
 8004f78:	0553      	lsls	r3, r2, #21
 8004f7a:	d531      	bpl.n	8004fe0 <__ssputs_r+0xa0>
 8004f7c:	4629      	mov	r1, r5
 8004f7e:	f000 fb53 	bl	8005628 <_malloc_r>
 8004f82:	4606      	mov	r6, r0
 8004f84:	b950      	cbnz	r0, 8004f9c <__ssputs_r+0x5c>
 8004f86:	230c      	movs	r3, #12
 8004f88:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8c:	f8ca 3000 	str.w	r3, [sl]
 8004f90:	89a3      	ldrh	r3, [r4, #12]
 8004f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f96:	81a3      	strh	r3, [r4, #12]
 8004f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f9c:	464a      	mov	r2, r9
 8004f9e:	6921      	ldr	r1, [r4, #16]
 8004fa0:	f000 face 	bl	8005540 <memcpy>
 8004fa4:	89a3      	ldrh	r3, [r4, #12]
 8004fa6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fae:	81a3      	strh	r3, [r4, #12]
 8004fb0:	6126      	str	r6, [r4, #16]
 8004fb2:	444e      	add	r6, r9
 8004fb4:	6026      	str	r6, [r4, #0]
 8004fb6:	463e      	mov	r6, r7
 8004fb8:	6165      	str	r5, [r4, #20]
 8004fba:	eba5 0509 	sub.w	r5, r5, r9
 8004fbe:	60a5      	str	r5, [r4, #8]
 8004fc0:	42be      	cmp	r6, r7
 8004fc2:	d900      	bls.n	8004fc6 <__ssputs_r+0x86>
 8004fc4:	463e      	mov	r6, r7
 8004fc6:	4632      	mov	r2, r6
 8004fc8:	4641      	mov	r1, r8
 8004fca:	6820      	ldr	r0, [r4, #0]
 8004fcc:	f000 fac6 	bl	800555c <memmove>
 8004fd0:	68a3      	ldr	r3, [r4, #8]
 8004fd2:	6822      	ldr	r2, [r4, #0]
 8004fd4:	1b9b      	subs	r3, r3, r6
 8004fd6:	4432      	add	r2, r6
 8004fd8:	2000      	movs	r0, #0
 8004fda:	60a3      	str	r3, [r4, #8]
 8004fdc:	6022      	str	r2, [r4, #0]
 8004fde:	e7db      	b.n	8004f98 <__ssputs_r+0x58>
 8004fe0:	462a      	mov	r2, r5
 8004fe2:	f000 fb7b 	bl	80056dc <_realloc_r>
 8004fe6:	4606      	mov	r6, r0
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	d1e1      	bne.n	8004fb0 <__ssputs_r+0x70>
 8004fec:	4650      	mov	r0, sl
 8004fee:	6921      	ldr	r1, [r4, #16]
 8004ff0:	f000 face 	bl	8005590 <_free_r>
 8004ff4:	e7c7      	b.n	8004f86 <__ssputs_r+0x46>
	...

08004ff8 <_svfiprintf_r>:
 8004ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ffc:	4698      	mov	r8, r3
 8004ffe:	898b      	ldrh	r3, [r1, #12]
 8005000:	4607      	mov	r7, r0
 8005002:	061b      	lsls	r3, r3, #24
 8005004:	460d      	mov	r5, r1
 8005006:	4614      	mov	r4, r2
 8005008:	b09d      	sub	sp, #116	; 0x74
 800500a:	d50e      	bpl.n	800502a <_svfiprintf_r+0x32>
 800500c:	690b      	ldr	r3, [r1, #16]
 800500e:	b963      	cbnz	r3, 800502a <_svfiprintf_r+0x32>
 8005010:	2140      	movs	r1, #64	; 0x40
 8005012:	f000 fb09 	bl	8005628 <_malloc_r>
 8005016:	6028      	str	r0, [r5, #0]
 8005018:	6128      	str	r0, [r5, #16]
 800501a:	b920      	cbnz	r0, 8005026 <_svfiprintf_r+0x2e>
 800501c:	230c      	movs	r3, #12
 800501e:	603b      	str	r3, [r7, #0]
 8005020:	f04f 30ff 	mov.w	r0, #4294967295
 8005024:	e0d1      	b.n	80051ca <_svfiprintf_r+0x1d2>
 8005026:	2340      	movs	r3, #64	; 0x40
 8005028:	616b      	str	r3, [r5, #20]
 800502a:	2300      	movs	r3, #0
 800502c:	9309      	str	r3, [sp, #36]	; 0x24
 800502e:	2320      	movs	r3, #32
 8005030:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005034:	2330      	movs	r3, #48	; 0x30
 8005036:	f04f 0901 	mov.w	r9, #1
 800503a:	f8cd 800c 	str.w	r8, [sp, #12]
 800503e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80051e4 <_svfiprintf_r+0x1ec>
 8005042:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005046:	4623      	mov	r3, r4
 8005048:	469a      	mov	sl, r3
 800504a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800504e:	b10a      	cbz	r2, 8005054 <_svfiprintf_r+0x5c>
 8005050:	2a25      	cmp	r2, #37	; 0x25
 8005052:	d1f9      	bne.n	8005048 <_svfiprintf_r+0x50>
 8005054:	ebba 0b04 	subs.w	fp, sl, r4
 8005058:	d00b      	beq.n	8005072 <_svfiprintf_r+0x7a>
 800505a:	465b      	mov	r3, fp
 800505c:	4622      	mov	r2, r4
 800505e:	4629      	mov	r1, r5
 8005060:	4638      	mov	r0, r7
 8005062:	f7ff ff6d 	bl	8004f40 <__ssputs_r>
 8005066:	3001      	adds	r0, #1
 8005068:	f000 80aa 	beq.w	80051c0 <_svfiprintf_r+0x1c8>
 800506c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800506e:	445a      	add	r2, fp
 8005070:	9209      	str	r2, [sp, #36]	; 0x24
 8005072:	f89a 3000 	ldrb.w	r3, [sl]
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 80a2 	beq.w	80051c0 <_svfiprintf_r+0x1c8>
 800507c:	2300      	movs	r3, #0
 800507e:	f04f 32ff 	mov.w	r2, #4294967295
 8005082:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005086:	f10a 0a01 	add.w	sl, sl, #1
 800508a:	9304      	str	r3, [sp, #16]
 800508c:	9307      	str	r3, [sp, #28]
 800508e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005092:	931a      	str	r3, [sp, #104]	; 0x68
 8005094:	4654      	mov	r4, sl
 8005096:	2205      	movs	r2, #5
 8005098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800509c:	4851      	ldr	r0, [pc, #324]	; (80051e4 <_svfiprintf_r+0x1ec>)
 800509e:	f000 fa41 	bl	8005524 <memchr>
 80050a2:	9a04      	ldr	r2, [sp, #16]
 80050a4:	b9d8      	cbnz	r0, 80050de <_svfiprintf_r+0xe6>
 80050a6:	06d0      	lsls	r0, r2, #27
 80050a8:	bf44      	itt	mi
 80050aa:	2320      	movmi	r3, #32
 80050ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050b0:	0711      	lsls	r1, r2, #28
 80050b2:	bf44      	itt	mi
 80050b4:	232b      	movmi	r3, #43	; 0x2b
 80050b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050ba:	f89a 3000 	ldrb.w	r3, [sl]
 80050be:	2b2a      	cmp	r3, #42	; 0x2a
 80050c0:	d015      	beq.n	80050ee <_svfiprintf_r+0xf6>
 80050c2:	4654      	mov	r4, sl
 80050c4:	2000      	movs	r0, #0
 80050c6:	f04f 0c0a 	mov.w	ip, #10
 80050ca:	9a07      	ldr	r2, [sp, #28]
 80050cc:	4621      	mov	r1, r4
 80050ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050d2:	3b30      	subs	r3, #48	; 0x30
 80050d4:	2b09      	cmp	r3, #9
 80050d6:	d94e      	bls.n	8005176 <_svfiprintf_r+0x17e>
 80050d8:	b1b0      	cbz	r0, 8005108 <_svfiprintf_r+0x110>
 80050da:	9207      	str	r2, [sp, #28]
 80050dc:	e014      	b.n	8005108 <_svfiprintf_r+0x110>
 80050de:	eba0 0308 	sub.w	r3, r0, r8
 80050e2:	fa09 f303 	lsl.w	r3, r9, r3
 80050e6:	4313      	orrs	r3, r2
 80050e8:	46a2      	mov	sl, r4
 80050ea:	9304      	str	r3, [sp, #16]
 80050ec:	e7d2      	b.n	8005094 <_svfiprintf_r+0x9c>
 80050ee:	9b03      	ldr	r3, [sp, #12]
 80050f0:	1d19      	adds	r1, r3, #4
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	9103      	str	r1, [sp, #12]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	bfbb      	ittet	lt
 80050fa:	425b      	neglt	r3, r3
 80050fc:	f042 0202 	orrlt.w	r2, r2, #2
 8005100:	9307      	strge	r3, [sp, #28]
 8005102:	9307      	strlt	r3, [sp, #28]
 8005104:	bfb8      	it	lt
 8005106:	9204      	strlt	r2, [sp, #16]
 8005108:	7823      	ldrb	r3, [r4, #0]
 800510a:	2b2e      	cmp	r3, #46	; 0x2e
 800510c:	d10c      	bne.n	8005128 <_svfiprintf_r+0x130>
 800510e:	7863      	ldrb	r3, [r4, #1]
 8005110:	2b2a      	cmp	r3, #42	; 0x2a
 8005112:	d135      	bne.n	8005180 <_svfiprintf_r+0x188>
 8005114:	9b03      	ldr	r3, [sp, #12]
 8005116:	3402      	adds	r4, #2
 8005118:	1d1a      	adds	r2, r3, #4
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	9203      	str	r2, [sp, #12]
 800511e:	2b00      	cmp	r3, #0
 8005120:	bfb8      	it	lt
 8005122:	f04f 33ff 	movlt.w	r3, #4294967295
 8005126:	9305      	str	r3, [sp, #20]
 8005128:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80051f4 <_svfiprintf_r+0x1fc>
 800512c:	2203      	movs	r2, #3
 800512e:	4650      	mov	r0, sl
 8005130:	7821      	ldrb	r1, [r4, #0]
 8005132:	f000 f9f7 	bl	8005524 <memchr>
 8005136:	b140      	cbz	r0, 800514a <_svfiprintf_r+0x152>
 8005138:	2340      	movs	r3, #64	; 0x40
 800513a:	eba0 000a 	sub.w	r0, r0, sl
 800513e:	fa03 f000 	lsl.w	r0, r3, r0
 8005142:	9b04      	ldr	r3, [sp, #16]
 8005144:	3401      	adds	r4, #1
 8005146:	4303      	orrs	r3, r0
 8005148:	9304      	str	r3, [sp, #16]
 800514a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800514e:	2206      	movs	r2, #6
 8005150:	4825      	ldr	r0, [pc, #148]	; (80051e8 <_svfiprintf_r+0x1f0>)
 8005152:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005156:	f000 f9e5 	bl	8005524 <memchr>
 800515a:	2800      	cmp	r0, #0
 800515c:	d038      	beq.n	80051d0 <_svfiprintf_r+0x1d8>
 800515e:	4b23      	ldr	r3, [pc, #140]	; (80051ec <_svfiprintf_r+0x1f4>)
 8005160:	bb1b      	cbnz	r3, 80051aa <_svfiprintf_r+0x1b2>
 8005162:	9b03      	ldr	r3, [sp, #12]
 8005164:	3307      	adds	r3, #7
 8005166:	f023 0307 	bic.w	r3, r3, #7
 800516a:	3308      	adds	r3, #8
 800516c:	9303      	str	r3, [sp, #12]
 800516e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005170:	4433      	add	r3, r6
 8005172:	9309      	str	r3, [sp, #36]	; 0x24
 8005174:	e767      	b.n	8005046 <_svfiprintf_r+0x4e>
 8005176:	460c      	mov	r4, r1
 8005178:	2001      	movs	r0, #1
 800517a:	fb0c 3202 	mla	r2, ip, r2, r3
 800517e:	e7a5      	b.n	80050cc <_svfiprintf_r+0xd4>
 8005180:	2300      	movs	r3, #0
 8005182:	f04f 0c0a 	mov.w	ip, #10
 8005186:	4619      	mov	r1, r3
 8005188:	3401      	adds	r4, #1
 800518a:	9305      	str	r3, [sp, #20]
 800518c:	4620      	mov	r0, r4
 800518e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005192:	3a30      	subs	r2, #48	; 0x30
 8005194:	2a09      	cmp	r2, #9
 8005196:	d903      	bls.n	80051a0 <_svfiprintf_r+0x1a8>
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0c5      	beq.n	8005128 <_svfiprintf_r+0x130>
 800519c:	9105      	str	r1, [sp, #20]
 800519e:	e7c3      	b.n	8005128 <_svfiprintf_r+0x130>
 80051a0:	4604      	mov	r4, r0
 80051a2:	2301      	movs	r3, #1
 80051a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80051a8:	e7f0      	b.n	800518c <_svfiprintf_r+0x194>
 80051aa:	ab03      	add	r3, sp, #12
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	462a      	mov	r2, r5
 80051b0:	4638      	mov	r0, r7
 80051b2:	4b0f      	ldr	r3, [pc, #60]	; (80051f0 <_svfiprintf_r+0x1f8>)
 80051b4:	a904      	add	r1, sp, #16
 80051b6:	f3af 8000 	nop.w
 80051ba:	1c42      	adds	r2, r0, #1
 80051bc:	4606      	mov	r6, r0
 80051be:	d1d6      	bne.n	800516e <_svfiprintf_r+0x176>
 80051c0:	89ab      	ldrh	r3, [r5, #12]
 80051c2:	065b      	lsls	r3, r3, #25
 80051c4:	f53f af2c 	bmi.w	8005020 <_svfiprintf_r+0x28>
 80051c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051ca:	b01d      	add	sp, #116	; 0x74
 80051cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d0:	ab03      	add	r3, sp, #12
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	462a      	mov	r2, r5
 80051d6:	4638      	mov	r0, r7
 80051d8:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <_svfiprintf_r+0x1f8>)
 80051da:	a904      	add	r1, sp, #16
 80051dc:	f000 f87c 	bl	80052d8 <_printf_i>
 80051e0:	e7eb      	b.n	80051ba <_svfiprintf_r+0x1c2>
 80051e2:	bf00      	nop
 80051e4:	08005c28 	.word	0x08005c28
 80051e8:	08005c32 	.word	0x08005c32
 80051ec:	00000000 	.word	0x00000000
 80051f0:	08004f41 	.word	0x08004f41
 80051f4:	08005c2e 	.word	0x08005c2e

080051f8 <_printf_common>:
 80051f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051fc:	4616      	mov	r6, r2
 80051fe:	4699      	mov	r9, r3
 8005200:	688a      	ldr	r2, [r1, #8]
 8005202:	690b      	ldr	r3, [r1, #16]
 8005204:	4607      	mov	r7, r0
 8005206:	4293      	cmp	r3, r2
 8005208:	bfb8      	it	lt
 800520a:	4613      	movlt	r3, r2
 800520c:	6033      	str	r3, [r6, #0]
 800520e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005212:	460c      	mov	r4, r1
 8005214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005218:	b10a      	cbz	r2, 800521e <_printf_common+0x26>
 800521a:	3301      	adds	r3, #1
 800521c:	6033      	str	r3, [r6, #0]
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	0699      	lsls	r1, r3, #26
 8005222:	bf42      	ittt	mi
 8005224:	6833      	ldrmi	r3, [r6, #0]
 8005226:	3302      	addmi	r3, #2
 8005228:	6033      	strmi	r3, [r6, #0]
 800522a:	6825      	ldr	r5, [r4, #0]
 800522c:	f015 0506 	ands.w	r5, r5, #6
 8005230:	d106      	bne.n	8005240 <_printf_common+0x48>
 8005232:	f104 0a19 	add.w	sl, r4, #25
 8005236:	68e3      	ldr	r3, [r4, #12]
 8005238:	6832      	ldr	r2, [r6, #0]
 800523a:	1a9b      	subs	r3, r3, r2
 800523c:	42ab      	cmp	r3, r5
 800523e:	dc28      	bgt.n	8005292 <_printf_common+0x9a>
 8005240:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005244:	1e13      	subs	r3, r2, #0
 8005246:	6822      	ldr	r2, [r4, #0]
 8005248:	bf18      	it	ne
 800524a:	2301      	movne	r3, #1
 800524c:	0692      	lsls	r2, r2, #26
 800524e:	d42d      	bmi.n	80052ac <_printf_common+0xb4>
 8005250:	4649      	mov	r1, r9
 8005252:	4638      	mov	r0, r7
 8005254:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005258:	47c0      	blx	r8
 800525a:	3001      	adds	r0, #1
 800525c:	d020      	beq.n	80052a0 <_printf_common+0xa8>
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	68e5      	ldr	r5, [r4, #12]
 8005262:	f003 0306 	and.w	r3, r3, #6
 8005266:	2b04      	cmp	r3, #4
 8005268:	bf18      	it	ne
 800526a:	2500      	movne	r5, #0
 800526c:	6832      	ldr	r2, [r6, #0]
 800526e:	f04f 0600 	mov.w	r6, #0
 8005272:	68a3      	ldr	r3, [r4, #8]
 8005274:	bf08      	it	eq
 8005276:	1aad      	subeq	r5, r5, r2
 8005278:	6922      	ldr	r2, [r4, #16]
 800527a:	bf08      	it	eq
 800527c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005280:	4293      	cmp	r3, r2
 8005282:	bfc4      	itt	gt
 8005284:	1a9b      	subgt	r3, r3, r2
 8005286:	18ed      	addgt	r5, r5, r3
 8005288:	341a      	adds	r4, #26
 800528a:	42b5      	cmp	r5, r6
 800528c:	d11a      	bne.n	80052c4 <_printf_common+0xcc>
 800528e:	2000      	movs	r0, #0
 8005290:	e008      	b.n	80052a4 <_printf_common+0xac>
 8005292:	2301      	movs	r3, #1
 8005294:	4652      	mov	r2, sl
 8005296:	4649      	mov	r1, r9
 8005298:	4638      	mov	r0, r7
 800529a:	47c0      	blx	r8
 800529c:	3001      	adds	r0, #1
 800529e:	d103      	bne.n	80052a8 <_printf_common+0xb0>
 80052a0:	f04f 30ff 	mov.w	r0, #4294967295
 80052a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a8:	3501      	adds	r5, #1
 80052aa:	e7c4      	b.n	8005236 <_printf_common+0x3e>
 80052ac:	2030      	movs	r0, #48	; 0x30
 80052ae:	18e1      	adds	r1, r4, r3
 80052b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052b4:	1c5a      	adds	r2, r3, #1
 80052b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052ba:	4422      	add	r2, r4
 80052bc:	3302      	adds	r3, #2
 80052be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052c2:	e7c5      	b.n	8005250 <_printf_common+0x58>
 80052c4:	2301      	movs	r3, #1
 80052c6:	4622      	mov	r2, r4
 80052c8:	4649      	mov	r1, r9
 80052ca:	4638      	mov	r0, r7
 80052cc:	47c0      	blx	r8
 80052ce:	3001      	adds	r0, #1
 80052d0:	d0e6      	beq.n	80052a0 <_printf_common+0xa8>
 80052d2:	3601      	adds	r6, #1
 80052d4:	e7d9      	b.n	800528a <_printf_common+0x92>
	...

080052d8 <_printf_i>:
 80052d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052dc:	460c      	mov	r4, r1
 80052de:	7e27      	ldrb	r7, [r4, #24]
 80052e0:	4691      	mov	r9, r2
 80052e2:	2f78      	cmp	r7, #120	; 0x78
 80052e4:	4680      	mov	r8, r0
 80052e6:	469a      	mov	sl, r3
 80052e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80052ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052ee:	d807      	bhi.n	8005300 <_printf_i+0x28>
 80052f0:	2f62      	cmp	r7, #98	; 0x62
 80052f2:	d80a      	bhi.n	800530a <_printf_i+0x32>
 80052f4:	2f00      	cmp	r7, #0
 80052f6:	f000 80d9 	beq.w	80054ac <_printf_i+0x1d4>
 80052fa:	2f58      	cmp	r7, #88	; 0x58
 80052fc:	f000 80a4 	beq.w	8005448 <_printf_i+0x170>
 8005300:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005304:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005308:	e03a      	b.n	8005380 <_printf_i+0xa8>
 800530a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800530e:	2b15      	cmp	r3, #21
 8005310:	d8f6      	bhi.n	8005300 <_printf_i+0x28>
 8005312:	a001      	add	r0, pc, #4	; (adr r0, 8005318 <_printf_i+0x40>)
 8005314:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005318:	08005371 	.word	0x08005371
 800531c:	08005385 	.word	0x08005385
 8005320:	08005301 	.word	0x08005301
 8005324:	08005301 	.word	0x08005301
 8005328:	08005301 	.word	0x08005301
 800532c:	08005301 	.word	0x08005301
 8005330:	08005385 	.word	0x08005385
 8005334:	08005301 	.word	0x08005301
 8005338:	08005301 	.word	0x08005301
 800533c:	08005301 	.word	0x08005301
 8005340:	08005301 	.word	0x08005301
 8005344:	08005493 	.word	0x08005493
 8005348:	080053b5 	.word	0x080053b5
 800534c:	08005475 	.word	0x08005475
 8005350:	08005301 	.word	0x08005301
 8005354:	08005301 	.word	0x08005301
 8005358:	080054b5 	.word	0x080054b5
 800535c:	08005301 	.word	0x08005301
 8005360:	080053b5 	.word	0x080053b5
 8005364:	08005301 	.word	0x08005301
 8005368:	08005301 	.word	0x08005301
 800536c:	0800547d 	.word	0x0800547d
 8005370:	680b      	ldr	r3, [r1, #0]
 8005372:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005376:	1d1a      	adds	r2, r3, #4
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	600a      	str	r2, [r1, #0]
 800537c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005380:	2301      	movs	r3, #1
 8005382:	e0a4      	b.n	80054ce <_printf_i+0x1f6>
 8005384:	6825      	ldr	r5, [r4, #0]
 8005386:	6808      	ldr	r0, [r1, #0]
 8005388:	062e      	lsls	r6, r5, #24
 800538a:	f100 0304 	add.w	r3, r0, #4
 800538e:	d50a      	bpl.n	80053a6 <_printf_i+0xce>
 8005390:	6805      	ldr	r5, [r0, #0]
 8005392:	600b      	str	r3, [r1, #0]
 8005394:	2d00      	cmp	r5, #0
 8005396:	da03      	bge.n	80053a0 <_printf_i+0xc8>
 8005398:	232d      	movs	r3, #45	; 0x2d
 800539a:	426d      	negs	r5, r5
 800539c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053a0:	230a      	movs	r3, #10
 80053a2:	485e      	ldr	r0, [pc, #376]	; (800551c <_printf_i+0x244>)
 80053a4:	e019      	b.n	80053da <_printf_i+0x102>
 80053a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80053aa:	6805      	ldr	r5, [r0, #0]
 80053ac:	600b      	str	r3, [r1, #0]
 80053ae:	bf18      	it	ne
 80053b0:	b22d      	sxthne	r5, r5
 80053b2:	e7ef      	b.n	8005394 <_printf_i+0xbc>
 80053b4:	680b      	ldr	r3, [r1, #0]
 80053b6:	6825      	ldr	r5, [r4, #0]
 80053b8:	1d18      	adds	r0, r3, #4
 80053ba:	6008      	str	r0, [r1, #0]
 80053bc:	0628      	lsls	r0, r5, #24
 80053be:	d501      	bpl.n	80053c4 <_printf_i+0xec>
 80053c0:	681d      	ldr	r5, [r3, #0]
 80053c2:	e002      	b.n	80053ca <_printf_i+0xf2>
 80053c4:	0669      	lsls	r1, r5, #25
 80053c6:	d5fb      	bpl.n	80053c0 <_printf_i+0xe8>
 80053c8:	881d      	ldrh	r5, [r3, #0]
 80053ca:	2f6f      	cmp	r7, #111	; 0x6f
 80053cc:	bf0c      	ite	eq
 80053ce:	2308      	moveq	r3, #8
 80053d0:	230a      	movne	r3, #10
 80053d2:	4852      	ldr	r0, [pc, #328]	; (800551c <_printf_i+0x244>)
 80053d4:	2100      	movs	r1, #0
 80053d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053da:	6866      	ldr	r6, [r4, #4]
 80053dc:	2e00      	cmp	r6, #0
 80053de:	bfa8      	it	ge
 80053e0:	6821      	ldrge	r1, [r4, #0]
 80053e2:	60a6      	str	r6, [r4, #8]
 80053e4:	bfa4      	itt	ge
 80053e6:	f021 0104 	bicge.w	r1, r1, #4
 80053ea:	6021      	strge	r1, [r4, #0]
 80053ec:	b90d      	cbnz	r5, 80053f2 <_printf_i+0x11a>
 80053ee:	2e00      	cmp	r6, #0
 80053f0:	d04d      	beq.n	800548e <_printf_i+0x1b6>
 80053f2:	4616      	mov	r6, r2
 80053f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80053f8:	fb03 5711 	mls	r7, r3, r1, r5
 80053fc:	5dc7      	ldrb	r7, [r0, r7]
 80053fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005402:	462f      	mov	r7, r5
 8005404:	42bb      	cmp	r3, r7
 8005406:	460d      	mov	r5, r1
 8005408:	d9f4      	bls.n	80053f4 <_printf_i+0x11c>
 800540a:	2b08      	cmp	r3, #8
 800540c:	d10b      	bne.n	8005426 <_printf_i+0x14e>
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	07df      	lsls	r7, r3, #31
 8005412:	d508      	bpl.n	8005426 <_printf_i+0x14e>
 8005414:	6923      	ldr	r3, [r4, #16]
 8005416:	6861      	ldr	r1, [r4, #4]
 8005418:	4299      	cmp	r1, r3
 800541a:	bfde      	ittt	le
 800541c:	2330      	movle	r3, #48	; 0x30
 800541e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005422:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005426:	1b92      	subs	r2, r2, r6
 8005428:	6122      	str	r2, [r4, #16]
 800542a:	464b      	mov	r3, r9
 800542c:	4621      	mov	r1, r4
 800542e:	4640      	mov	r0, r8
 8005430:	f8cd a000 	str.w	sl, [sp]
 8005434:	aa03      	add	r2, sp, #12
 8005436:	f7ff fedf 	bl	80051f8 <_printf_common>
 800543a:	3001      	adds	r0, #1
 800543c:	d14c      	bne.n	80054d8 <_printf_i+0x200>
 800543e:	f04f 30ff 	mov.w	r0, #4294967295
 8005442:	b004      	add	sp, #16
 8005444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005448:	4834      	ldr	r0, [pc, #208]	; (800551c <_printf_i+0x244>)
 800544a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800544e:	680e      	ldr	r6, [r1, #0]
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	f856 5b04 	ldr.w	r5, [r6], #4
 8005456:	061f      	lsls	r7, r3, #24
 8005458:	600e      	str	r6, [r1, #0]
 800545a:	d514      	bpl.n	8005486 <_printf_i+0x1ae>
 800545c:	07d9      	lsls	r1, r3, #31
 800545e:	bf44      	itt	mi
 8005460:	f043 0320 	orrmi.w	r3, r3, #32
 8005464:	6023      	strmi	r3, [r4, #0]
 8005466:	b91d      	cbnz	r5, 8005470 <_printf_i+0x198>
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	f023 0320 	bic.w	r3, r3, #32
 800546e:	6023      	str	r3, [r4, #0]
 8005470:	2310      	movs	r3, #16
 8005472:	e7af      	b.n	80053d4 <_printf_i+0xfc>
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	f043 0320 	orr.w	r3, r3, #32
 800547a:	6023      	str	r3, [r4, #0]
 800547c:	2378      	movs	r3, #120	; 0x78
 800547e:	4828      	ldr	r0, [pc, #160]	; (8005520 <_printf_i+0x248>)
 8005480:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005484:	e7e3      	b.n	800544e <_printf_i+0x176>
 8005486:	065e      	lsls	r6, r3, #25
 8005488:	bf48      	it	mi
 800548a:	b2ad      	uxthmi	r5, r5
 800548c:	e7e6      	b.n	800545c <_printf_i+0x184>
 800548e:	4616      	mov	r6, r2
 8005490:	e7bb      	b.n	800540a <_printf_i+0x132>
 8005492:	680b      	ldr	r3, [r1, #0]
 8005494:	6826      	ldr	r6, [r4, #0]
 8005496:	1d1d      	adds	r5, r3, #4
 8005498:	6960      	ldr	r0, [r4, #20]
 800549a:	600d      	str	r5, [r1, #0]
 800549c:	0635      	lsls	r5, r6, #24
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	d501      	bpl.n	80054a6 <_printf_i+0x1ce>
 80054a2:	6018      	str	r0, [r3, #0]
 80054a4:	e002      	b.n	80054ac <_printf_i+0x1d4>
 80054a6:	0671      	lsls	r1, r6, #25
 80054a8:	d5fb      	bpl.n	80054a2 <_printf_i+0x1ca>
 80054aa:	8018      	strh	r0, [r3, #0]
 80054ac:	2300      	movs	r3, #0
 80054ae:	4616      	mov	r6, r2
 80054b0:	6123      	str	r3, [r4, #16]
 80054b2:	e7ba      	b.n	800542a <_printf_i+0x152>
 80054b4:	680b      	ldr	r3, [r1, #0]
 80054b6:	1d1a      	adds	r2, r3, #4
 80054b8:	600a      	str	r2, [r1, #0]
 80054ba:	681e      	ldr	r6, [r3, #0]
 80054bc:	2100      	movs	r1, #0
 80054be:	4630      	mov	r0, r6
 80054c0:	6862      	ldr	r2, [r4, #4]
 80054c2:	f000 f82f 	bl	8005524 <memchr>
 80054c6:	b108      	cbz	r0, 80054cc <_printf_i+0x1f4>
 80054c8:	1b80      	subs	r0, r0, r6
 80054ca:	6060      	str	r0, [r4, #4]
 80054cc:	6863      	ldr	r3, [r4, #4]
 80054ce:	6123      	str	r3, [r4, #16]
 80054d0:	2300      	movs	r3, #0
 80054d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054d6:	e7a8      	b.n	800542a <_printf_i+0x152>
 80054d8:	4632      	mov	r2, r6
 80054da:	4649      	mov	r1, r9
 80054dc:	4640      	mov	r0, r8
 80054de:	6923      	ldr	r3, [r4, #16]
 80054e0:	47d0      	blx	sl
 80054e2:	3001      	adds	r0, #1
 80054e4:	d0ab      	beq.n	800543e <_printf_i+0x166>
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	079b      	lsls	r3, r3, #30
 80054ea:	d413      	bmi.n	8005514 <_printf_i+0x23c>
 80054ec:	68e0      	ldr	r0, [r4, #12]
 80054ee:	9b03      	ldr	r3, [sp, #12]
 80054f0:	4298      	cmp	r0, r3
 80054f2:	bfb8      	it	lt
 80054f4:	4618      	movlt	r0, r3
 80054f6:	e7a4      	b.n	8005442 <_printf_i+0x16a>
 80054f8:	2301      	movs	r3, #1
 80054fa:	4632      	mov	r2, r6
 80054fc:	4649      	mov	r1, r9
 80054fe:	4640      	mov	r0, r8
 8005500:	47d0      	blx	sl
 8005502:	3001      	adds	r0, #1
 8005504:	d09b      	beq.n	800543e <_printf_i+0x166>
 8005506:	3501      	adds	r5, #1
 8005508:	68e3      	ldr	r3, [r4, #12]
 800550a:	9903      	ldr	r1, [sp, #12]
 800550c:	1a5b      	subs	r3, r3, r1
 800550e:	42ab      	cmp	r3, r5
 8005510:	dcf2      	bgt.n	80054f8 <_printf_i+0x220>
 8005512:	e7eb      	b.n	80054ec <_printf_i+0x214>
 8005514:	2500      	movs	r5, #0
 8005516:	f104 0619 	add.w	r6, r4, #25
 800551a:	e7f5      	b.n	8005508 <_printf_i+0x230>
 800551c:	08005c39 	.word	0x08005c39
 8005520:	08005c4a 	.word	0x08005c4a

08005524 <memchr>:
 8005524:	4603      	mov	r3, r0
 8005526:	b510      	push	{r4, lr}
 8005528:	b2c9      	uxtb	r1, r1
 800552a:	4402      	add	r2, r0
 800552c:	4293      	cmp	r3, r2
 800552e:	4618      	mov	r0, r3
 8005530:	d101      	bne.n	8005536 <memchr+0x12>
 8005532:	2000      	movs	r0, #0
 8005534:	e003      	b.n	800553e <memchr+0x1a>
 8005536:	7804      	ldrb	r4, [r0, #0]
 8005538:	3301      	adds	r3, #1
 800553a:	428c      	cmp	r4, r1
 800553c:	d1f6      	bne.n	800552c <memchr+0x8>
 800553e:	bd10      	pop	{r4, pc}

08005540 <memcpy>:
 8005540:	440a      	add	r2, r1
 8005542:	4291      	cmp	r1, r2
 8005544:	f100 33ff 	add.w	r3, r0, #4294967295
 8005548:	d100      	bne.n	800554c <memcpy+0xc>
 800554a:	4770      	bx	lr
 800554c:	b510      	push	{r4, lr}
 800554e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005552:	4291      	cmp	r1, r2
 8005554:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005558:	d1f9      	bne.n	800554e <memcpy+0xe>
 800555a:	bd10      	pop	{r4, pc}

0800555c <memmove>:
 800555c:	4288      	cmp	r0, r1
 800555e:	b510      	push	{r4, lr}
 8005560:	eb01 0402 	add.w	r4, r1, r2
 8005564:	d902      	bls.n	800556c <memmove+0x10>
 8005566:	4284      	cmp	r4, r0
 8005568:	4623      	mov	r3, r4
 800556a:	d807      	bhi.n	800557c <memmove+0x20>
 800556c:	1e43      	subs	r3, r0, #1
 800556e:	42a1      	cmp	r1, r4
 8005570:	d008      	beq.n	8005584 <memmove+0x28>
 8005572:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005576:	f803 2f01 	strb.w	r2, [r3, #1]!
 800557a:	e7f8      	b.n	800556e <memmove+0x12>
 800557c:	4601      	mov	r1, r0
 800557e:	4402      	add	r2, r0
 8005580:	428a      	cmp	r2, r1
 8005582:	d100      	bne.n	8005586 <memmove+0x2a>
 8005584:	bd10      	pop	{r4, pc}
 8005586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800558a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800558e:	e7f7      	b.n	8005580 <memmove+0x24>

08005590 <_free_r>:
 8005590:	b538      	push	{r3, r4, r5, lr}
 8005592:	4605      	mov	r5, r0
 8005594:	2900      	cmp	r1, #0
 8005596:	d043      	beq.n	8005620 <_free_r+0x90>
 8005598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800559c:	1f0c      	subs	r4, r1, #4
 800559e:	2b00      	cmp	r3, #0
 80055a0:	bfb8      	it	lt
 80055a2:	18e4      	addlt	r4, r4, r3
 80055a4:	f000 f8d0 	bl	8005748 <__malloc_lock>
 80055a8:	4a1e      	ldr	r2, [pc, #120]	; (8005624 <_free_r+0x94>)
 80055aa:	6813      	ldr	r3, [r2, #0]
 80055ac:	4610      	mov	r0, r2
 80055ae:	b933      	cbnz	r3, 80055be <_free_r+0x2e>
 80055b0:	6063      	str	r3, [r4, #4]
 80055b2:	6014      	str	r4, [r2, #0]
 80055b4:	4628      	mov	r0, r5
 80055b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055ba:	f000 b8cb 	b.w	8005754 <__malloc_unlock>
 80055be:	42a3      	cmp	r3, r4
 80055c0:	d90a      	bls.n	80055d8 <_free_r+0x48>
 80055c2:	6821      	ldr	r1, [r4, #0]
 80055c4:	1862      	adds	r2, r4, r1
 80055c6:	4293      	cmp	r3, r2
 80055c8:	bf01      	itttt	eq
 80055ca:	681a      	ldreq	r2, [r3, #0]
 80055cc:	685b      	ldreq	r3, [r3, #4]
 80055ce:	1852      	addeq	r2, r2, r1
 80055d0:	6022      	streq	r2, [r4, #0]
 80055d2:	6063      	str	r3, [r4, #4]
 80055d4:	6004      	str	r4, [r0, #0]
 80055d6:	e7ed      	b.n	80055b4 <_free_r+0x24>
 80055d8:	461a      	mov	r2, r3
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	b10b      	cbz	r3, 80055e2 <_free_r+0x52>
 80055de:	42a3      	cmp	r3, r4
 80055e0:	d9fa      	bls.n	80055d8 <_free_r+0x48>
 80055e2:	6811      	ldr	r1, [r2, #0]
 80055e4:	1850      	adds	r0, r2, r1
 80055e6:	42a0      	cmp	r0, r4
 80055e8:	d10b      	bne.n	8005602 <_free_r+0x72>
 80055ea:	6820      	ldr	r0, [r4, #0]
 80055ec:	4401      	add	r1, r0
 80055ee:	1850      	adds	r0, r2, r1
 80055f0:	4283      	cmp	r3, r0
 80055f2:	6011      	str	r1, [r2, #0]
 80055f4:	d1de      	bne.n	80055b4 <_free_r+0x24>
 80055f6:	6818      	ldr	r0, [r3, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	4401      	add	r1, r0
 80055fc:	6011      	str	r1, [r2, #0]
 80055fe:	6053      	str	r3, [r2, #4]
 8005600:	e7d8      	b.n	80055b4 <_free_r+0x24>
 8005602:	d902      	bls.n	800560a <_free_r+0x7a>
 8005604:	230c      	movs	r3, #12
 8005606:	602b      	str	r3, [r5, #0]
 8005608:	e7d4      	b.n	80055b4 <_free_r+0x24>
 800560a:	6820      	ldr	r0, [r4, #0]
 800560c:	1821      	adds	r1, r4, r0
 800560e:	428b      	cmp	r3, r1
 8005610:	bf01      	itttt	eq
 8005612:	6819      	ldreq	r1, [r3, #0]
 8005614:	685b      	ldreq	r3, [r3, #4]
 8005616:	1809      	addeq	r1, r1, r0
 8005618:	6021      	streq	r1, [r4, #0]
 800561a:	6063      	str	r3, [r4, #4]
 800561c:	6054      	str	r4, [r2, #4]
 800561e:	e7c9      	b.n	80055b4 <_free_r+0x24>
 8005620:	bd38      	pop	{r3, r4, r5, pc}
 8005622:	bf00      	nop
 8005624:	20000114 	.word	0x20000114

08005628 <_malloc_r>:
 8005628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562a:	1ccd      	adds	r5, r1, #3
 800562c:	f025 0503 	bic.w	r5, r5, #3
 8005630:	3508      	adds	r5, #8
 8005632:	2d0c      	cmp	r5, #12
 8005634:	bf38      	it	cc
 8005636:	250c      	movcc	r5, #12
 8005638:	2d00      	cmp	r5, #0
 800563a:	4606      	mov	r6, r0
 800563c:	db01      	blt.n	8005642 <_malloc_r+0x1a>
 800563e:	42a9      	cmp	r1, r5
 8005640:	d903      	bls.n	800564a <_malloc_r+0x22>
 8005642:	230c      	movs	r3, #12
 8005644:	6033      	str	r3, [r6, #0]
 8005646:	2000      	movs	r0, #0
 8005648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800564a:	f000 f87d 	bl	8005748 <__malloc_lock>
 800564e:	4921      	ldr	r1, [pc, #132]	; (80056d4 <_malloc_r+0xac>)
 8005650:	680a      	ldr	r2, [r1, #0]
 8005652:	4614      	mov	r4, r2
 8005654:	b99c      	cbnz	r4, 800567e <_malloc_r+0x56>
 8005656:	4f20      	ldr	r7, [pc, #128]	; (80056d8 <_malloc_r+0xb0>)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	b923      	cbnz	r3, 8005666 <_malloc_r+0x3e>
 800565c:	4621      	mov	r1, r4
 800565e:	4630      	mov	r0, r6
 8005660:	f000 f862 	bl	8005728 <_sbrk_r>
 8005664:	6038      	str	r0, [r7, #0]
 8005666:	4629      	mov	r1, r5
 8005668:	4630      	mov	r0, r6
 800566a:	f000 f85d 	bl	8005728 <_sbrk_r>
 800566e:	1c43      	adds	r3, r0, #1
 8005670:	d123      	bne.n	80056ba <_malloc_r+0x92>
 8005672:	230c      	movs	r3, #12
 8005674:	4630      	mov	r0, r6
 8005676:	6033      	str	r3, [r6, #0]
 8005678:	f000 f86c 	bl	8005754 <__malloc_unlock>
 800567c:	e7e3      	b.n	8005646 <_malloc_r+0x1e>
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	1b5b      	subs	r3, r3, r5
 8005682:	d417      	bmi.n	80056b4 <_malloc_r+0x8c>
 8005684:	2b0b      	cmp	r3, #11
 8005686:	d903      	bls.n	8005690 <_malloc_r+0x68>
 8005688:	6023      	str	r3, [r4, #0]
 800568a:	441c      	add	r4, r3
 800568c:	6025      	str	r5, [r4, #0]
 800568e:	e004      	b.n	800569a <_malloc_r+0x72>
 8005690:	6863      	ldr	r3, [r4, #4]
 8005692:	42a2      	cmp	r2, r4
 8005694:	bf0c      	ite	eq
 8005696:	600b      	streq	r3, [r1, #0]
 8005698:	6053      	strne	r3, [r2, #4]
 800569a:	4630      	mov	r0, r6
 800569c:	f000 f85a 	bl	8005754 <__malloc_unlock>
 80056a0:	f104 000b 	add.w	r0, r4, #11
 80056a4:	1d23      	adds	r3, r4, #4
 80056a6:	f020 0007 	bic.w	r0, r0, #7
 80056aa:	1ac2      	subs	r2, r0, r3
 80056ac:	d0cc      	beq.n	8005648 <_malloc_r+0x20>
 80056ae:	1a1b      	subs	r3, r3, r0
 80056b0:	50a3      	str	r3, [r4, r2]
 80056b2:	e7c9      	b.n	8005648 <_malloc_r+0x20>
 80056b4:	4622      	mov	r2, r4
 80056b6:	6864      	ldr	r4, [r4, #4]
 80056b8:	e7cc      	b.n	8005654 <_malloc_r+0x2c>
 80056ba:	1cc4      	adds	r4, r0, #3
 80056bc:	f024 0403 	bic.w	r4, r4, #3
 80056c0:	42a0      	cmp	r0, r4
 80056c2:	d0e3      	beq.n	800568c <_malloc_r+0x64>
 80056c4:	1a21      	subs	r1, r4, r0
 80056c6:	4630      	mov	r0, r6
 80056c8:	f000 f82e 	bl	8005728 <_sbrk_r>
 80056cc:	3001      	adds	r0, #1
 80056ce:	d1dd      	bne.n	800568c <_malloc_r+0x64>
 80056d0:	e7cf      	b.n	8005672 <_malloc_r+0x4a>
 80056d2:	bf00      	nop
 80056d4:	20000114 	.word	0x20000114
 80056d8:	20000118 	.word	0x20000118

080056dc <_realloc_r>:
 80056dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056de:	4607      	mov	r7, r0
 80056e0:	4614      	mov	r4, r2
 80056e2:	460e      	mov	r6, r1
 80056e4:	b921      	cbnz	r1, 80056f0 <_realloc_r+0x14>
 80056e6:	4611      	mov	r1, r2
 80056e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80056ec:	f7ff bf9c 	b.w	8005628 <_malloc_r>
 80056f0:	b922      	cbnz	r2, 80056fc <_realloc_r+0x20>
 80056f2:	f7ff ff4d 	bl	8005590 <_free_r>
 80056f6:	4625      	mov	r5, r4
 80056f8:	4628      	mov	r0, r5
 80056fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056fc:	f000 f830 	bl	8005760 <_malloc_usable_size_r>
 8005700:	42a0      	cmp	r0, r4
 8005702:	d20f      	bcs.n	8005724 <_realloc_r+0x48>
 8005704:	4621      	mov	r1, r4
 8005706:	4638      	mov	r0, r7
 8005708:	f7ff ff8e 	bl	8005628 <_malloc_r>
 800570c:	4605      	mov	r5, r0
 800570e:	2800      	cmp	r0, #0
 8005710:	d0f2      	beq.n	80056f8 <_realloc_r+0x1c>
 8005712:	4631      	mov	r1, r6
 8005714:	4622      	mov	r2, r4
 8005716:	f7ff ff13 	bl	8005540 <memcpy>
 800571a:	4631      	mov	r1, r6
 800571c:	4638      	mov	r0, r7
 800571e:	f7ff ff37 	bl	8005590 <_free_r>
 8005722:	e7e9      	b.n	80056f8 <_realloc_r+0x1c>
 8005724:	4635      	mov	r5, r6
 8005726:	e7e7      	b.n	80056f8 <_realloc_r+0x1c>

08005728 <_sbrk_r>:
 8005728:	b538      	push	{r3, r4, r5, lr}
 800572a:	2300      	movs	r3, #0
 800572c:	4d05      	ldr	r5, [pc, #20]	; (8005744 <_sbrk_r+0x1c>)
 800572e:	4604      	mov	r4, r0
 8005730:	4608      	mov	r0, r1
 8005732:	602b      	str	r3, [r5, #0]
 8005734:	f7fc fd10 	bl	8002158 <_sbrk>
 8005738:	1c43      	adds	r3, r0, #1
 800573a:	d102      	bne.n	8005742 <_sbrk_r+0x1a>
 800573c:	682b      	ldr	r3, [r5, #0]
 800573e:	b103      	cbz	r3, 8005742 <_sbrk_r+0x1a>
 8005740:	6023      	str	r3, [r4, #0]
 8005742:	bd38      	pop	{r3, r4, r5, pc}
 8005744:	20000248 	.word	0x20000248

08005748 <__malloc_lock>:
 8005748:	4801      	ldr	r0, [pc, #4]	; (8005750 <__malloc_lock+0x8>)
 800574a:	f000 b811 	b.w	8005770 <__retarget_lock_acquire_recursive>
 800574e:	bf00      	nop
 8005750:	20000250 	.word	0x20000250

08005754 <__malloc_unlock>:
 8005754:	4801      	ldr	r0, [pc, #4]	; (800575c <__malloc_unlock+0x8>)
 8005756:	f000 b80c 	b.w	8005772 <__retarget_lock_release_recursive>
 800575a:	bf00      	nop
 800575c:	20000250 	.word	0x20000250

08005760 <_malloc_usable_size_r>:
 8005760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005764:	1f18      	subs	r0, r3, #4
 8005766:	2b00      	cmp	r3, #0
 8005768:	bfbc      	itt	lt
 800576a:	580b      	ldrlt	r3, [r1, r0]
 800576c:	18c0      	addlt	r0, r0, r3
 800576e:	4770      	bx	lr

08005770 <__retarget_lock_acquire_recursive>:
 8005770:	4770      	bx	lr

08005772 <__retarget_lock_release_recursive>:
 8005772:	4770      	bx	lr

08005774 <_init>:
 8005774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005776:	bf00      	nop
 8005778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800577a:	bc08      	pop	{r3}
 800577c:	469e      	mov	lr, r3
 800577e:	4770      	bx	lr

08005780 <_fini>:
 8005780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005782:	bf00      	nop
 8005784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005786:	bc08      	pop	{r3}
 8005788:	469e      	mov	lr, r3
 800578a:	4770      	bx	lr
